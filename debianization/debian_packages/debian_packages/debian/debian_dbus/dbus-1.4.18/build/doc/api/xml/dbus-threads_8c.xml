<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="dbus-threads_8c" kind="file">
    <compoundname>dbus-threads.c</compoundname>
    <includes local="no">config.h</includes>
    <includes refid="dbus-threads_8h" local="yes">dbus-threads.h</includes>
    <includes refid="dbus-internals_8h" local="yes">dbus-internals.h</includes>
    <includes refid="dbus-threads-internal_8h" local="yes">dbus-threads-internal.h</includes>
    <includes refid="dbus-list_8h" local="yes">dbus-list.h</includes>
    <incdepgraph>
      <node id="3714">
        <label>stdarg.h</label>
      </node>
      <node id="3716">
        <label>dbus/dbus-threads-internal.h</label>
        <link refid="dbus-threads-internal_8h_source"/>
        <childnode refid="3703" relation="include">
        </childnode>
        <childnode refid="3704" relation="include">
        </childnode>
        <childnode refid="3702" relation="include">
        </childnode>
      </node>
      <node id="3700">
        <label>dbus-threads.c</label>
        <link refid="dbus-threads.c"/>
        <childnode refid="3701" relation="include">
        </childnode>
        <childnode refid="3702" relation="include">
        </childnode>
        <childnode refid="3707" relation="include">
        </childnode>
        <childnode refid="3716" relation="include">
        </childnode>
        <childnode refid="3717" relation="include">
        </childnode>
      </node>
      <node id="3702">
        <label>dbus-threads.h</label>
        <link refid="dbus-threads_8h_source"/>
        <childnode refid="3703" relation="include">
        </childnode>
        <childnode refid="3704" relation="include">
        </childnode>
      </node>
      <node id="3709">
        <label>dbus/dbus-errors.h</label>
        <link refid="dbus-errors_8h_source"/>
        <childnode refid="3703" relation="include">
        </childnode>
        <childnode refid="3704" relation="include">
        </childnode>
        <childnode refid="3710" relation="include">
        </childnode>
      </node>
      <node id="3707">
        <label>dbus-internals.h</label>
        <link refid="dbus-internals_8h_source"/>
        <childnode refid="3708" relation="include">
        </childnode>
        <childnode refid="3704" relation="include">
        </childnode>
        <childnode refid="3709" relation="include">
        </childnode>
        <childnode refid="3711" relation="include">
        </childnode>
        <childnode refid="3716" relation="include">
        </childnode>
      </node>
      <node id="3705">
        <label>stddef.h</label>
      </node>
      <node id="3712">
        <label>dbus/dbus-file.h</label>
        <link refid="dbus-file_8h_source"/>
        <childnode refid="3713" relation="include">
        </childnode>
        <childnode refid="3709" relation="include">
        </childnode>
      </node>
      <node id="3706">
        <label>dbus/dbus-arch-deps.h</label>
      </node>
      <node id="3703">
        <label>dbus/dbus-macros.h</label>
        <link refid="dbus-macros_8h_source"/>
      </node>
      <node id="3715">
        <label>string.h</label>
      </node>
      <node id="3711">
        <label>dbus/dbus-sysdeps.h</label>
        <link refid="dbus-sysdeps_8h_source"/>
        <childnode refid="3701" relation="include">
        </childnode>
        <childnode refid="3709" relation="include">
        </childnode>
        <childnode refid="3712" relation="include">
        </childnode>
        <childnode refid="3713" relation="include">
        </childnode>
        <childnode refid="3715" relation="include">
        </childnode>
        <childnode refid="3714" relation="include">
        </childnode>
      </node>
      <node id="3704">
        <label>dbus/dbus-types.h</label>
        <link refid="dbus-types_8h_source"/>
        <childnode refid="3705" relation="include">
        </childnode>
        <childnode refid="3706" relation="include">
        </childnode>
      </node>
      <node id="3713">
        <label>dbus/dbus-string.h</label>
        <link refid="dbus-string_8h_source"/>
        <childnode refid="3703" relation="include">
        </childnode>
        <childnode refid="3704" relation="include">
        </childnode>
        <childnode refid="3708" relation="include">
        </childnode>
        <childnode refid="3714" relation="include">
        </childnode>
      </node>
      <node id="3708">
        <label>dbus/dbus-memory.h</label>
        <link refid="dbus-memory_8h_source"/>
        <childnode refid="3703" relation="include">
        </childnode>
        <childnode refid="3705" relation="include">
        </childnode>
      </node>
      <node id="3710">
        <label>dbus/dbus-protocol.h</label>
        <link refid="dbus-protocol_8h_source"/>
      </node>
      <node id="3701">
        <label>config.h</label>
      </node>
      <node id="3717">
        <label>dbus-list.h</label>
        <link refid="dbus-list_8h_source"/>
        <childnode refid="3707" relation="include">
        </childnode>
        <childnode refid="3708" relation="include">
        </childnode>
        <childnode refid="3704" relation="include">
        </childnode>
        <childnode refid="3711" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="dbus-threads_8c_1ab4a0b999db95881934efc85c75b40bdc" prot="public" static="no">
        <name>_DBUS_DUMMY_MUTEX</name>
        <initializer>((<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref>*)0xABCDEF)</initializer>
        <briefdescription>
<para>This is used for the no-op default mutex pointer, just to be distinct from <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="45" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-threads_8c_1ab169019cc5e4d2cac6f0140871c79d2c" prot="public" static="no">
        <name>_DBUS_DUMMY_CONDVAR</name>
        <initializer>((<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref>*)0xABCDEF2)</initializer>
        <briefdescription>
<para>This is used for the no-op default mutex pointer, just to be distinct from <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="48" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-threads_8c_1a82215dc4179c08b3e08000dcbd896277" prot="public" static="no">
        <name>LOCK_ADDR</name>
        <param><defname>name</defname></param>
        <initializer>(&amp; _dbus_lock_##name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="420"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dbus-threads_8c_1a174384c95d09c694b9c4084f376c4774" prot="public" static="yes" mutable="no">
        <type><ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref></type>
        <definition>DBusThreadFunctions thread_functions</definition>
        <argsstring></argsstring>
        <name>thread_functions</name>
        <initializer>
{
  0,
  <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,
  <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,
  <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,
  
  <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="37" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dbus-threads_8c_1a6f05ae16a13ac3f782b4c7b9942978e6" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int thread_init_generation</definition>
        <argsstring></argsstring>
        <name>thread_init_generation</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="39" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dbus-threads_8c_1ad7f9db80247e3dbfc39694b1eac257a6" prot="public" static="yes" mutable="no">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>DBusList* uninitialized_mutex_list</definition>
        <argsstring></argsstring>
        <name>uninitialized_mutex_list</name>
        <initializer> <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="41" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dbus-threads_8c_1a84aab38a01471f1135ad17f146362b77" prot="public" static="yes" mutable="no">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>DBusList* uninitialized_condvar_list</definition>
        <argsstring></argsstring>
        <name>uninitialized_condvar_list</name>
        <initializer> <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="42" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusThreadsInternals_1gaa68763a20debe2babcf441da8df6684c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *</type>
        <definition>DBusMutex* _dbus_mutex_new</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_mutex_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a new mutex using the function supplied to <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>, or creates a no-op mutex if threads are not initialized. </para>        </briefdescription>
        <detaileddescription>
<para>May return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> even if threads are initialized, indicating out-of-memory.</para><para><simplesect kind="return"><para>new mutex or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="70" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="69" bodyend="77"/>
        <references refid="structDBusThreadFunctions_1a342ba12a619162a5b228903076b46a44" compoundref="dbus-threads_8h" startline="165">DBusThreadFunctions::mutex_new</references>
        <references refid="structDBusThreadFunctions_1afd30fb78a3ca1064bc8c074a6a61361e" compoundref="dbus-threads_8h" startline="177">DBusThreadFunctions::recursive_mutex_new</references>
        <referencedby refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" compoundref="dbus-threads_8c" startline="89" endline="103">_dbus_mutex_new_at_location</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_mutex_new_at_location</definition>
        <argsstring>(DBusMutex **location_p)</argsstring>
        <name>_dbus_mutex_new_at_location</name>
        <param>
          <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> **</type>
          <declname>location_p</declname>
        </param>
        <briefdescription>
<para>This does the same thing as _dbus_mutex_new. </para>        </briefdescription>
        <detaileddescription>
<para>It however gives another level of indirection by allocating a pointer to point to the mutex location. This allows the threading module to swap out dummy mutexes for real a real mutex so libraries can initialize threads even after the D-Bus API has been used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>location_p</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the new mutex, can return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on OOM </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="90" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="89" bodyend="103"/>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="group__DBusList_1gad99045e79db46159babe69718f343053" compoundref="dbus-list_8c" startline="247" endline="257">_dbus_list_append</references>
        <references refid="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" compoundref="dbus-threads_8c" startline="110" endline="119">_dbus_mutex_free</references>
        <references refid="group__DBusThreadsInternals_1gaa68763a20debe2babcf441da8df6684c" compoundref="dbus-threads_8c" startline="69" endline="77">_dbus_mutex_new</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1237" endline="1396">_dbus_connection_new_for_transport</referencedby>
        <referencedby refid="group__DBusServerInternals_1gaacfb3d29553f205b362c850cfda02fd9" compoundref="dbus-server_8c" startline="97" endline="170">_dbus_server_init_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_mutex_free</definition>
        <argsstring>(DBusMutex *mutex)</argsstring>
        <name>_dbus_mutex_free</name>
        <param>
          <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Frees a mutex created with dbus_mutex_new(); does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="111" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="110" bodyend="119"/>
        <references refid="structDBusThreadFunctions_1a8be6d85b7f162352efa5bb4a5663f44f" compoundref="dbus-threads_8h" startline="178">DBusThreadFunctions::recursive_mutex_free</references>
        <references refid="structDBusThreadFunctions_1a01107266a74895f13af9962af6ad07dd" compoundref="dbus-threads_8h" startline="166">DBusThreadFunctions::mutex_free</references>
        <referencedby refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" compoundref="dbus-threads_8c" startline="89" endline="103">_dbus_mutex_new_at_location</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" compoundref="dbus-threads_8c" startline="127" endline="136">_dbus_mutex_free_at_location</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_mutex_free_at_location</definition>
        <argsstring>(DBusMutex **location_p)</argsstring>
        <name>_dbus_mutex_free_at_location</name>
        <param>
          <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> **</type>
          <declname>location_p</declname>
        </param>
        <briefdescription>
<para>Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="128" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="127" bodyend="136"/>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" compoundref="dbus-list_8c" startline="423" endline="441">_dbus_list_remove</references>
        <references refid="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" compoundref="dbus-threads_8c" startline="110" endline="119">_dbus_mutex_free</references>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1237" endline="1396">_dbus_connection_new_for_transport</referencedby>
        <referencedby refid="group__DBusServerInternals_1gaacfb3d29553f205b362c850cfda02fd9" compoundref="dbus-server_8c" startline="97" endline="170">_dbus_server_init_base</referencedby>
        <referencedby refid="group__DBusServerInternals_1ga93b5bca90e69122d5acbbeef2b4ca03e" compoundref="dbus-server_8c" startline="179" endline="204">_dbus_server_finalize_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1gae6eafe138e9c317bfb25971d1d8bef2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_mutex_lock</definition>
        <argsstring>(DBusMutex *mutex)</argsstring>
        <name>_dbus_mutex_lock</name>
        <param>
          <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Locks a mutex. </para>        </briefdescription>
        <detaileddescription>
<para>Does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer. Locks may be recursive if threading implementation initialized recursive locks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="145" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="144" bodyend="153"/>
        <references refid="structDBusThreadFunctions_1a1cc9d20f2ad0296e932951470063f8d0" compoundref="dbus-threads_8h" startline="167">DBusThreadFunctions::mutex_lock</references>
        <references refid="structDBusThreadFunctions_1ae99179276be65fe4f701de307882dac5" compoundref="dbus-threads_8h" startline="179">DBusThreadFunctions::recursive_mutex_lock</references>
        <referencedby refid="group__DBusDataSlot_1ga941a12182e69c185bd27f6efbfbd0f86" compoundref="dbus-dataslot_8c" startline="69" endline="151">_dbus_data_slot_allocator_alloc</referencedby>
        <referencedby refid="group__DBusDataSlot_1ga059c50a24cd9fc984e918e6159841633" compoundref="dbus-dataslot_8c" startline="165" endline="206">_dbus_data_slot_allocator_free</referencedby>
        <referencedby refid="group__DBusDataSlot_1ga43f741229f0c38788442601e2750ec66" compoundref="dbus-dataslot_8c" startline="298" endline="318">_dbus_data_slot_list_get</referencedby>
        <referencedby refid="group__DBusDataSlot_1gad2952f9f686d96e7114fc49ab7452e1a" compoundref="dbus-dataslot_8c" startline="237" endline="286">_dbus_data_slot_list_set</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga94dcc555488e5d677f10bd3898d61c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_mutex_unlock</definition>
        <argsstring>(DBusMutex *mutex)</argsstring>
        <name>_dbus_mutex_unlock</name>
        <param>
          <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Unlocks a mutex. </para>        </briefdescription>
        <detaileddescription>
<para>Does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer.</para><para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="162" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="161" bodyend="170"/>
        <references refid="structDBusThreadFunctions_1a334d478ec305b04f526537c131cd8e8a" compoundref="dbus-threads_8h" startline="168">DBusThreadFunctions::mutex_unlock</references>
        <references refid="structDBusThreadFunctions_1a0bdb8cd9b263bcde5a0548b16ccd0702" compoundref="dbus-threads_8h" startline="180">DBusThreadFunctions::recursive_mutex_unlock</references>
        <referencedby refid="group__DBusDataSlot_1ga941a12182e69c185bd27f6efbfbd0f86" compoundref="dbus-dataslot_8c" startline="69" endline="151">_dbus_data_slot_allocator_alloc</referencedby>
        <referencedby refid="group__DBusDataSlot_1ga059c50a24cd9fc984e918e6159841633" compoundref="dbus-dataslot_8c" startline="165" endline="206">_dbus_data_slot_allocator_free</referencedby>
        <referencedby refid="group__DBusDataSlot_1ga43f741229f0c38788442601e2750ec66" compoundref="dbus-dataslot_8c" startline="298" endline="318">_dbus_data_slot_list_get</referencedby>
        <referencedby refid="group__DBusDataSlot_1gad2952f9f686d96e7114fc49ab7452e1a" compoundref="dbus-dataslot_8c" startline="237" endline="286">_dbus_data_slot_list_set</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga454b138bcbd419d38b3da6b707e46998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> *</type>
        <definition>DBusCondVar* _dbus_condvar_new</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_condvar_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a new condition variable using the function supplied to <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>, or creates a no-op condition variable if threads are not initialized. </para>        </briefdescription>
        <detaileddescription>
<para>May return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> even if threads are initialized, indicating out-of-memory.</para><para><simplesect kind="return"><para>new mutex or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="182" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="181" bodyend="187"/>
        <references refid="structDBusThreadFunctions_1a1796b617165734984bc40d38f9600d78" compoundref="dbus-threads_8h" startline="170">DBusThreadFunctions::condvar_new</references>
        <referencedby refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" compoundref="dbus-threads_8c" startline="201" endline="213">_dbus_condvar_new_at_location</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_condvar_new_at_location</definition>
        <argsstring>(DBusCondVar **location_p)</argsstring>
        <name>_dbus_condvar_new_at_location</name>
        <param>
          <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> **</type>
          <declname>location_p</declname>
        </param>
        <briefdescription>
<para>This does the same thing as _dbus_condvar_new. </para>        </briefdescription>
        <detaileddescription>
<para>It however gives another level of indirection by allocating a pointer to point to the condvar location. This allows the threading module to swap out dummy condvars for real a real condvar so libraries can initialize threads even after the D-Bus API has been used.</para><para><simplesect kind="return"><para>the location of a new condvar or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on OOM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="202" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="201" bodyend="213"/>
        <references refid="group__DBusThreadsInternals_1gaff04b7377b6ab0cc22fee6a2811dde84" compoundref="dbus-threads_8c" startline="221" endline="225">_dbus_condvar_free</references>
        <references refid="group__DBusThreadsInternals_1ga454b138bcbd419d38b3da6b707e46998" compoundref="dbus-threads_8c" startline="181" endline="187">_dbus_condvar_new</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="group__DBusList_1gad99045e79db46159babe69718f343053" compoundref="dbus-list_8c" startline="247" endline="257">_dbus_list_append</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1237" endline="1396">_dbus_connection_new_for_transport</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1gaff04b7377b6ab0cc22fee6a2811dde84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_condvar_free</definition>
        <argsstring>(DBusCondVar *cond)</argsstring>
        <name>_dbus_condvar_free</name>
        <param>
          <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Frees a conditional variable created with dbus_condvar_new(); does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="222" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="221" bodyend="225"/>
        <references refid="structDBusThreadFunctions_1ad302412c382190eddc05736f24d8855c" compoundref="dbus-threads_8h" startline="171">DBusThreadFunctions::condvar_free</references>
        <referencedby refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" compoundref="dbus-threads_8c" startline="201" endline="213">_dbus_condvar_new_at_location</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" compoundref="dbus-threads_8c" startline="233" endline="242">_dbus_condvar_free_at_location</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_condvar_free_at_location</definition>
        <argsstring>(DBusCondVar **location_p)</argsstring>
        <name>_dbus_condvar_free_at_location</name>
        <param>
          <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> **</type>
          <declname>location_p</declname>
        </param>
        <briefdescription>
<para>Frees a conditional variable and removes it from the uninitialized_condvar_list; does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="234" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="233" bodyend="242"/>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" compoundref="dbus-list_8c" startline="423" endline="441">_dbus_list_remove</references>
        <references refid="group__DBusThreadsInternals_1gaff04b7377b6ab0cc22fee6a2811dde84" compoundref="dbus-threads_8c" startline="221" endline="225">_dbus_condvar_free</references>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1237" endline="1396">_dbus_connection_new_for_transport</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga393c0cfdec998dc5abe49480ac21ea51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_condvar_wait</definition>
        <argsstring>(DBusCondVar *cond, DBusMutex *mutex)</argsstring>
        <name>_dbus_condvar_wait</name>
        <param>
          <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Atomically unlocks the mutex and waits for the conditions variable to be signalled. </para>        </briefdescription>
        <detaileddescription>
<para>Locks the mutex again before returning. Does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="253" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="251" bodyend="256"/>
        <references refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" compoundref="dbus-threads_8h" startline="172">DBusThreadFunctions::condvar_wait</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1gaac7b2117e5479ca6858734b59cfb9259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_condvar_wait_timeout</definition>
        <argsstring>(DBusCondVar *cond, DBusMutex *mutex, int timeout_milliseconds)</argsstring>
        <name>_dbus_condvar_wait_timeout</name>
        <param>
          <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>Atomically unlocks the mutex and waits for the conditions variable to be signalled, or for a timeout. </para>        </briefdescription>
        <detaileddescription>
<para>Locks the mutex again before returning. Does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer. Return value is <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if we timed out, <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> otherwise.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>the condition variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>the mutex </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum time to wait </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if the timeout occurred, <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="273" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="270" bodyend="278"/>
        <references refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" compoundref="dbus-threads_8h" startline="172">DBusThreadFunctions::condvar_wait</references>
        <references refid="structDBusThreadFunctions_1a5e049c7bdf4d83a85ebce31d838d4218" compoundref="dbus-threads_8h" startline="173">DBusThreadFunctions::condvar_wait_timeout</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga8af2fd84773022e7e7ce1f21f0126203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_condvar_wake_one</definition>
        <argsstring>(DBusCondVar *cond)</argsstring>
        <name>_dbus_condvar_wake_one</name>
        <param>
          <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>If there are threads waiting on the condition variable, wake up exactly one. </para>        </briefdescription>
        <detaileddescription>
<para>Does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="287" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="286" bodyend="290"/>
        <references refid="structDBusThreadFunctions_1a3f1301eacf666381ec6c39100e6787e1" compoundref="dbus-threads_8h" startline="174">DBusThreadFunctions::condvar_wake_one</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga1a9ce112b6bc72feccd34f9251744e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_condvar_wake_all</definition>
        <argsstring>(DBusCondVar *cond)</argsstring>
        <name>_dbus_condvar_wake_all</name>
        <param>
          <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>If there are threads waiting on the condition variable, wake up all of them. </para>        </briefdescription>
        <detaileddescription>
<para>Does nothing if passed a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="299" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="298" bodyend="302"/>
        <references refid="structDBusThreadFunctions_1a128295c0019a401163d04ea0e291b36c" compoundref="dbus-threads_8h" startline="175">DBusThreadFunctions::condvar_wake_all</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga2aad9a43877fd3f23a7b205320be8d99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void shutdown_global_locks</definition>
        <argsstring>(void *data)</argsstring>
        <name>shutdown_global_locks</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="306" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="305" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga77e8c11c8824dcf8418f42c07518d2b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void shutdown_uninitialized_locks</definition>
        <argsstring>(void *data)</argsstring>
        <name>shutdown_uninitialized_locks</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="323" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="322" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga1f0f98f6a25bec1e5181a3c620881f22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t init_uninitialized_locks</definition>
        <argsstring>(void)</argsstring>
        <name>init_uninitialized_locks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="330" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="329" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreadsInternals_1ga1b60610bd21f39d34c1d6da8b2921f61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t init_locks</definition>
        <argsstring>(void)</argsstring>
        <name>init_locks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="415" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="414" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_threads_init</definition>
        <argsstring>(const DBusThreadFunctions *functions)</argsstring>
        <name>dbus_threads_init</name>
        <param>
          <type>const <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref> *</type>
          <declname>functions</declname>
        </param>
        <briefdescription>
<para>Initializes threads. </para>        </briefdescription>
        <detaileddescription>
<para>If this function is not called, the D-Bus library will not lock any data structures. If it is called, D-Bus will do locking, at some cost in efficiency. Note that this function must be called BEFORE the second thread is started.</para><para>Almost always, you should use <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref> instead. The raw <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> is only useful if you require a particular thread implementation for some reason.</para><para>A possible reason to use <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> rather than <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref> is to insert debugging checks or print statements.</para><para><ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> may be called more than once. The first one wins and subsequent calls are ignored. (Unless you use <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> to reset libdbus, which will let you re-init threads.)</para><para>Either recursive or nonrecursive mutex functions must be specified, but not both. New code should provide only the recursive functions<itemizedlist>
<listitem><para>specifying the nonrecursive ones is deprecated.</para></listitem></itemizedlist>
</para><para>Because this function effectively sets global state, all code running in a given application must agree on the thread implementation. Most code won&apos;t care which thread implementation is used, so there&apos;s no problem. However, usually libraries should not call <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> or <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref>, instead leaving this policy choice to applications.</para><para>The exception is for application frameworks (GLib, Qt, etc.) and D-Bus bindings based on application frameworks. These frameworks define a cross-platform thread abstraction and can assume applications using the framework are OK with using that thread abstraction.</para><para>However, even these app frameworks may find it easier to simply call <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref>, and there&apos;s no reason they shouldn&apos;t.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functions</parametername>
</parameternamelist>
<parameterdescription>
<para>functions for using threads </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="549" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="548" bodyend="652"/>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="structDBusThreadFunctions_1ad302412c382190eddc05736f24d8855c" compoundref="dbus-threads_8h" startline="171">DBusThreadFunctions::condvar_free</references>
        <references refid="structDBusThreadFunctions_1a1796b617165734984bc40d38f9600d78" compoundref="dbus-threads_8h" startline="170">DBusThreadFunctions::condvar_new</references>
        <references refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" compoundref="dbus-threads_8h" startline="172">DBusThreadFunctions::condvar_wait</references>
        <references refid="structDBusThreadFunctions_1a5e049c7bdf4d83a85ebce31d838d4218" compoundref="dbus-threads_8h" startline="173">DBusThreadFunctions::condvar_wait_timeout</references>
        <references refid="structDBusThreadFunctions_1a128295c0019a401163d04ea0e291b36c" compoundref="dbus-threads_8h" startline="175">DBusThreadFunctions::condvar_wake_all</references>
        <references refid="structDBusThreadFunctions_1a3f1301eacf666381ec6c39100e6787e1" compoundref="dbus-threads_8h" startline="174">DBusThreadFunctions::condvar_wake_one</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" compoundref="dbus-threads_8h" startline="163">DBusThreadFunctions::mask</references>
        <references refid="structDBusThreadFunctions_1a01107266a74895f13af9962af6ad07dd" compoundref="dbus-threads_8h" startline="166">DBusThreadFunctions::mutex_free</references>
        <references refid="structDBusThreadFunctions_1a1cc9d20f2ad0296e932951470063f8d0" compoundref="dbus-threads_8h" startline="167">DBusThreadFunctions::mutex_lock</references>
        <references refid="structDBusThreadFunctions_1a342ba12a619162a5b228903076b46a44" compoundref="dbus-threads_8h" startline="165">DBusThreadFunctions::mutex_new</references>
        <references refid="structDBusThreadFunctions_1a334d478ec305b04f526537c131cd8e8a" compoundref="dbus-threads_8h" startline="168">DBusThreadFunctions::mutex_unlock</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusThreadFunctions_1a8be6d85b7f162352efa5bb4a5663f44f" compoundref="dbus-threads_8h" startline="178">DBusThreadFunctions::recursive_mutex_free</references>
        <references refid="structDBusThreadFunctions_1ae99179276be65fe4f701de307882dac5" compoundref="dbus-threads_8h" startline="179">DBusThreadFunctions::recursive_mutex_lock</references>
        <references refid="structDBusThreadFunctions_1afd30fb78a3ca1064bc8c074a6a61361e" compoundref="dbus-threads_8h" startline="177">DBusThreadFunctions::recursive_mutex_new</references>
        <references refid="structDBusThreadFunctions_1a0bdb8cd9b263bcde5a0548b16ccd0702" compoundref="dbus-threads_8h" startline="180">DBusThreadFunctions::recursive_mutex_unlock</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" compoundref="dbus-sysdeps-pthread_8c" startline="360" endline="364">_dbus_threads_init_platform_specific</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_threads_init_default</definition>
        <argsstring>(void)</argsstring>
        <name>dbus_threads_init_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Calls <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> with a default set of <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref> appropriate for the platform. </para>        </briefdescription>
        <detaileddescription>
<para>Most applications should use this rather than <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>.</para><para>It&apos;s safe to call <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref> as many times as you want, but only the first time will have an effect.</para><para><ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> reverses the effects of this function when it resets all global state in libdbus.</para><para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="675" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="674" bodyend="677"/>
        <references refid="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" compoundref="dbus-sysdeps-pthread_8c" startline="360" endline="364">_dbus_threads_init_platform_specific</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>C;<sp/>c-file-style:<sp/>&quot;gnu&quot;;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>dbus-threads.h<sp/><sp/>D-Bus<sp/>threads<sp/>handling</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2002,<sp/>2003,<sp/>2006<sp/>Red<sp/>Hat<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Academic<sp/>Free<sp/>License<sp/>version<sp/>2.1</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-threads.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-internals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-threads-internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-list.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusThreadFunctions" kindref="compound" tooltip="Functions that must be implemented to make the D-Bus library thread-aware.">DBusThreadFunctions</ref><sp/>thread_functions<sp/>=</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>0,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/>NULL</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_init_generation<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*uninitialized_mutex_list<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*uninitialized_condvar_list<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor">#define<sp/>_DBUS_DUMMY_MUTEX<sp/>((DBusMutex*)0xABCDEF)</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor">#define<sp/>_DBUS_DUMMY_CONDVAR<sp/>((DBusCondVar*)0xABCDEF2)</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref>*</highlight></codeline>
<codeline lineno="69" refid="group__DBusThreadsInternals_1gaa68763a20debe2babcf441da8df6684c" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1gaa68763a20debe2babcf441da8df6684c" kindref="member" tooltip="Creates a new mutex using the function supplied to dbus_threads_init(), or creates a no-op mutex if t...">_dbus_mutex_new</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_functions.<ref refid="structDBusThreadFunctions_1afd30fb78a3ca1064bc8c074a6a61361e" kindref="member" tooltip="Function to create a recursive mutex.">recursive_mutex_new</ref>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1afd30fb78a3ca1064bc8c074a6a61361e" kindref="member" tooltip="Function to create a recursive mutex.">recursive_mutex_new</ref>)<sp/>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_functions.<ref refid="structDBusThreadFunctions_1a342ba12a619162a5b228903076b46a44" kindref="member" tooltip="Function to create a mutex; optional and deprecated.">mutex_new</ref>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a342ba12a619162a5b228903076b46a44" kindref="member" tooltip="Function to create a mutex; optional and deprecated.">mutex_new</ref>)<sp/>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_DBUS_DUMMY_MUTEX;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" kindref="member" tooltip="This does the same thing as _dbus_mutex_new.">_dbus_mutex_new_at_location</ref><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>**location_p)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(location_p<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>*location_p<sp/>=<sp/><ref refid="group__DBusThreadsInternals_1gaa68763a20debe2babcf441da8df6684c" kindref="member" tooltip="Creates a new mutex using the function supplied to dbus_threads_init(), or creates a no-op mutex if t...">_dbus_mutex_new</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_init_generation<sp/>!=<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref><sp/>&amp;&amp;<sp/>*location_p)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;uninitialized_mutex_list,<sp/>location_p))</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" kindref="member" tooltip="Frees a mutex created with dbus_mutex_new(); does nothing if passed a NULL pointer.">_dbus_mutex_free</ref><sp/>(*location_p);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*location_p<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" kindref="member" tooltip="Frees a mutex created with dbus_mutex_new(); does nothing if passed a NULL pointer.">_dbus_mutex_free</ref><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*mutex)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mutex)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mutex<sp/>&amp;&amp;<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a8be6d85b7f162352efa5bb4a5663f44f" kindref="member" tooltip="Function to free a recursive mutex.">recursive_mutex_free</ref>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a8be6d85b7f162352efa5bb4a5663f44f" kindref="member" tooltip="Function to free a recursive mutex.">recursive_mutex_free</ref>)<sp/>(mutex);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mutex<sp/>&amp;&amp;<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a01107266a74895f13af9962af6ad07dd" kindref="member" tooltip="Function to free a mutex; optional and deprecated.">mutex_free</ref>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a01107266a74895f13af9962af6ad07dd" kindref="member" tooltip="Function to free a mutex; optional and deprecated.">mutex_free</ref>)<sp/>(mutex);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" kindref="member" tooltip="Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a NULL pointer...">_dbus_mutex_free_at_location</ref><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>**location_p)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location_p)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_init_generation<sp/>!=<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove</ref><sp/>(&amp;uninitialized_mutex_list,<sp/>location_p);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" kindref="member" tooltip="Frees a mutex created with dbus_mutex_new(); does nothing if passed a NULL pointer.">_dbus_mutex_free</ref><sp/>(*location_p);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="group__DBusThreadsInternals_1gae6eafe138e9c317bfb25971d1d8bef2d" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1gae6eafe138e9c317bfb25971d1d8bef2d" kindref="member" tooltip="Locks a mutex.">_dbus_mutex_lock</ref><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*mutex)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mutex)<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_functions.<ref refid="structDBusThreadFunctions_1ae99179276be65fe4f701de307882dac5" kindref="member" tooltip="Function to lock a recursive mutex.">recursive_mutex_lock</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1ae99179276be65fe4f701de307882dac5" kindref="member" tooltip="Function to lock a recursive mutex.">recursive_mutex_lock</ref>)<sp/>(mutex);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_functions.<ref refid="structDBusThreadFunctions_1a1cc9d20f2ad0296e932951470063f8d0" kindref="member" tooltip="Function to lock a mutex; optional and deprecated.">mutex_lock</ref>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a1cc9d20f2ad0296e932951470063f8d0" kindref="member" tooltip="Function to lock a mutex; optional and deprecated.">mutex_lock</ref>)<sp/>(mutex);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="group__DBusThreadsInternals_1ga94dcc555488e5d677f10bd3898d61c00" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1ga94dcc555488e5d677f10bd3898d61c00" kindref="member" tooltip="Unlocks a mutex.">_dbus_mutex_unlock</ref><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*mutex)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mutex)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_functions.<ref refid="structDBusThreadFunctions_1a0bdb8cd9b263bcde5a0548b16ccd0702" kindref="member" tooltip="Function to unlock a recursive mutex.">recursive_mutex_unlock</ref>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a0bdb8cd9b263bcde5a0548b16ccd0702" kindref="member" tooltip="Function to unlock a recursive mutex.">recursive_mutex_unlock</ref>)<sp/>(mutex);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_functions.<ref refid="structDBusThreadFunctions_1a334d478ec305b04f526537c131cd8e8a" kindref="member" tooltip="Function to unlock a mutex; optional and deprecated.">mutex_unlock</ref>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a334d478ec305b04f526537c131cd8e8a" kindref="member" tooltip="Function to unlock a mutex; optional and deprecated.">mutex_unlock</ref>)<sp/>(mutex);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*</highlight></codeline>
<codeline lineno="181" refid="group__DBusThreadsInternals_1ga454b138bcbd419d38b3da6b707e46998" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1ga454b138bcbd419d38b3da6b707e46998" kindref="member" tooltip="Creates a new condition variable using the function supplied to dbus_threads_init(), or creates a no-op condition variable if threads are not initialized.">_dbus_condvar_new</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_functions.<ref refid="structDBusThreadFunctions_1a1796b617165734984bc40d38f9600d78" kindref="member" tooltip="Function to create a condition variable.">condvar_new</ref>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a1796b617165734984bc40d38f9600d78" kindref="member" tooltip="Function to create a condition variable.">condvar_new</ref>)<sp/>();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_DBUS_DUMMY_CONDVAR;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="201" refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" kindref="member" tooltip="This does the same thing as _dbus_condvar_new.">_dbus_condvar_new_at_location</ref><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>**location_p)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>*location_p<sp/>=<sp/><ref refid="group__DBusThreadsInternals_1ga454b138bcbd419d38b3da6b707e46998" kindref="member" tooltip="Creates a new condition variable using the function supplied to dbus_threads_init(), or creates a no-op condition variable if threads are not initialized.">_dbus_condvar_new</ref>();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_init_generation<sp/>!=<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref><sp/>&amp;&amp;<sp/>*location_p)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;uninitialized_condvar_list,<sp/>location_p))</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gaff04b7377b6ab0cc22fee6a2811dde84" kindref="member" tooltip="Frees a conditional variable created with dbus_condvar_new(); does nothing if passed a NULL pointer...">_dbus_condvar_free</ref><sp/>(*location_p);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*location_p<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="group__DBusThreadsInternals_1gaff04b7377b6ab0cc22fee6a2811dde84" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1gaff04b7377b6ab0cc22fee6a2811dde84" kindref="member" tooltip="Frees a conditional variable created with dbus_condvar_new(); does nothing if passed a NULL pointer...">_dbus_condvar_free</ref><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond<sp/>&amp;&amp;<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1ad302412c382190eddc05736f24d8855c" kindref="member" tooltip="Function to free a condition variable.">condvar_free</ref>)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1ad302412c382190eddc05736f24d8855c" kindref="member" tooltip="Function to free a condition variable.">condvar_free</ref>)<sp/>(cond);</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" kindref="member" tooltip="Frees a conditional variable and removes it from the uninitialized_condvar_list; does nothing if pass...">_dbus_condvar_free_at_location</ref><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>**location_p)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location_p)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_init_generation<sp/>!=<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove</ref><sp/>(&amp;uninitialized_condvar_list,<sp/>location_p);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gaff04b7377b6ab0cc22fee6a2811dde84" kindref="member" tooltip="Frees a conditional variable created with dbus_condvar_new(); does nothing if passed a NULL pointer...">_dbus_condvar_free</ref><sp/>(*location_p);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="group__DBusThreadsInternals_1ga393c0cfdec998dc5abe49480ac21ea51" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1ga393c0cfdec998dc5abe49480ac21ea51" kindref="member" tooltip="Atomically unlocks the mutex and waits for the conditions variable to be signalled.">_dbus_condvar_wait</ref><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/>*mutex)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond<sp/>&amp;&amp;<sp/>mutex<sp/>&amp;&amp;<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" kindref="member" tooltip="Function to wait on a condition.">condvar_wait</ref>)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" kindref="member" tooltip="Function to wait on a condition.">condvar_wait</ref>)<sp/>(cond,<sp/>mutex);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="270" refid="group__DBusThreadsInternals_1gaac7b2117e5479ca6858734b59cfb9259" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1gaac7b2117e5479ca6858734b59cfb9259" kindref="member" tooltip="Atomically unlocks the mutex and waits for the conditions variable to be signalled, or for a timeout.">_dbus_condvar_wait_timeout</ref><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cond,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mutex,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond<sp/>&amp;&amp;<sp/>mutex<sp/>&amp;&amp;<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" kindref="member" tooltip="Function to wait on a condition.">condvar_wait</ref>)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a5e049c7bdf4d83a85ebce31d838d4218" kindref="member" tooltip="Function to wait on a condition with a timeout.">condvar_wait_timeout</ref>)<sp/>(cond,<sp/>mutex,<sp/>timeout_milliseconds);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="group__DBusThreadsInternals_1ga8af2fd84773022e7e7ce1f21f0126203" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1ga8af2fd84773022e7e7ce1f21f0126203" kindref="member" tooltip="If there are threads waiting on the condition variable, wake up exactly one.">_dbus_condvar_wake_one</ref><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond<sp/>&amp;&amp;<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a3f1301eacf666381ec6c39100e6787e1" kindref="member" tooltip="Function to wake one thread waiting on the condition.">condvar_wake_one</ref>)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a3f1301eacf666381ec6c39100e6787e1" kindref="member" tooltip="Function to wake one thread waiting on the condition.">condvar_wake_one</ref>)<sp/>(cond);</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="group__DBusThreadsInternals_1ga1a9ce112b6bc72feccd34f9251744e76" refkind="member"><highlight class="normal"><ref refid="group__DBusThreadsInternals_1ga1a9ce112b6bc72feccd34f9251744e76" kindref="member" tooltip="If there are threads waiting on the condition variable, wake up all of them.">_dbus_condvar_wake_all</ref><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cond<sp/>&amp;&amp;<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a128295c0019a401163d04ea0e291b36c" kindref="member" tooltip="Function to wake all threads waiting on the condition.">condvar_wake_all</ref>)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a128295c0019a401163d04ea0e291b36c" kindref="member" tooltip="Function to wake all threads waiting on the condition.">condvar_wake_all</ref>)<sp/>(cond);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">shutdown_global_locks<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>***locks<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>_DBUS_N_GLOBAL_LOCKS)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" kindref="member" tooltip="Frees a mutex created with dbus_mutex_new(); does nothing if passed a NULL pointer.">_dbus_mutex_free</ref><sp/>(*(locks[i]));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(locks[i])<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(locks);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">shutdown_uninitialized_locks<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;uninitialized_mutex_list);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;uninitialized_condvar_list);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="329"><highlight class="normal">init_uninitialized_locks<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(thread_init_generation<sp/>!=<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>uninitialized_mutex_list;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>**mp;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mp<sp/>=<sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>**)link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(*mp<sp/>==<sp/>_DBUS_DUMMY_MUTEX);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*mp<sp/>=<sp/><ref refid="group__DBusThreadsInternals_1gaa68763a20debe2babcf441da8df6684c" kindref="member" tooltip="Creates a new mutex using the function supplied to dbus_threads_init(), or creates a no-op mutex if t...">_dbus_mutex_new</ref><sp/>();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*mp<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail_mutex;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;uninitialized_mutex_list,<sp/>link);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>uninitialized_condvar_list;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>**cp;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>**)link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(*cp<sp/>==<sp/>_DBUS_DUMMY_CONDVAR);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*cp<sp/>=<sp/><ref refid="group__DBusThreadsInternals_1ga454b138bcbd419d38b3da6b707e46998" kindref="member" tooltip="Creates a new condition variable using the function supplied to dbus_threads_init(), or creates a no-op condition variable if threads are not initialized.">_dbus_condvar_new</ref><sp/>();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*cp<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail_condvar;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;uninitialized_condvar_list,<sp/>link);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;uninitialized_mutex_list);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;uninitialized_condvar_list);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusMemoryInternals_1ga8dc6d5dd0a0e7901ab793da7403ee734" kindref="member" tooltip="Register a cleanup function to be called exactly once the next time dbus_shutdown() is called...">_dbus_register_shutdown_func</ref><sp/>(shutdown_uninitialized_locks,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail_condvar;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/>fail_condvar:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>uninitialized_condvar_list;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>**cp;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>**)link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*cp<sp/>!=<sp/>_DBUS_DUMMY_CONDVAR)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gaff04b7377b6ab0cc22fee6a2811dde84" kindref="member" tooltip="Frees a conditional variable created with dbus_condvar_new(); does nothing if passed a NULL pointer...">_dbus_condvar_free</ref><sp/>(*cp);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*cp<sp/>=<sp/>_DBUS_DUMMY_CONDVAR;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;uninitialized_condvar_list,<sp/>link);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/>fail_mutex:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>uninitialized_mutex_list;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>**mp;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mp<sp/>=<sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>**)link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*mp<sp/>!=<sp/>_DBUS_DUMMY_MUTEX)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" kindref="member" tooltip="Frees a mutex created with dbus_mutex_new(); does nothing if passed a NULL pointer.">_dbus_mutex_free</ref><sp/>(*mp);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*mp<sp/>=<sp/>_DBUS_DUMMY_MUTEX;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;uninitialized_mutex_list,<sp/>link);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="414"><highlight class="normal">init_locks<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>***dynamic_global_locks;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>**global_locks[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOCK_ADDR(name)<sp/>(&amp;<sp/>_dbus_lock_##name)</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(win_fds),</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(sid_atom_cache),</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(list),</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(connection_slots),</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(pending_call_slots),</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(server_slots),</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(message_slots),</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!DBUS_USE_SYNC</highlight></codeline>
<codeline lineno="429"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(atomic),</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="431"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(bus),</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(bus_datas),</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(shutdown_funcs),</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(system_users),</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(message_cache),</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(shared_connections),</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>LOCK_ADDR<sp/>(machine_uuid)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LOCK_ADDR</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(_DBUS_N_ELEMENTS<sp/>(global_locks)<sp/>==</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_N_GLOBAL_LOCKS);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>dynamic_global_locks<sp/>=<sp/><ref refid="group__DBusMemory_1ga54ccb556e7964112a825a7f46c156ca0" kindref="member" tooltip="Safe macro for using dbus_malloc().">dbus_new</ref><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref>**,<sp/>_DBUS_N_GLOBAL_LOCKS);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dynamic_global_locks<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>failed;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>_DBUS_N_ELEMENTS<sp/>(global_locks))</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*global_locks[i]<sp/>=<sp/><ref refid="group__DBusThreadsInternals_1gaa68763a20debe2babcf441da8df6684c" kindref="member" tooltip="Creates a new mutex using the function supplied to dbus_threads_init(), or creates a no-op mutex if t...">_dbus_mutex_new</ref><sp/>();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*global_locks[i]<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>failed;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_global_locks[i]<sp/>=<sp/>global_locks[i];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusMemoryInternals_1ga8dc6d5dd0a0e7901ab793da7403ee734" kindref="member" tooltip="Register a cleanup function to be called exactly once the next time dbus_shutdown() is called...">_dbus_register_shutdown_func</ref><sp/>(shutdown_global_locks,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_global_locks))</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>failed;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_uninitialized_locks<sp/>())</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>failed;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/>failed:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(dynamic_global_locks);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>i<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gaf9370643f45e9491d98a6819b422af5c" kindref="member" tooltip="Frees a mutex created with dbus_mutex_new(); does nothing if passed a NULL pointer.">_dbus_mutex_free</ref><sp/>(*global_locks[i]);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*global_locks[i]<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>internals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="548" refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" refkind="member"><highlight class="normal"><ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member" tooltip="Initializes threads.">dbus_threads_init</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusThreadFunctions" kindref="compound" tooltip="Functions that must be implemented to make the D-Bus library thread-aware.">DBusThreadFunctions</ref><sp/>*functions)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>mutex_set;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>recursive_mutex_set;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>these<sp/>base<sp/>functions<sp/>are<sp/>required.<sp/>Future<sp/>additions<sp/>to</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/>*<sp/>DBusThreadFunctions<sp/>may<sp/>be<sp/>optional.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_NEW_MASK);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_FREE_MASK);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_MASK);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_TIMEOUT_MASK);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ONE_MASK);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ALL_MASK);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a1796b617165734984bc40d38f9600d78" kindref="member" tooltip="Function to create a condition variable.">condvar_new</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1ad302412c382190eddc05736f24d8855c" kindref="member" tooltip="Function to free a condition variable.">condvar_free</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" kindref="member" tooltip="Function to wait on a condition.">condvar_wait</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a5e049c7bdf4d83a85ebce31d838d4218" kindref="member" tooltip="Function to wait on a condition with a timeout.">condvar_wait_timeout</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a3f1301eacf666381ec6c39100e6787e1" kindref="member" tooltip="Function to wake one thread waiting on the condition.">condvar_wake_one</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a128295c0019a401163d04ea0e291b36c" kindref="member" tooltip="Function to wake all threads waiting on the condition.">condvar_wake_all</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Either<sp/>the<sp/>mutex<sp/>function<sp/>set<sp/>or<sp/>recursive<sp/>mutex<sp/>set<sp/>needs<sp/></highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>be<sp/>available<sp/>but<sp/>not<sp/>both</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>mutex_set<sp/>=<sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_MUTEX_NEW_MASK)<sp/>&amp;&amp;<sp/><sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_MUTEX_FREE_MASK)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_MUTEX_LOCK_MASK)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_MUTEX_UNLOCK_MASK)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a342ba12a619162a5b228903076b46a44" kindref="member" tooltip="Function to create a mutex; optional and deprecated.">mutex_new</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a01107266a74895f13af9962af6ad07dd" kindref="member" tooltip="Function to free a mutex; optional and deprecated.">mutex_free</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a1cc9d20f2ad0296e932951470063f8d0" kindref="member" tooltip="Function to lock a mutex; optional and deprecated.">mutex_lock</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a334d478ec305b04f526537c131cd8e8a" kindref="member" tooltip="Function to unlock a mutex; optional and deprecated.">mutex_unlock</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>recursive_mutex_set<sp/>=<sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_NEW_MASK)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_FREE_MASK)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_LOCK_MASK)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_UNLOCK_MASK)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1afd30fb78a3ca1064bc8c074a6a61361e" kindref="member" tooltip="Function to create a recursive mutex.">recursive_mutex_new</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a8be6d85b7f162352efa5bb4a5663f44f" kindref="member" tooltip="Function to free a recursive mutex.">recursive_mutex_free</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1ae99179276be65fe4f701de307882dac5" kindref="member" tooltip="Function to lock a recursive mutex.">recursive_mutex_lock</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a0bdb8cd9b263bcde5a0548b16ccd0702" kindref="member" tooltip="Function to unlock a recursive mutex.">recursive_mutex_unlock</ref>;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(mutex_set<sp/>||<sp/>recursive_mutex_set))</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;Either<sp/>the<sp/>nonrecusrive<sp/>or<sp/>recursive<sp/>mutex<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;functions<sp/>sets<sp/>should<sp/>be<sp/>passed<sp/>into<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dbus_threads_init.<sp/>Neither<sp/>sets<sp/>were<sp/>passed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mutex_set<sp/>&amp;&amp;<sp/>recursive_mutex_set)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;Either<sp/>the<sp/>nonrecusrive<sp/>or<sp/>recursive<sp/>mutex<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;functions<sp/>sets<sp/>should<sp/>be<sp/>passed<sp/>into<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dbus_threads_init.<sp/>Both<sp/>sets<sp/>were<sp/>passed.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;You<sp/>most<sp/>likely<sp/>just<sp/>want<sp/>to<sp/>set<sp/>the<sp/>recursive<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mutex<sp/>functions<sp/>to<sp/>avoid<sp/>deadlocks<sp/>in<sp/>D-Bus.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>all<sp/>bits<sp/>in<sp/>the<sp/>mask<sp/>actually<sp/>are<sp/>valid<sp/>mask<sp/>bits.</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/>*<sp/>ensures<sp/>people<sp/>won&apos;t<sp/>write<sp/>code<sp/>that<sp/>breaks<sp/>when<sp/>we<sp/>add</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/>*<sp/>new<sp/>bits.</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>((functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>~DBUS_THREAD_FUNCTIONS_ALL_MASK)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_init_generation<sp/>!=<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>allow<sp/>re-init<sp/>in<sp/>new<sp/>generation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Silently<sp/>allow<sp/>multiple<sp/>init</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/><sp/>*<sp/>First<sp/>init<sp/>wins<sp/>and<sp/>D-Bus<sp/>will<sp/>always<sp/>use<sp/>its<sp/>threading<sp/>system<sp/></highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread_functions.<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a342ba12a619162a5b228903076b46a44" kindref="member" tooltip="Function to create a mutex; optional and deprecated.">mutex_new</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a342ba12a619162a5b228903076b46a44" kindref="member" tooltip="Function to create a mutex; optional and deprecated.">mutex_new</ref>;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a01107266a74895f13af9962af6ad07dd" kindref="member" tooltip="Function to free a mutex; optional and deprecated.">mutex_free</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a01107266a74895f13af9962af6ad07dd" kindref="member" tooltip="Function to free a mutex; optional and deprecated.">mutex_free</ref>;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a1cc9d20f2ad0296e932951470063f8d0" kindref="member" tooltip="Function to lock a mutex; optional and deprecated.">mutex_lock</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a1cc9d20f2ad0296e932951470063f8d0" kindref="member" tooltip="Function to lock a mutex; optional and deprecated.">mutex_lock</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a334d478ec305b04f526537c131cd8e8a" kindref="member" tooltip="Function to unlock a mutex; optional and deprecated.">mutex_unlock</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a334d478ec305b04f526537c131cd8e8a" kindref="member" tooltip="Function to unlock a mutex; optional and deprecated.">mutex_unlock</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a1796b617165734984bc40d38f9600d78" kindref="member" tooltip="Function to create a condition variable.">condvar_new</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a1796b617165734984bc40d38f9600d78" kindref="member" tooltip="Function to create a condition variable.">condvar_new</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1ad302412c382190eddc05736f24d8855c" kindref="member" tooltip="Function to free a condition variable.">condvar_free</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1ad302412c382190eddc05736f24d8855c" kindref="member" tooltip="Function to free a condition variable.">condvar_free</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" kindref="member" tooltip="Function to wait on a condition.">condvar_wait</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" kindref="member" tooltip="Function to wait on a condition.">condvar_wait</ref>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a5e049c7bdf4d83a85ebce31d838d4218" kindref="member" tooltip="Function to wait on a condition with a timeout.">condvar_wait_timeout</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a5e049c7bdf4d83a85ebce31d838d4218" kindref="member" tooltip="Function to wait on a condition with a timeout.">condvar_wait_timeout</ref>;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a3f1301eacf666381ec6c39100e6787e1" kindref="member" tooltip="Function to wake one thread waiting on the condition.">condvar_wake_one</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a3f1301eacf666381ec6c39100e6787e1" kindref="member" tooltip="Function to wake one thread waiting on the condition.">condvar_wake_one</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a128295c0019a401163d04ea0e291b36c" kindref="member" tooltip="Function to wake all threads waiting on the condition.">condvar_wake_all</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a128295c0019a401163d04ea0e291b36c" kindref="member" tooltip="Function to wake all threads waiting on the condition.">condvar_wake_all</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_NEW_MASK)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1afd30fb78a3ca1064bc8c074a6a61361e" kindref="member" tooltip="Function to create a recursive mutex.">recursive_mutex_new</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1afd30fb78a3ca1064bc8c074a6a61361e" kindref="member" tooltip="Function to create a recursive mutex.">recursive_mutex_new</ref>;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_FREE_MASK)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a8be6d85b7f162352efa5bb4a5663f44f" kindref="member" tooltip="Function to free a recursive mutex.">recursive_mutex_free</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a8be6d85b7f162352efa5bb4a5663f44f" kindref="member" tooltip="Function to free a recursive mutex.">recursive_mutex_free</ref>;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_LOCK_MASK)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1ae99179276be65fe4f701de307882dac5" kindref="member" tooltip="Function to lock a recursive mutex.">recursive_mutex_lock</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1ae99179276be65fe4f701de307882dac5" kindref="member" tooltip="Function to lock a recursive mutex.">recursive_mutex_lock</ref>;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>&amp;<sp/>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_UNLOCK_MASK)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a0bdb8cd9b263bcde5a0548b16ccd0702" kindref="member" tooltip="Function to unlock a recursive mutex.">recursive_mutex_unlock</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a0bdb8cd9b263bcde5a0548b16ccd0702" kindref="member" tooltip="Function to unlock a recursive mutex.">recursive_mutex_unlock</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>thread_functions.<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref><sp/>=<sp/>functions-&gt;<ref refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" kindref="member" tooltip="Mask indicating which functions are present.">mask</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_locks<sp/>())</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>thread_init_generation<sp/>=<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Default<sp/>thread<sp/>implemenation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="674" refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" refkind="member"><highlight class="normal"><ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member" tooltip="Calls dbus_threads_init() with a default set of DBusThreadFunctions appropriate for the platform...">dbus_threads_init_default</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" kindref="member" tooltip="Initialize threads as in dbus_threads_init_default(), appropriately for the platform.">_dbus_threads_init_platform_specific</ref><sp/>();</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="683"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="684"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DBusFakeMutex<sp/>DBusFakeMutex;</highlight></codeline>
<codeline lineno="686"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DBusFakeMutex</highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>locked;<sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*<sp/><sp/>dbus_fake_mutex_new<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_fake_mutex_free<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/>*mutex);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/>dbus_fake_mutex_lock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/>*mutex);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/>dbus_fake_mutex_unlock<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/>*mutex);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref>*<sp/>dbus_fake_condvar_new<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_fake_condvar_free<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_fake_condvar_wait<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/>*mutex);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/>dbus_fake_condvar_wait_timeout<sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/>*mutex,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_msec);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_fake_condvar_wake_one<sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_fake_condvar_wake_all<sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusThreadFunctions" kindref="compound" tooltip="Functions that must be implemented to make the D-Bus library thread-aware.">DBusThreadFunctions</ref><sp/>fake_functions<sp/>=</highlight></codeline>
<codeline lineno="707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_MUTEX_NEW_MASK<sp/>|</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_MUTEX_FREE_MASK<sp/>|</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_MUTEX_LOCK_MASK<sp/>|</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_MUTEX_UNLOCK_MASK<sp/>|</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_NEW_MASK<sp/>|</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_FREE_MASK<sp/>|</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_MASK<sp/>|</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_TIMEOUT_MASK<sp/>|</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ONE_MASK|</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ALL_MASK,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>dbus_fake_mutex_new,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>dbus_fake_mutex_free,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>dbus_fake_mutex_lock,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>dbus_fake_mutex_unlock,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>dbus_fake_condvar_new,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>dbus_fake_condvar_free,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>dbus_fake_condvar_wait,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>dbus_fake_condvar_wait_timeout,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>dbus_fake_condvar_wake_one,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>dbus_fake_condvar_wake_all</highlight></codeline>
<codeline lineno="728"><highlight class="normal">};</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*</highlight></codeline>
<codeline lineno="731"><highlight class="normal">dbus_fake_mutex_new<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>DBusFakeMutex<sp/>*mutex;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>mutex<sp/>=<sp/><ref refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" kindref="member" tooltip="Safe macro for using dbus_malloc0().">dbus_new0</ref><sp/>(DBusFakeMutex,<sp/>1);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*)mutex;</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal">dbus_fake_mutex_free<sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*mutex)</highlight></codeline>
<codeline lineno="742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>DBusFakeMutex<sp/>*fake<sp/>=<sp/>(DBusFakeMutex*)<sp/>mutex;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(!fake-&gt;locked);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(fake);</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="751"><highlight class="normal">dbus_fake_mutex_lock<sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*mutex)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>DBusFakeMutex<sp/>*fake<sp/>=<sp/>(DBusFakeMutex*)<sp/>mutex;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(!fake-&gt;locked);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>fake-&gt;locked<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="763"><highlight class="normal">dbus_fake_mutex_unlock<sp/>(<ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*mutex)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>DBusFakeMutex<sp/>*fake<sp/>=<sp/>(DBusFakeMutex*)<sp/>mutex;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(fake-&gt;locked);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>fake-&gt;locked<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref>*</highlight></codeline>
<codeline lineno="775"><highlight class="normal">dbus_fake_condvar_new<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref>*)<sp/><ref refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" kindref="member" tooltip="Duplicates a string.">_dbus_strdup</ref><sp/>(</highlight><highlight class="stringliteral">&quot;FakeCondvar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal">dbus_fake_condvar_free<sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond)</highlight></codeline>
<codeline lineno="782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(cond);</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal">dbus_fake_condvar_wait<sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/>*mutex)</highlight></codeline>
<codeline lineno="789"><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="794"><highlight class="normal">dbus_fake_condvar_wait_timeout<sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/>*mutex,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_msec)</highlight></codeline>
<codeline lineno="797"><highlight class="normal">{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal">dbus_fake_condvar_wake_one<sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond)</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">dbus_fake_condvar_wake_all<sp/>(<ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*cond)</highlight></codeline>
<codeline lineno="809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="814"><highlight class="normal">_dbus_threads_init_debug<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_WIN</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" kindref="member" tooltip="Initialize threads as in dbus_threads_init_default(), appropriately for the platform.">_dbus_threads_init_platform_specific</ref>();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member" tooltip="Initializes threads.">dbus_threads_init</ref><sp/>(&amp;fake_functions);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c"/>
  </compounddef>
</doxygen>
