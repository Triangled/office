<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="dbus-memory_8c" kind="file">
    <compoundname>dbus-memory.c</compoundname>
    <includes local="no">config.h</includes>
    <includes refid="dbus-memory_8h" local="yes">dbus-memory.h</includes>
    <includes refid="dbus-internals_8h" local="yes">dbus-internals.h</includes>
    <includes refid="dbus-sysdeps_8h" local="yes">dbus-sysdeps.h</includes>
    <includes refid="dbus-list_8h" local="yes">dbus-list.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="1450">
        <label>stdarg.h</label>
      </node>
      <node id="1452">
        <label>dbus/dbus-threads-internal.h</label>
        <link refid="dbus-threads-internal_8h_source"/>
        <childnode refid="1440" relation="include">
        </childnode>
        <childnode refid="1443" relation="include">
        </childnode>
        <childnode refid="1453" relation="include">
        </childnode>
      </node>
      <node id="1453">
        <label>dbus/dbus-threads.h</label>
        <link refid="dbus-threads_8h_source"/>
        <childnode refid="1440" relation="include">
        </childnode>
        <childnode refid="1443" relation="include">
        </childnode>
      </node>
      <node id="1455">
        <label>stdlib.h</label>
      </node>
      <node id="1445">
        <label>dbus/dbus-errors.h</label>
        <link refid="dbus-errors_8h_source"/>
        <childnode refid="1440" relation="include">
        </childnode>
        <childnode refid="1443" relation="include">
        </childnode>
        <childnode refid="1446" relation="include">
        </childnode>
      </node>
      <node id="1442">
        <label>dbus-internals.h</label>
        <link refid="dbus-internals_8h_source"/>
        <childnode refid="1439" relation="include">
        </childnode>
        <childnode refid="1443" relation="include">
        </childnode>
        <childnode refid="1445" relation="include">
        </childnode>
        <childnode refid="1447" relation="include">
        </childnode>
        <childnode refid="1452" relation="include">
        </childnode>
      </node>
      <node id="1441">
        <label>stddef.h</label>
      </node>
      <node id="1448">
        <label>dbus/dbus-file.h</label>
        <link refid="dbus-file_8h_source"/>
        <childnode refid="1449" relation="include">
        </childnode>
        <childnode refid="1445" relation="include">
        </childnode>
      </node>
      <node id="1444">
        <label>dbus/dbus-arch-deps.h</label>
      </node>
      <node id="1440">
        <label>dbus/dbus-macros.h</label>
        <link refid="dbus-macros_8h_source"/>
      </node>
      <node id="1451">
        <label>string.h</label>
      </node>
      <node id="1447">
        <label>dbus/dbus-sysdeps.h</label>
        <link refid="dbus-sysdeps_8h_source"/>
        <childnode refid="1438" relation="include">
        </childnode>
        <childnode refid="1445" relation="include">
        </childnode>
        <childnode refid="1448" relation="include">
        </childnode>
        <childnode refid="1449" relation="include">
        </childnode>
        <childnode refid="1451" relation="include">
        </childnode>
        <childnode refid="1450" relation="include">
        </childnode>
      </node>
      <node id="1443">
        <label>dbus/dbus-types.h</label>
        <link refid="dbus-types_8h_source"/>
        <childnode refid="1441" relation="include">
        </childnode>
        <childnode refid="1444" relation="include">
        </childnode>
      </node>
      <node id="1449">
        <label>dbus/dbus-string.h</label>
        <link refid="dbus-string_8h_source"/>
        <childnode refid="1440" relation="include">
        </childnode>
        <childnode refid="1443" relation="include">
        </childnode>
        <childnode refid="1439" relation="include">
        </childnode>
        <childnode refid="1450" relation="include">
        </childnode>
      </node>
      <node id="1437">
        <label>dbus-memory.c</label>
        <link refid="dbus-memory.c"/>
        <childnode refid="1438" relation="include">
        </childnode>
        <childnode refid="1439" relation="include">
        </childnode>
        <childnode refid="1442" relation="include">
        </childnode>
        <childnode refid="1447" relation="include">
        </childnode>
        <childnode refid="1454" relation="include">
        </childnode>
        <childnode refid="1455" relation="include">
        </childnode>
      </node>
      <node id="1439">
        <label>dbus-memory.h</label>
        <link refid="dbus-memory_8h_source"/>
        <childnode refid="1440" relation="include">
        </childnode>
        <childnode refid="1441" relation="include">
        </childnode>
      </node>
      <node id="1446">
        <label>dbus/dbus-protocol.h</label>
        <link refid="dbus-protocol_8h_source"/>
      </node>
      <node id="1438">
        <label>config.h</label>
      </node>
      <node id="1454">
        <label>dbus-list.h</label>
        <link refid="dbus-list_8h_source"/>
        <childnode refid="1442" relation="include">
        </childnode>
        <childnode refid="1439" relation="include">
        </childnode>
        <childnode refid="1443" relation="include">
        </childnode>
        <childnode refid="1447" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structShutdownClosure" prot="public">ShutdownClosure</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusMemoryInternals_1ga719c469fe616ee7148e826e6ebf3c3e4" prot="public" static="no">
        <type>struct <ref refid="structShutdownClosure" kindref="compound">ShutdownClosure</ref></type>
        <definition>typedef struct ShutdownClosure ShutdownClosure</definition>
        <argsstring></argsstring>
        <name>ShutdownClosure</name>
        <briefdescription>
<para>Represents a function to be called on shutdown. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="714" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="714" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int _dbus_current_generation</definition>
        <argsstring></argsstring>
        <name>_dbus_current_generation</name>
        <initializer> 1</initializer>
        <briefdescription>
<para>_dbus_current_generation is used to track each time that <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> is called, so we can reinit things after it&apos;s been called. </para>        </briefdescription>
        <detaileddescription>
<para>It is simply incremented each time we shut down. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="709" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="709" bodyend="-1"/>
        <referencedby refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" compoundref="dbus-threads_8c" startline="233" endline="242">_dbus_condvar_free_at_location</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" compoundref="dbus-threads_8c" startline="201" endline="213">_dbus_condvar_new_at_location</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1gadc46f7abfe925f9860fc8c64aeb29ad2" compoundref="dbus-connection_8c" startline="1904" endline="1911">_dbus_connection_close_possibly_shared</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1237" endline="1396">_dbus_connection_new_for_transport</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1406" endline="1416">_dbus_connection_ref_unlocked</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga49ba67405d677af6cde9329ed87ea91f" compoundref="dbus-internals_8c" startline="797" endline="830">_dbus_get_local_machine_uuid_encoded</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" compoundref="dbus-threads_8c" startline="127" endline="136">_dbus_mutex_free_at_location</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" compoundref="dbus-threads_8c" startline="89" endline="103">_dbus_mutex_new_at_location</referencedby>
        <referencedby refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" compoundref="dbus-connection_8c" startline="2874" endline="2892">dbus_connection_close</referencedby>
        <referencedby refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2626" endline="2634">dbus_connection_ref</referencedby>
        <referencedby refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" compoundref="dbus-connection_8c" startline="2762" endline="2785">dbus_connection_unref</referencedby>
        <referencedby refid="group__DBusMessage_1ga834035e4817acd64adc8ca584bdf3982" compoundref="dbus-message_8c" startline="1522" endline="1540">dbus_message_ref</referencedby>
        <referencedby refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1550" endline="1567">dbus_message_unref</referencedby>
        <referencedby refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" compoundref="dbus-threads_8c" startline="548" endline="652">dbus_threads_init</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__DBusMemoryInternals_1gafd36a6d0a98c37cc15b0d83ff59bb54c" prot="public" static="yes" mutable="no">
        <type><ref refid="structShutdownClosure" kindref="compound">ShutdownClosure</ref> *</type>
        <definition>ShutdownClosure* registered_globals</definition>
        <argsstring></argsstring>
        <name>registered_globals</name>
        <initializer> <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="727" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="727" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>DBUS_EXPORT DBUS_MALLOC void * dbus_malloc</definition>
        <argsstring>(size_t bytes)</argsstring>
        <name>dbus_malloc</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocates the given number of bytes, as with standard malloc(). </para>        </briefdescription>
        <detaileddescription>
<para>Guaranteed to return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if bytes is zero on all platforms. Returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the allocation fails. The memory must be released with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref>.</para><para><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc()</ref> memory is NOT safe to free with regular free() from the C library. Free it with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref> only.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>allocated memory, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the allocation fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="453" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="452" bodyend="490"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2354" endline="2366">_dbus_atomic_inc</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" compoundref="dbus-mempool_8c" startline="209" endline="326">_dbus_mem_pool_alloc</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaad95864dca5140b730bc143cb2d1b024" compoundref="dbus-internals_8c" startline="508" endline="520">_dbus_memdup</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaffaf8b5bb832c20a8ccb10f012920776" compoundref="dbus-sysdeps-unix_8c" startline="3027" endline="3088">_dbus_printf_string_upper_bound</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" compoundref="dbus-internals_8c" startline="480" endline="497">_dbus_strdup</referencedby>
        <referencedby refid="group__DBusString_1ga7e509d4f959d19d96f83250e62287b06" compoundref="dbus-string_8c" startline="729" endline="742">_dbus_string_copy_data</referencedby>
        <referencedby refid="group__DBusString_1ga569b784beea1b4fa98f05d27e6dd0e72" compoundref="dbus-string_8c" startline="132" endline="166">_dbus_string_init_preallocated</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>DBUS_EXPORT DBUS_MALLOC void * dbus_malloc0</definition>
        <argsstring>(size_t bytes)</argsstring>
        <name>dbus_malloc0</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocates the given number of bytes, as with standard malloc(), but all bytes are initialized to zero as with calloc(). </para>        </briefdescription>
        <detaileddescription>
<para>Guaranteed to return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if bytes is zero on all platforms. Returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the allocation fails. The memory must be released with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref>.</para><para><ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0()</ref> memory is NOT safe to free with regular free() from the C library. Free it with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref> only.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>allocated memory, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the allocation fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="506" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="505" bodyend="543"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2354" endline="2366">_dbus_atomic_inc</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" compoundref="dbus-mempool_8c" startline="209" endline="326">_dbus_mem_pool_alloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>DBUS_EXPORT DBUS_MALLOC void * dbus_realloc</definition>
        <argsstring>(void *memory, size_t bytes)</argsstring>
        <name>dbus_realloc</name>
        <param>
          <type>void *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Resizes a block of memory previously allocated by <ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc()</ref> or <ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Guaranteed to free the memory and return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if bytes is zero on all platforms. Returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the resize fails. If the resize fails, the memory is not freed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>block to be resized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>new size of the memory block </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>allocated memory, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if the resize fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="558" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="556" bodyend="620"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2354" endline="2366">_dbus_atomic_inc</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="629" endline="668">dbus_free</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusDataSlot_1ga941a12182e69c185bd27f6efbfbd0f86" compoundref="dbus-dataslot_8c" startline="69" endline="151">_dbus_data_slot_allocator_alloc</referencedby>
        <referencedby refid="group__DBusDataSlot_1gad2952f9f686d96e7114fc49ab7452e1a" compoundref="dbus-dataslot_8c" startline="237" endline="286">_dbus_data_slot_list_set</referencedby>
        <referencedby refid="group__DBusSysdeps_1gafdae31b3b61299dbaaccfcb1205a6f30" compoundref="dbus-sysdeps-unix_8c" startline="1296" endline="1483">_dbus_listen_tcp_socket</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga4ed7327f9dee98711ebd7c9e5b74dec0" compoundref="dbus-message_8c" startline="3860" endline="3896">_dbus_message_loader_get_unix_fds</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_free</definition>
        <argsstring>(void *memory)</argsstring>
        <name>dbus_free</name>
        <param>
          <type>void *</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Frees a block of memory previously allocated by <ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc()</ref> or <ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If passed <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>block to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="630" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="629" bodyend="668"/>
        <references refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" compoundref="dbus-sysdeps-unix_8c" startline="2375" endline="2388">_dbus_atomic_dec</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusAuth_1ga7fb648be9d6d451917195a0e43eeece0" compoundref="dbus-auth_8c" startline="2346" endline="2385">_dbus_auth_unref</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga3205e9f8672271794aeb9d451e2fcc4a" compoundref="dbus-spawn-win_8c" startline="163" endline="245">_dbus_babysitter_unref</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1237" endline="1396">_dbus_connection_new_for_transport</referencedby>
        <referencedby refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" compoundref="dbus-resources_8c" startline="125" endline="136">_dbus_counter_unref</referencedby>
        <referencedby refid="group__DBusCredentials_1gab26eb5cb8d05139806cf06e99c4ec5b0" compoundref="dbus-credentials_8c" startline="204" endline="218">_dbus_credentials_add_adt_audit_data</referencedby>
        <referencedby refid="group__DBusCredentials_1ga9d2186a4cfa8a421c552ae4592b400f5" compoundref="dbus-credentials_8c" startline="180" endline="193">_dbus_credentials_add_windows_sid</referencedby>
        <referencedby refid="group__DBusCredentials_1ga40a5c7e37b10419e233a473dc7173f3c" compoundref="dbus-credentials_8c" startline="446" endline="455">_dbus_credentials_clear</referencedby>
        <referencedby refid="group__DBusCredentials_1ga89913c830c3627cd006a50ca693af580" compoundref="dbus-credentials_8c" startline="128" endline="139">_dbus_credentials_unref</referencedby>
        <referencedby refid="group__DBusDataSlot_1ga059c50a24cd9fc984e918e6159841633" compoundref="dbus-dataslot_8c" startline="165" endline="206">_dbus_data_slot_allocator_free</referencedby>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="350" endline="357">_dbus_data_slot_list_free</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga1821b64302fe8e12278fa227eb11d393" compoundref="dbus-sysdeps-util-unix_8c" startline="744" endline="748">_dbus_directory_close</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gac2d226476e6fff50bdfaace18b897fe9" compoundref="dbus-userdb_8c" startline="89" endline="92">_dbus_group_info_free</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gab9420d7a4a31329a00fd5709f8cf08ba" compoundref="dbus-userdb_8c" startline="61" endline="68">_dbus_group_info_free_allocated</referencedby>
        <referencedby refid="group__DBusHashTable_1gac8e434348a354b9606d4c50c127a5eb4" compoundref="dbus-hash_8c" startline="295" endline="353">_dbus_hash_table_new</referencedby>
        <referencedby refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" compoundref="dbus-hash_8c" startline="377" endline="426">_dbus_hash_table_unref</referencedby>
        <referencedby refid="group__DBusKeyring_1gadd42b029d08dc477b6847e91bdcb23ca" compoundref="dbus-keyring_8c" startline="681" endline="696">_dbus_keyring_unref</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1ga71aa508a7790c6d1c9c0159defcdd4a6" compoundref="dbus-sysdeps-unix_8c" startline="1070" endline="1156">_dbus_listen_systemd_sockets</referencedby>
        <referencedby refid="group__DBusSysdeps_1gafdae31b3b61299dbaaccfcb1205a6f30" compoundref="dbus-sysdeps-unix_8c" startline="1296" endline="1483">_dbus_listen_tcp_socket</referencedby>
        <referencedby refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" compoundref="dbus-mempool_8c" startline="337" endline="391">_dbus_mem_pool_dealloc</referencedby>
        <referencedby refid="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" compoundref="dbus-mempool_8c" startline="184" endline="199">_dbus_mem_pool_free</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga66f1c10cf909ba09ed732bc125ff8671" compoundref="dbus-message_8c" startline="3719" endline="3758">_dbus_message_loader_new</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga51299aab1f5e0b2408ab858d3377b20c" compoundref="dbus-message_8c" startline="3781" endline="3797">_dbus_message_loader_unref</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga5920f14b487122f13a3d439952d5ed2e" compoundref="dbus-object-tree_8c" startline="92" endline="121">_dbus_object_tree_new</referencedby>
        <referencedby refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" compoundref="dbus-object-tree_8c" startline="391" endline="434">_dbus_object_tree_register</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga7639e273ab160c422a7cef0cda60ded5" compoundref="dbus-object-tree_8c" startline="143" endline="155">_dbus_object_tree_unref</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="94" endline="144">_dbus_pending_call_new_unlocked</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaffaf8b5bb832c20a8ccb10f012920776" compoundref="dbus-sysdeps-unix_8c" startline="3027" endline="3088">_dbus_printf_string_upper_bound</referencedby>
        <referencedby refid="group__DBusServerInternals_1ga93b5bca90e69122d5acbbeef2b4ca03e" compoundref="dbus-server_8c" startline="179" endline="204">_dbus_server_finalize_base</referencedby>
        <referencedby refid="group__DBusServerInternals_1gaacfb3d29553f205b362c850cfda02fd9" compoundref="dbus-server_8c" startline="97" endline="170">_dbus_server_init_base</referencedby>
        <referencedby refid="group__DBusServerUnix_1gaec00cdf4977b9bd33621df684406a779" compoundref="dbus-server-unix_8c" startline="54" endline="214">_dbus_server_listen_platform_specific</referencedby>
        <referencedby refid="group__DBusServerUnix_1ga21ce093bda6ce6c7f94d1d894b6b4358" compoundref="dbus-server-unix_8c" startline="225" endline="298">_dbus_server_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusServerSocket_1ga93d00891e32dbc05a33d3c69ca2ffef6" compoundref="dbus-server-socket_8c" startline="281" endline="366">_dbus_server_new_for_socket</referencedby>
        <referencedby refid="group__DBusServerSocket_1ga047d05c427e9a1fc5823fdfdcec5c5f6" compoundref="dbus-server-socket_8c" startline="388" endline="508">_dbus_server_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="263" endline="273">_dbus_string_free</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1ga1b399ef2d7f128e59bb32dbb5b590e1b" compoundref="dbus-timeout_8c" startline="211" endline="223">_dbus_timeout_list_free</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1gaea6359793576a2eec42e27267bae7bbd" compoundref="dbus-timeout_8c" startline="107" endline="122">_dbus_timeout_unref</referencedby>
        <referencedby refid="group__DBusTransport_1gaf27a2aceb062921f3915acb1491a646a" compoundref="dbus-transport_8c" startline="213" endline="233">_dbus_transport_finalize_base</referencedby>
        <referencedby refid="group__DBusTransportSocket_1gac714eaa33ff4ab5c01be1304b23339a7" compoundref="dbus-transport-socket_8c" startline="1232" endline="1291">_dbus_transport_new_for_socket</referencedby>
        <referencedby refid="group__DBusTransport_1ga0893897223056c89f33b2641a7b21cf8" compoundref="dbus-transport_8c" startline="363" endline="447">_dbus_transport_open</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga55dbb78c415da040037442eca4c4e80e" compoundref="dbus-userdb_8c" startline="604" endline="625">_dbus_user_database_unref</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaa40334f7b4f185a437a8bc6d6e0994a1" compoundref="dbus-userdb_8c" startline="76" endline="81">_dbus_user_info_free</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaf725ba6f380a3b926650626eef714b67" compoundref="dbus-userdb_8c" startline="45" endline="52">_dbus_user_info_free_allocated</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gac3f75c0da2c8c51e8708f45dd27f9e2d" compoundref="dbus-watch_8c" startline="232" endline="243">_dbus_watch_list_free</referencedby>
        <referencedby refid="group__DBusWatchInternals_1ga7d27dfc13a3ccfbaa99ceab331bb46f0" compoundref="dbus-watch_8c" startline="124" endline="139">_dbus_watch_unref</referencedby>
        <referencedby refid="group__DBusAddress_1ga37a7009b07cf991ff07f3e86d71bf352" compoundref="dbus-address_8c" startline="189" endline="196">dbus_address_entries_free</referencedby>
        <referencedby refid="group__DBusConnection_1gad0ea06307b418616711131ea7bdae8ac" compoundref="dbus-connection_8c" startline="3133" endline="3144">dbus_connection_free_preallocated_send</referencedby>
        <referencedby refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" compoundref="dbus-errors_8c" startline="211" endline="226">dbus_error_free</referencedby>
        <referencedby refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="677" endline="692">dbus_free_string_array</referencedby>
        <referencedby refid="group__DBusMessage_1ga4bed3858b3b48ec7c86d9fc56a6ce372" compoundref="dbus-message_8c" startline="1443" endline="1511">dbus_message_copy</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
        <referencedby refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" compoundref="dbus-memory_8c" startline="556" endline="620">dbus_realloc</referencedby>
        <referencedby refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="420">dbus_set_error</referencedby>
        <referencedby refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" compoundref="dbus-memory_8c" startline="808" endline="823">dbus_shutdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_free_string_array</definition>
        <argsstring>(char **str_array)</argsstring>
        <name>dbus_free_string_array</name>
        <param>
          <type>char **</type>
          <declname>str_array</declname>
        </param>
        <briefdescription>
<para>Frees a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>-terminated array of strings. </para>        </briefdescription>
        <detaileddescription>
<para>If passed <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, does nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str_array</parametername>
</parameternamelist>
<parameterdescription>
<para>the array to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="678" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="677" bodyend="692"/>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="629" endline="668">dbus_free</references>
        <referencedby refid="group__DBusAuth_1ga9454e2c512b4e2ea54d47cff6acaa4db" compoundref="dbus-auth_8c" startline="2396" endline="2415">_dbus_auth_set_mechanisms</referencedby>
        <referencedby refid="group__DBusAuth_1ga7fb648be9d6d451917195a0e43eeece0" compoundref="dbus-auth_8c" startline="2346" endline="2385">_dbus_auth_unref</referencedby>
        <referencedby refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1082" endline="1165">_dbus_decompose_path</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga53bbcbbd0b564c14c599813dde535443" compoundref="dbus-internals_8c" startline="531" endline="561">_dbus_dup_string_array</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga41a980c914021cdb1825316cccc4ee6c" compoundref="dbus-sysdeps_8c" startline="222" endline="254">_dbus_get_environment</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga1ae02a435d19c3363e11c74b08c43ab2" compoundref="dbus-message_8c" startline="722" endline="928">_dbus_message_iter_get_args_valist</referencedby>
        <referencedby refid="group__DBusObjectTree_1gab64dcc8febde768db3404cd93b333e1e" compoundref="dbus-object-tree_8c" startline="747" endline="904">_dbus_object_tree_dispatch_and_unlock</referencedby>
        <referencedby refid="group__DBusServerInternals_1ga93b5bca90e69122d5acbbeef2b4ca03e" compoundref="dbus-server_8c" startline="179" endline="204">_dbus_server_finalize_base</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga84c21bbcb2a673244f36616c5e053277" compoundref="dbus-spawn_8c" startline="1137" endline="1299">_dbus_spawn_async_with_babysitter</referencedby>
        <referencedby refid="group__DBusConnection_1ga08ee6e70b74c294fe24d0f391f16db24" compoundref="dbus-connection_8c" startline="5753" endline="5777">dbus_connection_get_object_path_data</referencedby>
        <referencedby refid="group__DBusConnection_1ga3e9de2067d0eed66ef73230fae8d8be2" compoundref="dbus-connection_8c" startline="5790" endline="5812">dbus_connection_list_registered</referencedby>
        <referencedby refid="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" compoundref="dbus-connection_8c" startline="5673" endline="5709">dbus_connection_register_fallback</referencedby>
        <referencedby refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" compoundref="dbus-connection_8c" startline="5571" endline="5607">dbus_connection_register_object_path</referencedby>
        <referencedby refid="group__DBusConnection_1ga8e9d2d4ff17c3071124e4993d1536ed4" compoundref="dbus-connection_8c" startline="5624" endline="5653">dbus_connection_try_register_fallback</referencedby>
        <referencedby refid="group__DBusConnection_1ga708b1e108feed18f5775ff404c9dda4b" compoundref="dbus-connection_8c" startline="5524" endline="5553">dbus_connection_try_register_object_path</referencedby>
        <referencedby refid="group__DBusConnection_1ga6ae8f005dedf24c5f2df1768795392fb" compoundref="dbus-connection_8c" startline="5721" endline="5740">dbus_connection_unregister_object_path</referencedby>
        <referencedby refid="group__DBusServer_1ga309e5f1510c74c4b221d12d874d53341" compoundref="dbus-server_8c" startline="1034" endline="1058">dbus_server_set_auth_mechanisms</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemoryInternals_1ga8dc6d5dd0a0e7901ab793da7403ee734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_register_shutdown_func</definition>
        <argsstring>(DBusShutdownFunction func, void *data)</argsstring>
        <name>_dbus_register_shutdown_func</name>
        <param>
          <type>DBusShutdownFunction</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Register a cleanup function to be called exactly once the next time <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> is called. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to the function </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="740" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="738" bodyend="759"/>
        <references refid="structShutdownClosure_1ab6f70dacffc0aa2376a6c26e1fb17518" compoundref="dbus-memory_8c" startline="723">ShutdownClosure::data</references>
        <references refid="group__DBusMemory_1ga54ccb556e7964112a825a7f46c156ca0" compoundref="dbus-memory_8h" startline="58">dbus_new</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structShutdownClosure_1a8d8d4ad2e646f8643a8044de02cf823f" compoundref="dbus-memory_8c" startline="722">ShutdownClosure::func</references>
        <references refid="structShutdownClosure_1a2152ea3eed35addda2f33eee5fbcdd26" compoundref="dbus-memory_8c" startline="721">ShutdownClosure::next</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemory_1ga01912903e39428872920d861ef565bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>dbus_shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Frees all memory allocated internally by libdbus and reverses the effects of <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>libdbus keeps internal global variables, for example caches and thread locks, and it can be useful to free these internal data structures.</para><para><ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> does NOT free memory that was returned to the application. It only returns libdbus-internal data structures.</para><para>You MUST free all memory and release all reference counts returned to you by libdbus prior to calling <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref>.</para><para>You can&apos;t continue to use any D-Bus objects, such as connections, that were allocated prior to <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref>. You can, however, start over; call <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> again, create new connections, and so forth.</para><para>WARNING: <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> is NOT thread safe, it must be called while NO other threads are using D-Bus. (Remember, you have to free all D-Bus objects and memory before you call <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref>, so no thread can be using libdbus.)</para><para>The purpose of <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> is to allow applications to get clean output from memory leak checkers. <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> may also be useful if you want to dlopen() libdbus instead of linking to it, and want to be able to unload the library again.</para><para>There is absolutely no requirement to call <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> - in fact, most applications won&apos;t bother and should not feel guilty.</para><para>You have to know that nobody is using libdbus in your application&apos;s process before you can call <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref>. One implication of this is that calling <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> from a library is almost certainly wrong, since you don&apos;t know what the rest of the app is up to. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" line="809" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c" bodystart="808" bodyend="823"/>
        <references refid="structShutdownClosure_1ab6f70dacffc0aa2376a6c26e1fb17518" compoundref="dbus-memory_8c" startline="723">ShutdownClosure::data</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="629" endline="668">dbus_free</references>
        <references refid="structShutdownClosure_1a8d8d4ad2e646f8643a8044de02cf823f" compoundref="dbus-memory_8c" startline="722">ShutdownClosure::func</references>
        <references refid="structShutdownClosure_1a2152ea3eed35addda2f33eee5fbcdd26" compoundref="dbus-memory_8c" startline="721">ShutdownClosure::next</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>C;<sp/>c-file-style:<sp/>&quot;gnu&quot;;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>dbus-memory.c<sp/><sp/>D-Bus<sp/>memory<sp/>handling</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2002,<sp/>2003<sp/><sp/>Red<sp/>Hat<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Academic<sp/>Free<sp/>License<sp/>version<sp/>2.1</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-internals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-sysdeps.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-list.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>public<sp/>API<sp/>docs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>debug_initialized<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail_nth<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fail_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail_alloc_counter<sp/>=<sp/>_DBUS_INT_MAX;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_failures_per_failure<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_failures_this_failure<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>guards<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>disable_mem_pools<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>backtrace_on_fail_alloc<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusAtomic" kindref="compound" tooltip="An atomic integer safe to increment or decrement from multiple threads.">DBusAtomic</ref><sp/>n_blocks_outstanding<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor">#define<sp/>GUARD_VALUE<sp/>0xdeadbeef</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor">#define<sp/>GUARD_INFO_SIZE<sp/>8</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor">#define<sp/>GUARD_START_PAD<sp/>16</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor">#define<sp/>GUARD_END_PAD<sp/>16</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor">#define<sp/>GUARD_START_OFFSET<sp/>(GUARD_START_PAD<sp/>+<sp/>GUARD_INFO_SIZE)</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor">#define<sp/>GUARD_EXTRA_SIZE<sp/>(GUARD_START_OFFSET<sp/>+<sp/>GUARD_END_PAD)</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">_dbus_initialize_malloc_debug<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!debug_initialized)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug_initialized<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" kindref="member" tooltip="Wrapper for getenv().">_dbus_getenv</ref><sp/>(</highlight><highlight class="stringliteral">&quot;DBUS_MALLOC_FAIL_NTH&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_nth<sp/>=<sp/>atoi<sp/>(<ref refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" kindref="member" tooltip="Wrapper for getenv().">_dbus_getenv</ref><sp/>(</highlight><highlight class="stringliteral">&quot;DBUS_MALLOC_FAIL_NTH&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_alloc_counter<sp/>=<sp/>fail_nth;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Will<sp/>fail<sp/>malloc<sp/>every<sp/>%d<sp/>times\n&quot;</highlight><highlight class="normal">,<sp/>fail_nth);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" kindref="member" tooltip="Wrapper for getenv().">_dbus_getenv</ref><sp/>(</highlight><highlight class="stringliteral">&quot;DBUS_MALLOC_FAIL_GREATER_THAN&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_size<sp/>=<sp/>atoi<sp/>(<ref refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" kindref="member" tooltip="Wrapper for getenv().">_dbus_getenv</ref><sp/>(</highlight><highlight class="stringliteral">&quot;DBUS_MALLOC_FAIL_GREATER_THAN&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Will<sp/>fail<sp/>mallocs<sp/>over<sp/>%ld<sp/>bytes\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>fail_size);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" kindref="member" tooltip="Wrapper for getenv().">_dbus_getenv</ref><sp/>(</highlight><highlight class="stringliteral">&quot;DBUS_MALLOC_GUARDS&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guards<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Will<sp/>use<sp/>malloc<sp/>guards\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" kindref="member" tooltip="Wrapper for getenv().">_dbus_getenv</ref><sp/>(</highlight><highlight class="stringliteral">&quot;DBUS_DISABLE_MEM_POOLS&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disable_mem_pools<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Will<sp/>disable<sp/>memory<sp/>pools\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" kindref="member" tooltip="Wrapper for getenv().">_dbus_getenv</ref><sp/>(</highlight><highlight class="stringliteral">&quot;DBUS_MALLOC_BACKTRACES&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backtrace_on_fail_alloc<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Will<sp/>backtrace<sp/>on<sp/>failing<sp/>a<sp/>malloc\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="171"><highlight class="normal">_dbus_disable_mem_pools<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>_dbus_initialize_malloc_debug<sp/>();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>disable_mem_pools;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">_dbus_set_fail_alloc_counter<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>until_next_fail)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>_dbus_initialize_malloc_debug<sp/>();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>fail_alloc_counter<sp/>=<sp/>until_next_fail;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Set<sp/>fail<sp/>alloc<sp/>counter<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>fail_alloc_counter);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">_dbus_get_fail_alloc_counter<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>_dbus_initialize_malloc_debug<sp/>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fail_alloc_counter;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">_dbus_set_fail_alloc_failures<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failures_per_failure)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>n_failures_per_failure<sp/>=<sp/>failures_per_failure;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">_dbus_get_fail_alloc_failures<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_failures_per_failure;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>called<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="246"><highlight class="normal">_dbus_decrement_fail_alloc_counter<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>_dbus_initialize_malloc_debug<sp/>();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_WIN_FIXME</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!called)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose(</highlight><highlight class="stringliteral">&quot;TODO:<sp/>memory<sp/>allocation<sp/>testing<sp/>errors<sp/>disabled<sp/>for<sp/>now\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>called<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fail_alloc_counter<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backtrace_on_fail_alloc)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1ga8646ab2ef727fcc862c7904113c88a8d" kindref="member" tooltip="On GNU libc systems, print a crude backtrace to stderr.">_dbus_print_backtrace</ref><sp/>();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;failure<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>n_failures_this_failure);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_failures_this_failure<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_failures_this_failure<sp/>&gt;=<sp/>n_failures_per_failure)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fail_nth<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_alloc_counter<sp/>=<sp/>fail_nth;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_alloc_counter<sp/>=<sp/>_DBUS_INT_MAX;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_failures_this_failure<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;reset<sp/>fail<sp/>alloc<sp/>counter<sp/>to<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>fail_alloc_counter);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fail_alloc_counter<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">_dbus_get_malloc_blocks_outstanding<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusSysdeps_1ga626c810359ba0e362367ce2ec6691aca" kindref="member" tooltip="Atomically get the value of an integer.">_dbus_atomic_get</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>SOURCE_UNKNOWN,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>SOURCE_MALLOC,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>SOURCE_REALLOC,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>SOURCE_MALLOC_ZERO,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>SOURCE_REALLOC_NULL</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}<sp/>BlockSource;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="314"><highlight class="normal">source_string<sp/>(BlockSource<sp/>source)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(source)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SOURCE_UNKNOWN:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SOURCE_MALLOC:</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;malloc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SOURCE_REALLOC:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;realloc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SOURCE_MALLOC_ZERO:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;malloc0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SOURCE_REALLOC_NULL:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;realloc(NULL)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>malloc<sp/>block<sp/>source<sp/>ID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">check_guards<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*free_block,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>overwrite)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(free_block<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*block<sp/>=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)free_block)<sp/>-<sp/>GUARD_START_OFFSET;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>requested_bytes<sp/>=<sp/>*(dbus_uint32_t*)block;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BlockSource<sp/>source<sp/>=<sp/>*(dbus_uint32_t*)(block<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>failed;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Checking<sp/>%d<sp/>bytes<sp/>request<sp/>from<sp/>source<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requested_bytes,<sp/>source_string<sp/>(source));</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>GUARD_INFO_SIZE;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>GUARD_START_OFFSET)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/>value<sp/>=<sp/>*(dbus_uint32_t*)<sp/>&amp;block[i];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>GUARD_VALUE)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" kindref="member" tooltip="Prints a warning message to stderr.">_dbus_warn</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Block<sp/>of<sp/>%lu<sp/>bytes<sp/>from<sp/>%s<sp/>had<sp/>start<sp/>guard<sp/>value<sp/>0x%ux<sp/>at<sp/>%d<sp/>expected<sp/>0x%x\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>requested_bytes,<sp/>source_string<sp/>(source),</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value,<sp/>i,<sp/>GUARD_VALUE);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>GUARD_START_OFFSET<sp/>+<sp/>requested_bytes;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>(GUARD_START_OFFSET<sp/>+<sp/>requested_bytes<sp/>+<sp/>GUARD_END_PAD))</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/>value<sp/>=<sp/>*(dbus_uint32_t*)<sp/>&amp;block[i];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>GUARD_VALUE)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" kindref="member" tooltip="Prints a warning message to stderr.">_dbus_warn</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Block<sp/>of<sp/>%lu<sp/>bytes<sp/>from<sp/>%s<sp/>had<sp/>end<sp/>guard<sp/>value<sp/>0x%ux<sp/>at<sp/>%d<sp/>expected<sp/>0x%x\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>requested_bytes,<sp/>source_string<sp/>(source),</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value,<sp/>i,<sp/>GUARD_VALUE);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>memory<sp/>to<sp/>anything<sp/>but<sp/>nul<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset<sp/>(free_block,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/>requested_bytes);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failed)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;guard<sp/>value<sp/>corruption&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="392"><highlight class="normal">set_guards<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*real_block,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>requested_bytes,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockSource<sp/>source)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*block<sp/>=<sp/>real_block;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(GUARD_START_OFFSET<sp/>+<sp/>GUARD_END_PAD<sp/>==<sp/>GUARD_EXTRA_SIZE);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>*((dbus_uint32_t*)block)<sp/>=<sp/>requested_bytes;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>*((dbus_uint32_t*)(block<sp/>+<sp/>4))<sp/>=<sp/>source;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>GUARD_INFO_SIZE;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>GUARD_START_OFFSET)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*(dbus_uint32_t*)<sp/>&amp;block[i])<sp/>=<sp/>GUARD_VALUE;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>GUARD_START_OFFSET<sp/>+<sp/>requested_bytes;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>(GUARD_START_OFFSET<sp/>+<sp/>requested_bytes<sp/>+<sp/>GUARD_END_PAD))</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*(dbus_uint32_t*)<sp/>&amp;block[i])<sp/>=<sp/>GUARD_VALUE;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>check_guards<sp/>(block<sp/>+<sp/>GUARD_START_OFFSET,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block<sp/>+<sp/>GUARD_START_OFFSET;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="429"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>internals<sp/>docs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="452" refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" refkind="member"><highlight class="normal"><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member" tooltip="Allocates the given number of bytes, as with standard malloc().">dbus_malloc</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>_dbus_initialize_malloc_debug<sp/>();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_decrement_fail_alloc_counter<sp/>())</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>FAILING<sp/>malloc<sp/>of<sp/>%ld<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>bytes);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>some<sp/>system<sp/>mallocs<sp/>handle<sp/>this,<sp/>some<sp/>don&apos;t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fail_size<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>bytes<sp/>&gt;<sp/>fail_size)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guards)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>malloc<sp/>(bytes<sp/>+<sp/>GUARD_EXTRA_SIZE);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_guards<sp/>(block,<sp/>bytes,<sp/>SOURCE_MALLOC);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="480"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>malloc<sp/>(bytes);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="485"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="505" refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" refkind="member"><highlight class="normal"><ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member" tooltip="Allocates the given number of bytes, as with standard malloc(), but all bytes are initialized to zero...">dbus_malloc0</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>_dbus_initialize_malloc_debug<sp/>();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_decrement_fail_alloc_counter<sp/>())</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>FAILING<sp/>malloc0<sp/>of<sp/>%ld<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>bytes);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fail_size<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>bytes<sp/>&gt;<sp/>fail_size)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guards)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>calloc<sp/>(bytes<sp/>+<sp/>GUARD_EXTRA_SIZE,<sp/>1);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_guards<sp/>(block,<sp/>bytes,<sp/>SOURCE_MALLOC_ZERO);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>calloc<sp/>(bytes,<sp/>1);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="538"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="541"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="556" refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" refkind="member"><highlight class="normal"><ref refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" kindref="member" tooltip="Resizes a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_realloc</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*memory,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)</highlight></codeline>
<codeline lineno="558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>_dbus_initialize_malloc_debug<sp/>();</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_decrement_fail_alloc_counter<sp/>())</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>FAILING<sp/>realloc<sp/>of<sp/>%ld<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>bytes);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>guarantee<sp/>this<sp/>is<sp/>safe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(memory);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fail_size<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>bytes<sp/>&gt;<sp/>fail_size)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guards)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memory)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>old_bytes;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_guards<sp/>(memory,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>realloc<sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)memory)<sp/>-<sp/>GUARD_START_OFFSET,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>+<sp/>GUARD_EXTRA_SIZE);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_bytes<sp/>=<sp/>*(dbus_uint32_t*)block;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>&amp;&amp;<sp/>bytes<sp/>&gt;=<sp/>old_bytes)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>old<sp/>guards<sp/>shouldn&apos;t<sp/>have<sp/>moved<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_guards<sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)block)<sp/>+<sp/>GUARD_START_OFFSET,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_guards<sp/>(block,<sp/>bytes,<sp/>SOURCE_REALLOC);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>malloc<sp/>(bytes<sp/>+<sp/>GUARD_EXTRA_SIZE);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_guards<sp/>(block,<sp/>bytes,<sp/>SOURCE_REALLOC_NULL);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>realloc<sp/>(memory,<sp/>bytes);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memory<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref><sp/>&amp;&amp;<sp/>mem<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="618"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629" refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" refkind="member"><highlight class="normal"><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*memory)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="632"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guards)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_guards<sp/>(memory,<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memory)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_DISABLE_ASSERT</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" kindref="member" tooltip="Atomically decrement an integer.">_dbus_atomic_dec</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_int32_t<sp/>old_value;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_value<sp/>=<sp/><ref refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" kindref="member" tooltip="Atomically decrement an integer.">_dbus_atomic_dec</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(old_value<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)memory)<sp/>-<sp/>GUARD_START_OFFSET);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="652"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memory)<sp/></highlight><highlight class="comment">/*<sp/>we<sp/>guarantee<sp/>it&apos;s<sp/>safe<sp/>to<sp/>free<sp/>(NULL)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="656"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_DISABLE_ASSERT</highlight></codeline>
<codeline lineno="657"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" kindref="member" tooltip="Atomically decrement an integer.">_dbus_atomic_dec</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dbus_int32_t<sp/>old_value;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>old_value<sp/>=<sp/><ref refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" kindref="member" tooltip="Atomically decrement an integer.">_dbus_atomic_dec</ref><sp/>(&amp;n_blocks_outstanding);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(old_value<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="664"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="665"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(memory);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677" refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" refkind="member"><highlight class="normal"><ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member" tooltip="Frees a NULL-terminated array of strings.">dbus_free_string_array</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**str_array)</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str_array)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(str_array[i])</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(str_array[i]);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(str_array);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>public<sp/>API<sp/>docs<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="709" refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="group__DBusMemoryInternals_1ga719c469fe616ee7148e826e6ebf3c3e4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShutdownClosure" kindref="compound" tooltip="This struct represents a function to be called on shutdown.">ShutdownClosure</ref><sp/><ref refid="structShutdownClosure" kindref="compound" tooltip="This struct represents a function to be called on shutdown.">ShutdownClosure</ref>;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="structShutdownClosure" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structShutdownClosure" kindref="compound" tooltip="This struct represents a function to be called on shutdown.">ShutdownClosure</ref></highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721" refid="structShutdownClosure_1a2152ea3eed35addda2f33eee5fbcdd26" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structShutdownClosure" kindref="compound" tooltip="This struct represents a function to be called on shutdown.">ShutdownClosure</ref><sp/>*<ref refid="structShutdownClosure_1a2152ea3eed35addda2f33eee5fbcdd26" kindref="member" tooltip="Next ShutdownClosure.">next</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="722" refid="structShutdownClosure_1a8d8d4ad2e646f8643a8044de02cf823f" refkind="member"><highlight class="normal"><sp/><sp/>DBusShutdownFunction<sp/><ref refid="structShutdownClosure_1a8d8d4ad2e646f8643a8044de02cf823f" kindref="member" tooltip="Function to call.">func</ref>;<sp/></highlight></codeline>
<codeline lineno="723" refid="structShutdownClosure_1ab6f70dacffc0aa2376a6c26e1fb17518" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structShutdownClosure_1ab6f70dacffc0aa2376a6c26e1fb17518" kindref="member" tooltip="Data for function.">data</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="724"><highlight class="normal">};</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal">_DBUS_DEFINE_GLOBAL_LOCK<sp/>(shutdown_funcs);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structShutdownClosure" kindref="compound" tooltip="This struct represents a function to be called on shutdown.">ShutdownClosure</ref><sp/>*registered_globals<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="738" refid="group__DBusMemoryInternals_1ga8dc6d5dd0a0e7901ab793da7403ee734" refkind="member"><highlight class="normal"><ref refid="group__DBusMemoryInternals_1ga8dc6d5dd0a0e7901ab793da7403ee734" kindref="member" tooltip="Register a cleanup function to be called exactly once the next time dbus_shutdown() is called...">_dbus_register_shutdown_func</ref><sp/>(DBusShutdownFunction<sp/><sp/>func,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><ref refid="structShutdownClosure" kindref="compound" tooltip="This struct represents a function to be called on shutdown.">ShutdownClosure</ref><sp/>*c;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/><ref refid="group__DBusMemory_1ga54ccb556e7964112a825a7f46c156ca0" kindref="member" tooltip="Safe macro for using dbus_malloc().">dbus_new</ref><sp/>(<ref refid="structShutdownClosure" kindref="compound" tooltip="This struct represents a function to be called on shutdown.">ShutdownClosure</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>c-&gt;<ref refid="structShutdownClosure_1a8d8d4ad2e646f8643a8044de02cf823f" kindref="member" tooltip="Function to call.">func</ref><sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>c-&gt;<ref refid="structShutdownClosure_1ab6f70dacffc0aa2376a6c26e1fb17518" kindref="member" tooltip="Data for function.">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>_DBUS_LOCK<sp/>(shutdown_funcs);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>c-&gt;<ref refid="structShutdownClosure_1a2152ea3eed35addda2f33eee5fbcdd26" kindref="member" tooltip="Next ShutdownClosure.">next</ref><sp/>=<sp/>registered_globals;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>registered_globals<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>_DBUS_UNLOCK<sp/>(shutdown_funcs);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>private<sp/>API<sp/>docs<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808" refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" refkind="member"><highlight class="normal"><ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member" tooltip="Frees all memory allocated internally by libdbus and reverses the effects of dbus_threads_init().">dbus_shutdown</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(registered_globals<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structShutdownClosure" kindref="compound" tooltip="This struct represents a function to be called on shutdown.">ShutdownClosure</ref><sp/>*c;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>registered_globals;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>registered_globals<sp/>=<sp/>c-&gt;<ref refid="structShutdownClosure_1a2152ea3eed35addda2f33eee5fbcdd26" kindref="member" tooltip="Next ShutdownClosure.">next</ref>;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>c-&gt;<ref refid="structShutdownClosure_1a8d8d4ad2e646f8643a8044de02cf823f" kindref="member" tooltip="Function to call.">func</ref>)<sp/>(c-&gt;<ref refid="structShutdownClosure_1ab6f70dacffc0aa2376a6c26e1fb17518" kindref="member" tooltip="Data for function.">data</ref>);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(c);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>_dbus_current_generation<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="827"><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="828"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="836"><highlight class="normal">_dbus_memory_test<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>old_guards;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>old_guards<sp/>=<sp/>guards;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>guards<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member" tooltip="Allocates the given number of bytes, as with standard malloc().">dbus_malloc</ref><sp/>(4);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(size<sp/>=<sp/>4;<sp/>size<sp/>&lt;<sp/>256;<sp/>size<sp/>+=<sp/>4)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" kindref="member" tooltip="Resizes a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_realloc</ref><sp/>(p,<sp/>size);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(size<sp/>=<sp/>256;<sp/>size<sp/>!=<sp/>0;<sp/>size<sp/>-=<sp/>4)</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" kindref="member" tooltip="Resizes a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_realloc</ref><sp/>(p,<sp/>size);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(p);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>guards<sp/>=<sp/>old_guards;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-memory.c"/>
  </compounddef>
</doxygen>
