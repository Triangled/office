.TH "Miscellaneous" 3dbus "Wed Mar 26 2014" "Version 1.4.18" "D-Bus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Miscellaneous \- 
.PP
Miscellaneous API that doesn't cleanly fit anywhere else\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBdbus_get_local_machine_id\fP (void)"
.br
.RI "\fIObtains the machine UUID of the machine this process is running on\&. \fP"
.ti -1c
.RI "void \fBdbus_get_version\fP (int *major_version_p, int *minor_version_p, int *micro_version_p)"
.br
.RI "\fIGets the DYNAMICALLY LINKED version of libdbus\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Miscellaneous API that doesn't cleanly fit anywhere else\&. 
.SH "Function Documentation"
.PP 
.SS "DBUS_EXPORT char * \fBdbus_get_local_machine_id\fP (void)"
.PP
Obtains the machine UUID of the machine this process is running on\&. The returned string must be freed with \fBdbus_free()\fP\&.
.PP
This UUID is guaranteed to remain the same until the next reboot (unless the sysadmin foolishly changes it and screws themselves)\&. It will usually remain the same across reboots also, but hardware configuration changes or rebuilding the machine could break that\&.
.PP
The idea is that two processes with the same machine ID should be able to use shared memory, UNIX domain sockets, process IDs, and other features of the OS that require both processes to be running on the same OS kernel instance\&.
.PP
The machine ID can also be used to create unique per-machine instances\&. For example, you could use it in bus names or X selection names\&.
.PP
The machine ID is preferred over the machine hostname, because the hostname is frequently set to 'localhost\&.localdomain' and may also change at runtime\&.
.PP
You can get the machine ID of a remote application by invoking the method GetMachineId from interface org\&.freedesktop\&.DBus\&.Peer\&.
.PP
If the remote application has the same machine ID as the one returned by this function, then the remote application is on the same machine as your application\&.
.PP
The UUID is not a UUID in the sense of RFC4122; the details are explained in the D-Bus specification\&.
.PP
\fBReturns:\fP
.RS 4
a 32-byte-long hex-encoded UUID string, or \fBNULL\fP if insufficient memory 
.RE
.PP

.PP
Definition at line 73 of file dbus-misc\&.c\&.
.PP
References _dbus_get_local_machine_uuid_encoded(), _dbus_string_free(), _dbus_string_init(), _dbus_string_steal_data(), and NULL\&.
.SS "DBUS_EXPORT void \fBdbus_get_version\fP (int *major_version_p, int *minor_version_p, int *micro_version_p)"
.PP
Gets the DYNAMICALLY LINKED version of libdbus\&. Alternatively, there are macros #DBUS_MAJOR_VERSION, #DBUS_MINOR_VERSION, #DBUS_MICRO_VERSION, and #DBUS_VERSION which allow you to test the VERSION YOU ARE COMPILED AGAINST\&. In other words, you can get either the runtime or the compile-time version\&. Think carefully about which of these you want in a given case\&.
.PP
The libdbus full version number is 'MAJOR\&.MINOR\&.MICRO' where the MINOR changes if API is added, and the MICRO changes with each release of a MAJOR\&.MINOR series\&. The MINOR is an odd number for development releases and an even number for stable releases\&.
.PP
\fBParameters:\fP
.RS 4
\fImajor_version_p\fP pointer to return the major version, or \fBNULL\fP 
.br
\fIminor_version_p\fP pointer to return the minor version, or \fBNULL\fP 
.br
\fImicro_version_p\fP pointer to return the micro version, or \fBNULL\fP 
.RE
.PP

.PP
Definition at line 161 of file dbus-misc\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for D-Bus from the source code\&.
