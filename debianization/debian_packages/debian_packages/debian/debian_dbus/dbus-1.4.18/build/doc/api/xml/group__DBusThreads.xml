<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__DBusThreads" kind="group">
    <compoundname>DBusThreads</compoundname>
    <title>Thread functions</title>
    <innerclass refid="structDBusThreadFunctions" prot="public">DBusThreadFunctions</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__DBusThreads_1gaf6212cb5e78b84cf5c6c6cb6e2b5aabe" prot="public" static="no">
        <name>DBusThreadFunctionsMask</name>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeaa9c17d57ad09b9c4887e778a8d6da52a" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_MUTEX_NEW_MASK</name>
          <initializer> 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeaee23dd95abbfc3af422434aa2c589d52" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_MUTEX_FREE_MASK</name>
          <initializer> 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea17d0e235221f59a1670e4eb51cbede68" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_MUTEX_LOCK_MASK</name>
          <initializer> 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea6365399a1289a0d377e1b3dabd33c20e" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_MUTEX_UNLOCK_MASK</name>
          <initializer> 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea82590541c1771f21c817a0e7ba471704" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_NEW_MASK</name>
          <initializer> 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea3fc7bbf2846e4e5888f7f98c50065c12" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_FREE_MASK</name>
          <initializer> 1 &lt;&lt; 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea2a6f7308b45fa5c8a39f3ff49b17eceb" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_MASK</name>
          <initializer> 1 &lt;&lt; 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeaf194eabe54860cdbd29f8eb5b9b3fca9" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_TIMEOUT_MASK</name>
          <initializer> 1 &lt;&lt; 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeaba0f4e0fc98da2abd45dc4a2114c138b" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ONE_MASK</name>
          <initializer> 1 &lt;&lt; 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea32c2dffcc23715f0aa3cca4e82d64372" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ALL_MASK</name>
          <initializer> 1 &lt;&lt; 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea962c080c48805d9dbfba11366c648acf" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_NEW_MASK</name>
          <initializer> 1 &lt;&lt; 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea5030e2b3ea98aee2924d5d0e58a53b40" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_FREE_MASK</name>
          <initializer> 1 &lt;&lt; 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea27fb7e6444c2beac2e7c404ed90412d4" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_LOCK_MASK</name>
          <initializer> 1 &lt;&lt; 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeae56d2ad3bd4b5a19a284b95bb002abb5" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_UNLOCK_MASK</name>
          <initializer> 1 &lt;&lt; 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea73e66eaf263d35a752416628eac9d817" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_ALL_MASK</name>
          <initializer> (1 &lt;&lt; 14) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags indicating which functions are present in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Used to allow the library to detect older callers of <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> if new possible functions are added to <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="122" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="121" bodyend="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" prot="public" static="no">
        <type>struct <ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref></type>
        <definition>typedef struct DBusMutex DBusMutex</definition>
        <argsstring></argsstring>
        <name>DBusMutex</name>
        <briefdescription>
<para>An opaque mutex type provided by the <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref> implementation installed by <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="41" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gaa14cd16a336a85b5edbca3c237c3829e" prot="public" static="no">
        <type>struct <ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref></type>
        <definition>typedef struct DBusCondVar DBusCondVar</definition>
        <argsstring></argsstring>
        <name>DBusCondVar</name>
        <briefdescription>
<para>An opaque condition variable type provided by the <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref> implementation installed by <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="43" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gae4cd138019719921ee81d7f3af2f0299" prot="public" static="no">
        <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *(*</type>
        <definition>typedef DBusMutex*(*  DBusMutexNewFunction)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>DBusMutexNewFunction</name>
        <briefdescription>
<para>Deprecated, provide DBusRecursiveMutexNewFunction instead. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="46" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga571a95a8897fdf1cc80f36710f95efe7" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusMutexFreeFunction)(DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusMutexFreeFunction</name>
        <briefdescription>
<para>Deprecated, provide DBusRecursiveMutexFreeFunction instead. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="48" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga5ff3bc4d16295140d831c5f1a52f74aa" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusMutexLockFunction)(DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusMutexLockFunction</name>
        <briefdescription>
<para>Deprecated, provide DBusRecursiveMutexLockFunction instead. </para>        </briefdescription>
        <detaileddescription>
<para>Return value is lock success, but gets ignored in practice. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="50" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga5568e0cd30e1872705d582e27c22e57f" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusMutexUnlockFunction)(DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusMutexUnlockFunction</name>
        <briefdescription>
<para>Deprecated, provide DBusRecursiveMutexUnlockFunction instead. </para>        </briefdescription>
        <detaileddescription>
<para>Return value is unlock success, but gets ignored in practice. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="52" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga08fc7d346a564450730cc52035959681" prot="public" static="no">
        <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *(*</type>
        <definition>typedef DBusMutex*(*  DBusRecursiveMutexNewFunction)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>DBusRecursiveMutexNewFunction</name>
        <briefdescription>
<para>Creates a new recursively-lockable mutex, or returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if not enough memory. </para>        </briefdescription>
        <detaileddescription>
<para>Can only fail due to lack of memory. Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Do not just use PTHREAD_MUTEX_RECURSIVE for this, because it does not save/restore the recursion count when waiting on a condition. libdbus requires the Java-style behavior where the mutex is fully unlocked to wait on a condition. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="61" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga1709b60b7643b272a1c06a4270213a91" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusRecursiveMutexFreeFunction)(DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusRecursiveMutexFreeFunction</name>
        <briefdescription>
<para>Frees a recursively-lockable mutex. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="64" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga08e197c1f992c7b91fe5541e4e36394c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusRecursiveMutexLockFunction)(DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusRecursiveMutexLockFunction</name>
        <briefdescription>
<para>Locks a recursively-lockable mutex. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Can only fail due to lack of memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="68" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gae12cbb69548ed6211a382962bcef12bf" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusRecursiveMutexUnlockFunction)(DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusRecursiveMutexUnlockFunction</name>
        <briefdescription>
<para>Unlocks a recursively-lockable mutex. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Can only fail due to lack of memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="72" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga8187aee4a3803e6b3859bf0054b32004" prot="public" static="no">
        <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> *(*</type>
        <definition>typedef DBusCondVar*(*  DBusCondVarNewFunction)(void)</definition>
        <argsstring>)(void)</argsstring>
        <name>DBusCondVarNewFunction</name>
        <briefdescription>
<para>Creates a new condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Can only fail (returning <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>) due to lack of memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="77" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gae65cc291c8c22bc2db83d6b72e41406c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusCondVarFreeFunction)(DBusCondVar *cond)</definition>
        <argsstring>)(DBusCondVar *cond)</argsstring>
        <name>DBusCondVarFreeFunction</name>
        <briefdescription>
<para>Frees a condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="80" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gac27ac55dc1ef5cd28d14ab6edf9e02fb" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusCondVarWaitFunction)(DBusCondVar *cond, DBusMutex *mutex)</definition>
        <argsstring>)(DBusCondVar *cond, DBusMutex *mutex)</argsstring>
        <name>DBusCondVarWaitFunction</name>
        <briefdescription>
<para>Waits on a condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Must work with either a recursive or nonrecursive mutex, whichever the thread implementation provides. Note that PTHREAD_MUTEX_RECURSIVE does not work with condition variables (does not save/restore the recursion count) so don&apos;t try using simply pthread_cond_wait() and a PTHREAD_MUTEX_RECURSIVE to implement this, it won&apos;t work right.</para><para>Has no error conditions. Must succeed if it returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="93" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga33c3b5d908d32e6262c8c5dc269e1f8b" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusCondVarWaitTimeoutFunction)(DBusCondVar *cond, DBusMutex *mutex, int timeout_milliseconds)</definition>
        <argsstring>)(DBusCondVar *cond, DBusMutex *mutex, int timeout_milliseconds)</argsstring>
        <name>DBusCondVarWaitTimeoutFunction</name>
        <briefdescription>
<para>Waits on a condition variable with a timeout. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the wait did not time out, and <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if it did.</para><para>Has no error conditions. Must succeed if it returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="103" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga1035883699fd580d9eeeaf8355dfd733" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusCondVarWakeOneFunction)(DBusCondVar *cond)</definition>
        <argsstring>)(DBusCondVar *cond)</argsstring>
        <name>DBusCondVarWakeOneFunction</name>
        <briefdescription>
<para>Wakes one waiting thread on a condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>.</para><para>Has no error conditions. Must succeed if it returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="108" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga28d3cc22cb2374ae0e1c56df41632853" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusCondVarWakeAllFunction)(DBusCondVar *cond)</definition>
        <argsstring>)(DBusCondVar *cond)</argsstring>
        <name>DBusCondVarWakeAllFunction</name>
        <briefdescription>
<para>Wakes all waiting threads on a condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>.</para><para>Has no error conditions. Must succeed if it returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" line="114" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_threads_init</definition>
        <argsstring>(const DBusThreadFunctions *functions)</argsstring>
        <name>dbus_threads_init</name>
        <param>
          <type>const <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref> *</type>
          <declname>functions</declname>
        </param>
        <briefdescription>
<para>Initializes threads. </para>        </briefdescription>
        <detaileddescription>
<para>If this function is not called, the D-Bus library will not lock any data structures. If it is called, D-Bus will do locking, at some cost in efficiency. Note that this function must be called BEFORE the second thread is started.</para><para>Almost always, you should use <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref> instead. The raw <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> is only useful if you require a particular thread implementation for some reason.</para><para>A possible reason to use <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> rather than <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref> is to insert debugging checks or print statements.</para><para><ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> may be called more than once. The first one wins and subsequent calls are ignored. (Unless you use <ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> to reset libdbus, which will let you re-init threads.)</para><para>Either recursive or nonrecursive mutex functions must be specified, but not both. New code should provide only the recursive functions<itemizedlist>
<listitem><para>specifying the nonrecursive ones is deprecated.</para></listitem></itemizedlist>
</para><para>Because this function effectively sets global state, all code running in a given application must agree on the thread implementation. Most code won&apos;t care which thread implementation is used, so there&apos;s no problem. However, usually libraries should not call <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> or <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref>, instead leaving this policy choice to applications.</para><para>The exception is for application frameworks (GLib, Qt, etc.) and D-Bus bindings based on application frameworks. These frameworks define a cross-platform thread abstraction and can assume applications using the framework are OK with using that thread abstraction.</para><para>However, even these app frameworks may find it easier to simply call <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref>, and there&apos;s no reason they shouldn&apos;t.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functions</parametername>
</parameternamelist>
<parameterdescription>
<para>functions for using threads </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="549" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="548" bodyend="652"/>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="structDBusThreadFunctions_1ad302412c382190eddc05736f24d8855c" compoundref="dbus-threads_8h" startline="171">DBusThreadFunctions::condvar_free</references>
        <references refid="structDBusThreadFunctions_1a1796b617165734984bc40d38f9600d78" compoundref="dbus-threads_8h" startline="170">DBusThreadFunctions::condvar_new</references>
        <references refid="structDBusThreadFunctions_1ae4cb6e9fe7c0813213561150721f349c" compoundref="dbus-threads_8h" startline="172">DBusThreadFunctions::condvar_wait</references>
        <references refid="structDBusThreadFunctions_1a5e049c7bdf4d83a85ebce31d838d4218" compoundref="dbus-threads_8h" startline="173">DBusThreadFunctions::condvar_wait_timeout</references>
        <references refid="structDBusThreadFunctions_1a128295c0019a401163d04ea0e291b36c" compoundref="dbus-threads_8h" startline="175">DBusThreadFunctions::condvar_wake_all</references>
        <references refid="structDBusThreadFunctions_1a3f1301eacf666381ec6c39100e6787e1" compoundref="dbus-threads_8h" startline="174">DBusThreadFunctions::condvar_wake_one</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusThreadFunctions_1a8f1c2a3b3805e2c4034d7a341f7f82f1" compoundref="dbus-threads_8h" startline="163">DBusThreadFunctions::mask</references>
        <references refid="structDBusThreadFunctions_1a01107266a74895f13af9962af6ad07dd" compoundref="dbus-threads_8h" startline="166">DBusThreadFunctions::mutex_free</references>
        <references refid="structDBusThreadFunctions_1a1cc9d20f2ad0296e932951470063f8d0" compoundref="dbus-threads_8h" startline="167">DBusThreadFunctions::mutex_lock</references>
        <references refid="structDBusThreadFunctions_1a342ba12a619162a5b228903076b46a44" compoundref="dbus-threads_8h" startline="165">DBusThreadFunctions::mutex_new</references>
        <references refid="structDBusThreadFunctions_1a334d478ec305b04f526537c131cd8e8a" compoundref="dbus-threads_8h" startline="168">DBusThreadFunctions::mutex_unlock</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusThreadFunctions_1a8be6d85b7f162352efa5bb4a5663f44f" compoundref="dbus-threads_8h" startline="178">DBusThreadFunctions::recursive_mutex_free</references>
        <references refid="structDBusThreadFunctions_1ae99179276be65fe4f701de307882dac5" compoundref="dbus-threads_8h" startline="179">DBusThreadFunctions::recursive_mutex_lock</references>
        <references refid="structDBusThreadFunctions_1afd30fb78a3ca1064bc8c074a6a61361e" compoundref="dbus-threads_8h" startline="177">DBusThreadFunctions::recursive_mutex_new</references>
        <references refid="structDBusThreadFunctions_1a0bdb8cd9b263bcde5a0548b16ccd0702" compoundref="dbus-threads_8h" startline="180">DBusThreadFunctions::recursive_mutex_unlock</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" compoundref="dbus-sysdeps-pthread_8c" startline="360" endline="364">_dbus_threads_init_platform_specific</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_threads_init_default</definition>
        <argsstring>(void)</argsstring>
        <name>dbus_threads_init_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Calls <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> with a default set of <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref> appropriate for the platform. </para>        </briefdescription>
        <detaileddescription>
<para>Most applications should use this rather than <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>.</para><para>It&apos;s safe to call <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref> as many times as you want, but only the first time will have an effect.</para><para><ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> reverses the effects of this function when it resets all global state in libdbus.</para><para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" line="675" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-threads.c" bodystart="674" bodyend="677"/>
        <references refid="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" compoundref="dbus-sysdeps-pthread_8c" startline="360" endline="364">_dbus_threads_init_platform_specific</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> and <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref> </para>    </briefdescription>
    <detaileddescription>
<para>Functions and macros related to threads and thread locks.</para><para>If threads are initialized, the D-Bus library has locks on all global data structures. In addition, each <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> has a lock, so only one thread at a time can touch the connection. (See <ref refid="group__DBusConnection" kindref="compound">DBusConnection</ref> for more on connection locking.)</para><para>Most other objects, however, do not have locks - they can only be used from a single thread at a time, unless you lock them yourself. For example, a <ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> can&apos;t be modified from two threads at once. </para>    </detaileddescription>
  </compounddef>
</doxygen>
