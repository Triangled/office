<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="dbus-list_8c" kind="file">
    <compoundname>dbus-list.c</compoundname>
    <includes local="no">config.h</includes>
    <includes refid="dbus-internals_8h" local="yes">dbus-internals.h</includes>
    <includes refid="dbus-list_8h" local="yes">dbus-list.h</includes>
    <includes refid="dbus-mempool_8h" local="yes">dbus-mempool.h</includes>
    <includes refid="dbus-threads-internal_8h" local="yes">dbus-threads-internal.h</includes>
    <incdepgraph>
      <node id="988">
        <label>stdarg.h</label>
      </node>
      <node id="993">
        <label>dbus-mempool.h</label>
        <link refid="dbus-mempool_8h_source"/>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
      </node>
      <node id="990">
        <label>dbus/dbus-threads-internal.h</label>
        <link refid="dbus-threads-internal_8h_source"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
      <node id="991">
        <label>dbus/dbus-threads.h</label>
        <link refid="dbus-threads_8h_source"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
      </node>
      <node id="983">
        <label>dbus/dbus-errors.h</label>
        <link refid="dbus-errors_8h_source"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
      </node>
      <node id="977">
        <label>dbus-internals.h</label>
        <link refid="dbus-internals_8h_source"/>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="980">
        <label>stddef.h</label>
      </node>
      <node id="986">
        <label>dbus/dbus-file.h</label>
        <link refid="dbus-file_8h_source"/>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
      </node>
      <node id="982">
        <label>dbus/dbus-arch-deps.h</label>
      </node>
      <node id="979">
        <label>dbus/dbus-macros.h</label>
        <link refid="dbus-macros_8h_source"/>
      </node>
      <node id="989">
        <label>string.h</label>
      </node>
      <node id="985">
        <label>dbus/dbus-sysdeps.h</label>
        <link refid="dbus-sysdeps_8h_source"/>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
      </node>
      <node id="981">
        <label>dbus/dbus-types.h</label>
        <link refid="dbus-types_8h_source"/>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
      <node id="987">
        <label>dbus/dbus-string.h</label>
        <link refid="dbus-string_8h_source"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
      </node>
      <node id="978">
        <label>dbus/dbus-memory.h</label>
        <link refid="dbus-memory_8h_source"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="980" relation="include">
        </childnode>
      </node>
      <node id="984">
        <label>dbus/dbus-protocol.h</label>
        <link refid="dbus-protocol_8h_source"/>
      </node>
      <node id="976">
        <label>config.h</label>
      </node>
      <node id="975">
        <label>dbus-list.c</label>
        <link refid="dbus-list.c"/>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="993" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="992">
        <label>dbus-list.h</label>
        <link refid="dbus-list_8h_source"/>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dbus-list_8c_1a756338d5a312f62c4684240a3ce55900" prot="public" static="yes" mutable="no">
        <type><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> *</type>
        <definition>DBusMemPool* list_pool</definition>
        <argsstring></argsstring>
        <name>list_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="38" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusListInternals_1ga751b43b3b6cd373b3b546986d48d4d6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>static DBusList* alloc_link</definition>
        <argsstring>(void *data)</argsstring>
        <name>alloc_link</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="56" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="55" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusListInternals_1gab8d670bd8cecd2ef1ee3f0b5cdb39083" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void free_link</definition>
        <argsstring>(DBusList *link)</argsstring>
        <name>free_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="95" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="94" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusListInternals_1ga9143f3b20772d43fdd6193f8d94b6de2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void link_before</definition>
        <argsstring>(DBusList **list, DBusList *before_this_link, DBusList *link)</argsstring>
        <name>link_before</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>before_this_link</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="110" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="107" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusListInternals_1ga1c9a36a743dece4553eb951c023e316b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void link_after</definition>
        <argsstring>(DBusList **list, DBusList *after_this_link, DBusList *link)</argsstring>
        <name>link_after</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>after_this_link</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="133" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="130" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gac20b9981531cef590d49a59240344cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>DBusList* _dbus_list_alloc_link</definition>
        <argsstring>(void *data)</argsstring>
        <name>_dbus_list_alloc_link</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Allocates a linked list node. </para>        </briefdescription>
        <detaileddescription>
<para>Useful for preallocating nodes and using <ref refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" kindref="member">_dbus_list_append_link()</ref> to avoid allocations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to store in the link. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a newly allocated link. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="220" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="219" bodyend="222"/>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1237" endline="1396">_dbus_connection_new_for_transport</referencedby>
        <referencedby refid="group__DBusMessageInternals_1gad009d79879d654a009c83627726435d8" compoundref="dbus-message_8c" startline="268" endline="281">_dbus_message_add_counter</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga9901fc4c5fd2db9bf1ce2dcc9abf55fc" compoundref="dbus-pending-call_8c" startline="337" endline="365">_dbus_pending_call_set_timeout_error_unlocked</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_list_free_link</definition>
        <argsstring>(DBusList *link)</argsstring>
        <name>_dbus_list_free_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Frees a linked list node allocated with _dbus_list_alloc_link. </para>        </briefdescription>
        <detaileddescription>
<para>Does not free the data in the node.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the list node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="232" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="231" bodyend="234"/>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1237" endline="1396">_dbus_connection_new_for_transport</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga339e5ead12e353a66fb93f1c1d441c3a" compoundref="dbus-message_8c" startline="292" endline="316">_dbus_message_remove_counter</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
        <referencedby refid="group__DBusConnection_1gad0ea06307b418616711131ea7bdae8ac" compoundref="dbus-connection_8c" startline="3133" endline="3144">dbus_connection_free_preallocated_send</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gad99045e79db46159babe69718f343053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_list_append</definition>
        <argsstring>(DBusList **list, void *data)</argsstring>
        <name>_dbus_list_append</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Appends a value to the list. </para>        </briefdescription>
        <detaileddescription>
<para>May return <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if insufficient memory exists to add a list link. This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="249" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="247" bodyend="257"/>
        <references refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" compoundref="dbus-list_8c" startline="269" endline="281">_dbus_list_prepend</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusList_1a83180142180c856b2a02778e155cb044" compoundref="dbus-list_8h" startline="37">DBusList::next</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" compoundref="dbus-threads_8c" startline="201" endline="213">_dbus_condvar_new_at_location</referencedby>
        <referencedby refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" compoundref="dbus-list_8c" startline="728" endline="751">_dbus_list_copy</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" compoundref="dbus-threads_8c" startline="89" endline="103">_dbus_mutex_new_at_location</referencedby>
        <referencedby refid="group__DBusObjectTree_1gab64dcc8febde768db3404cd93b333e1e" compoundref="dbus-object-tree_8c" startline="747" endline="904">_dbus_object_tree_dispatch_and_unlock</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1ga14955f061551ece122808b9e6ddc0757" compoundref="dbus-timeout_8c" startline="310" endline="330">_dbus_timeout_list_add_timeout</referencedby>
        <referencedby refid="group__DBusMarshal_1ga42e50826b5cf62921728432a8e35292c" compoundref="dbus-marshal-validate_8c" startline="51" endline="292">_dbus_validate_signature_with_reason</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gaec61655a4bd6186a6a1ec104771d8af5" compoundref="dbus-watch_8c" startline="358" endline="381">_dbus_watch_list_add_watch</referencedby>
        <referencedby refid="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" compoundref="dbus-connection_8c" startline="5406" endline="5443">dbus_connection_add_filter</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_list_prepend</definition>
        <argsstring>(DBusList **list, void *data)</argsstring>
        <name>_dbus_list_prepend</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Prepends a value to the list. </para>        </briefdescription>
        <detaileddescription>
<para>May return <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if insufficient memory exists to add a list link. This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to prepend. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="271" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="269" bodyend="281"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusList_1gad99045e79db46159babe69718f343053" compoundref="dbus-list_8c" startline="247" endline="257">_dbus_list_append</referencedby>
        <referencedby refid="group__DBusList_1ga2dacb82db59f0012951d8245017473c9" compoundref="dbus-list_8c" startline="356" endline="374">_dbus_list_insert_after</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_list_append_link</definition>
        <argsstring>(DBusList **list, DBusList *link)</argsstring>
        <name>_dbus_list_append_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Appends a link to the list. </para>        </briefdescription>
        <detaileddescription>
<para>Cannot fail due to out of memory. This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the link to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="294" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="292" bodyend="299"/>
        <references refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" compoundref="dbus-list_8c" startline="310" endline="314">_dbus_list_prepend_link</references>
        <references refid="structDBusList_1a83180142180c856b2a02778e155cb044" compoundref="dbus-list_8h" startline="37">DBusList::next</references>
        <referencedby refid="group__DBusConnectionInternals_1gac1b92eba0aeee294dc28fcc260c9b749" compoundref="dbus-connection_8c" startline="473" endline="523">_dbus_connection_queue_received_message_link</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1gadb7a525dc6b566b575ee4f9b20028b04" compoundref="dbus-connection_8c" startline="534" endline="547">_dbus_connection_queue_synthesized_message_link</referencedby>
        <referencedby refid="group__DBusList_1ga0d1fde0acf1330cb41a9c290c7ae87b5" compoundref="dbus-list_8c" startline="384" endline="392">_dbus_list_insert_before_link</referencedby>
        <referencedby refid="group__DBusMessageInternals_1gafaed2adc00b2ec54b2827ecb778bbe7e" compoundref="dbus-message_8c" startline="224" endline="256">_dbus_message_add_counter_link</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_list_prepend_link</definition>
        <argsstring>(DBusList **list, DBusList *link)</argsstring>
        <name>_dbus_list_prepend_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Prepends a link to the list. </para>        </briefdescription>
        <detaileddescription>
<para>Cannot fail due to out of memory. This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the link to prepend. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="312" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="310" bodyend="314"/>
        <referencedby refid="group__DBusConnectionInternals_1ga2d04df24d0f54a4e2dcfbede4ef50f09" compoundref="dbus-connection_8c" startline="611" endline="655">_dbus_connection_message_sent</referencedby>
        <referencedby refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" compoundref="dbus-list_8c" startline="292" endline="299">_dbus_list_append_link</referencedby>
        <referencedby refid="group__DBusList_1ga20f6b11dd53979b94b6c4822ff6c1141" compoundref="dbus-list_8c" startline="402" endline="410">_dbus_list_insert_after_link</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga71b290eb470a55217971fcd6851fc40c" compoundref="dbus-message_8c" startline="4262" endline="4266">_dbus_message_loader_putback_message_link</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga2dacb82db59f0012951d8245017473c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_list_insert_after</definition>
        <argsstring>(DBusList **list, DBusList *after_this_link, void *data)</argsstring>
        <name>_dbus_list_insert_after</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>after_this_link</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Inserts data into the list after the given existing link. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after_this_link</parametername>
</parameternamelist>
<parameterdescription>
<para>existing link to insert after, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> to prepend </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if memory allocation fails </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="359" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="356" bodyend="374"/>
        <references refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" compoundref="dbus-list_8c" startline="269" endline="281">_dbus_list_prepend</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga0d1fde0acf1330cb41a9c290c7ae87b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_list_insert_before_link</definition>
        <argsstring>(DBusList **list, DBusList *before_this_link, DBusList *link)</argsstring>
        <name>_dbus_list_insert_before_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>before_this_link</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Inserts a link into the list before the given existing link. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_this_link</parametername>
</parameternamelist>
<parameterdescription>
<para>existing link to insert before, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> to append </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the link to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="387" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="384" bodyend="392"/>
        <references refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" compoundref="dbus-list_8c" startline="292" endline="299">_dbus_list_append_link</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga20f6b11dd53979b94b6c4822ff6c1141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_list_insert_after_link</definition>
        <argsstring>(DBusList **list, DBusList *after_this_link, DBusList *link)</argsstring>
        <name>_dbus_list_insert_after_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>after_this_link</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Inserts a link into the list after the given existing link. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after_this_link</parametername>
</parameternamelist>
<parameterdescription>
<para>existing link to insert after, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> to prepend </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the link to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="405" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="402" bodyend="410"/>
        <references refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" compoundref="dbus-list_8c" startline="310" endline="314">_dbus_list_prepend_link</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_list_remove</definition>
        <argsstring>(DBusList **list, void *data)</argsstring>
        <name>_dbus_list_remove</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Removes a value from the list. </para>        </briefdescription>
        <detaileddescription>
<para>Only removes the first value equal to the given data pointer, even if multiple values exist which match. This is a linear-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if a value was found to remove. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="425" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="423" bodyend="441"/>
        <references refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" compoundref="dbus-list_8h" startline="93">_dbus_list_get_next_link</references>
        <references refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" compoundref="dbus-list_8c" startline="535" endline="540">_dbus_list_remove_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" compoundref="dbus-threads_8c" startline="233" endline="242">_dbus_condvar_free_at_location</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" compoundref="dbus-threads_8c" startline="127" endline="136">_dbus_mutex_free_at_location</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1gaec0ffafdcac87f23878a2ddded044822" compoundref="dbus-timeout_8c" startline="340" endline="351">_dbus_timeout_list_remove_timeout</referencedby>
        <referencedby refid="group__DBusWatchInternals_1ga76894d297bc7d7d23cbacdc2b1778884" compoundref="dbus-watch_8c" startline="391" endline="407">_dbus_watch_list_remove_watch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gad93f1fc853914144e94fc7a7dc0945aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_list_remove_last</definition>
        <argsstring>(DBusList **list, void *data)</argsstring>
        <name>_dbus_list_remove_last</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Removes a value from the list. </para>        </briefdescription>
        <detaileddescription>
<para>Only removes the last value equal to the given data pointer, even if multiple values exist which match. This is a linear-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if a value was found to remove. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="456" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="454" bodyend="467"/>
        <references refid="group__DBusList_1ga5929ad5253d2f538158e513e9df3002b" compoundref="dbus-list_8c" startline="480" endline="496">_dbus_list_find_last</references>
        <references refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" compoundref="dbus-list_8c" startline="535" endline="540">_dbus_list_remove_link</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusTimeoutInternals_1ga14955f061551ece122808b9e6ddc0757" compoundref="dbus-timeout_8c" startline="310" endline="330">_dbus_timeout_list_add_timeout</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gaec61655a4bd6186a6a1ec104771d8af5" compoundref="dbus-watch_8c" startline="358" endline="381">_dbus_watch_list_add_watch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga5929ad5253d2f538158e513e9df3002b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>DBusList* _dbus_list_find_last</definition>
        <argsstring>(DBusList **list, void *data)</argsstring>
        <name>_dbus_list_find_last</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Finds a value in the list. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the last link with value equal to the given data pointer. This is a linear-time operation. Returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if no value found that matches.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to find. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the link if found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="482" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="480" bodyend="496"/>
        <references refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" compoundref="dbus-list_8c" startline="588" endline="594">_dbus_list_get_last_link</references>
        <references refid="group__DBusList_1ga6637493bf5fc09bddb44ac295c475cae" compoundref="dbus-list_8h" startline="94">_dbus_list_get_prev_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusList_1gad93f1fc853914144e94fc7a7dc0945aa" compoundref="dbus-list_8c" startline="454" endline="467">_dbus_list_remove_last</referencedby>
        <referencedby refid="group__DBusMessageInternals_1gaf55885371a6d022ec94c79bd7138923f" compoundref="dbus-message_8c" startline="4156" endline="4209">_dbus_message_loader_queue_messages</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga339e5ead12e353a66fb93f1c1d441c3a" compoundref="dbus-message_8c" startline="292" endline="316">_dbus_message_remove_counter</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_list_unlink</definition>
        <argsstring>(DBusList **list, DBusList *link)</argsstring>
        <name>_dbus_list_unlink</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Removes the given link from the list, but doesn&apos;t free it. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member">_dbus_list_remove_link()</ref> both removes the link and also frees it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the link in the list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="509" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="507" bodyend="526"/>
        <references refid="structDBusList_1a83180142180c856b2a02778e155cb044" compoundref="dbus-list_8h" startline="37">DBusList::next</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" compoundref="dbus-list_8h" startline="36">DBusList::prev</references>
        <referencedby refid="group__DBusConnectionInternals_1ga2d04df24d0f54a4e2dcfbede4ef50f09" compoundref="dbus-connection_8c" startline="611" endline="655">_dbus_connection_message_sent</referencedby>
        <referencedby refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" compoundref="dbus-list_8c" startline="636" endline="647">_dbus_list_pop_first_link</referencedby>
        <referencedby refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" compoundref="dbus-list_8c" startline="535" endline="540">_dbus_list_remove_link</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga339e5ead12e353a66fb93f1c1d441c3a" compoundref="dbus-message_8c" startline="292" endline="316">_dbus_message_remove_counter</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_list_remove_link</definition>
        <argsstring>(DBusList **list, DBusList *link)</argsstring>
        <name>_dbus_list_remove_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Removes a link from the list. </para>        </briefdescription>
        <detaileddescription>
<para>This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the list link to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="537" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="535" bodyend="540"/>
        <references refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" compoundref="dbus-list_8c" startline="507" endline="526">_dbus_list_unlink</references>
        <referencedby refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" compoundref="dbus-list_8c" startline="657" endline="670">_dbus_list_pop_first</referencedby>
        <referencedby refid="group__DBusList_1gaad2ba56c77f2bba8e1e8dcb4b24542a6" compoundref="dbus-list_8c" startline="680" endline="693">_dbus_list_pop_last</referencedby>
        <referencedby refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" compoundref="dbus-list_8c" startline="423" endline="441">_dbus_list_remove</referencedby>
        <referencedby refid="group__DBusList_1gad93f1fc853914144e94fc7a7dc0945aa" compoundref="dbus-list_8c" startline="454" endline="467">_dbus_list_remove_last</referencedby>
        <referencedby refid="group__DBusObjectTree_1gab64dcc8febde768db3404cd93b333e1e" compoundref="dbus-object-tree_8c" startline="747" endline="904">_dbus_object_tree_dispatch_and_unlock</referencedby>
        <referencedby refid="group__DBusConnection_1ga5e7f1dad410506a8a6f5182c55e7c4fe" compoundref="dbus-connection_8c" startline="5458" endline="5509">dbus_connection_remove_filter</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_list_clear</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_clear</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Frees all links in the list and sets the list head to <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Does not free the data in each link, for obvious reasons. This is a linear-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="551" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="550" bodyend="565"/>
        <references refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" compoundref="dbus-list_8h" startline="93">_dbus_list_get_next_link</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusAuth_1ga7fb648be9d6d451917195a0e43eeece0" compoundref="dbus-auth_8c" startline="2346" endline="2385">_dbus_auth_unref</referencedby>
        <referencedby refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" compoundref="dbus-list_8c" startline="728" endline="751">_dbus_list_copy</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga51299aab1f5e0b2408ab858d3377b20c" compoundref="dbus-message_8c" startline="3781" endline="3797">_dbus_message_loader_unref</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga4b8cc560549160aecd924037a872009d" compoundref="dbus-pending-call_8c" startline="155" endline="177">_dbus_pending_call_set_reply_unlocked</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1ga1b399ef2d7f128e59bb32dbb5b590e1b" compoundref="dbus-timeout_8c" startline="211" endline="223">_dbus_timeout_list_free</referencedby>
        <referencedby refid="group__DBusMarshal_1ga42e50826b5cf62921728432a8e35292c" compoundref="dbus-marshal-validate_8c" startline="51" endline="292">_dbus_validate_signature_with_reason</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gac3f75c0da2c8c51e8708f45dd27f9e2d" compoundref="dbus-watch_8c" startline="232" endline="243">_dbus_watch_list_free</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>DBusList* _dbus_list_get_first_link</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_get_first_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Gets the first link in the list. </para>        </briefdescription>
        <detaileddescription>
<para>This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the first link, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for an empty list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="576" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="575" bodyend="578"/>
        <referencedby refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" compoundref="dbus-list_8c" startline="657" endline="670">_dbus_list_pop_first</referencedby>
        <referencedby refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" compoundref="dbus-list_8c" startline="636" endline="647">_dbus_list_pop_first_link</referencedby>
        <referencedby refid="group__DBusObjectTree_1gab64dcc8febde768db3404cd93b333e1e" compoundref="dbus-object-tree_8c" startline="747" endline="904">_dbus_object_tree_dispatch_and_unlock</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1ga6760d1963b870b45f855501e38b49fd9" compoundref="dbus-timeout_8c" startline="239" endline="299">_dbus_timeout_list_set_functions</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gae9ab8cf14f4191191e94183be9a031d9" compoundref="dbus-watch_8c" startline="260" endline="347">_dbus_watch_list_set_functions</referencedby>
        <referencedby refid="group__DBusAddress_1gae6f014689b49099e835b1f97d032034e" compoundref="dbus-address_8c" startline="244" endline="264">dbus_address_entry_get_value</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga42736fb02458bfffed948a509962c059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>DBusList* _dbus_list_get_last_link</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_get_last_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Gets the last link in the list. </para>        </briefdescription>
        <detaileddescription>
<para>This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the last link, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for an empty list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="589" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="588" bodyend="594"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnectionInternals_1ga2d04df24d0f54a4e2dcfbede4ef50f09" compoundref="dbus-connection_8c" startline="611" endline="655">_dbus_connection_message_sent</referencedby>
        <referencedby refid="group__DBusList_1ga5929ad5253d2f538158e513e9df3002b" compoundref="dbus-list_8c" startline="480" endline="496">_dbus_list_find_last</referencedby>
        <referencedby refid="group__DBusList_1gaad2ba56c77f2bba8e1e8dcb4b24542a6" compoundref="dbus-list_8c" startline="680" endline="693">_dbus_list_pop_last</referencedby>
        <referencedby refid="group__DBusConnection_1ga5e7f1dad410506a8a6f5182c55e7c4fe" compoundref="dbus-connection_8c" startline="5458" endline="5509">dbus_connection_remove_filter</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga18afc36fff1636a71295bcc7a75dc4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _dbus_list_get_last</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_get_last</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Gets the last data in the list. </para>        </briefdescription>
        <detaileddescription>
<para>This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the last data in the list, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for an empty list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="605" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="604" bodyend="610"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnectionInternals_1ga3955cd53ac4f671a5bb54019887389a7" compoundref="dbus-connection_8c" startline="595" endline="600">_dbus_connection_get_message_to_send</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga254e18f698f5fc518bde031e723e67c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _dbus_list_get_first</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_get_first</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Gets the first data in the list. </para>        </briefdescription>
        <detaileddescription>
<para>This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the first data in the list, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for an empty list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="621" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="620" bodyend="626"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" compoundref="dbus-connection_8c" startline="3790" endline="3828">dbus_connection_borrow_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>DBusList* _dbus_list_pop_first_link</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_pop_first_link</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Removes the first link in the list and returns it. </para>        </briefdescription>
        <detaileddescription>
<para>This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the first link in the list, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for an empty list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="637" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="636" bodyend="647"/>
        <references refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" compoundref="dbus-list_8c" startline="575" endline="578">_dbus_list_get_first_link</references>
        <references refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" compoundref="dbus-list_8c" startline="507" endline="526">_dbus_list_unlink</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusMessageInternals_1ga6ec3c1ad57340f717a47d79092122d04" compoundref="dbus-message_8c" startline="4250" endline="4253">_dbus_message_loader_pop_message_link</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _dbus_list_pop_first</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_pop_first</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Removes the first value in the list and returns it. </para>        </briefdescription>
        <detaileddescription>
<para>This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the first data in the list, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for an empty list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="658" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="657" bodyend="670"/>
        <references refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" compoundref="dbus-list_8c" startline="575" endline="578">_dbus_list_get_first_link</references>
        <references refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" compoundref="dbus-list_8c" startline="535" endline="540">_dbus_list_remove_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusMessageInternals_1ga9e5e75716d7263d9908d45a60b1b6bdc" compoundref="dbus-message_8c" startline="4236" endline="4239">_dbus_message_loader_pop_message</referencedby>
        <referencedby refid="group__DBusConnection_1ga7125d747575b2f596aceaf7be53eae68" compoundref="dbus-connection_8c" startline="3871" endline="3900">dbus_connection_steal_borrowed_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gaad2ba56c77f2bba8e1e8dcb4b24542a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _dbus_list_pop_last</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_pop_last</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Removes the last value in the list and returns it. </para>        </briefdescription>
        <detaileddescription>
<para>This is a constant-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the list head. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the last data in the list, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for an empty list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="681" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="680" bodyend="693"/>
        <references refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" compoundref="dbus-list_8c" startline="588" endline="594">_dbus_list_get_last_link</references>
        <references refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" compoundref="dbus-list_8c" startline="535" endline="540">_dbus_list_remove_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusMarshal_1ga42e50826b5cf62921728432a8e35292c" compoundref="dbus-marshal-validate_8c" startline="51" endline="292">_dbus_validate_signature_with_reason</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_list_copy</definition>
        <argsstring>(DBusList **list, DBusList **dest)</argsstring>
        <name>_dbus_list_copy</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Copies a list. </para>        </briefdescription>
        <detaileddescription>
<para>This is a linear-time operation. If there isn&apos;t enough memory to copy the entire list, the destination list will be set to <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the head of the list to copy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>address where the copied list should be placed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="730" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="728" bodyend="751"/>
        <references refid="group__DBusList_1gad99045e79db46159babe69718f343053" compoundref="dbus-list_8c" startline="247" endline="257">_dbus_list_append</references>
        <references refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" compoundref="dbus-list_8c" startline="550" endline="565">_dbus_list_clear</references>
        <references refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" compoundref="dbus-list_8h" startline="93">_dbus_list_get_next_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1gaa2144a5489bb35b16b2b671488ad597c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_list_get_length</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_get_length</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Gets the length of a list. </para>        </briefdescription>
        <detaileddescription>
<para>This is a linear-time operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the head of the list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of elements in the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="762" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="761" bodyend="777"/>
        <references refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" compoundref="dbus-list_8h" startline="93">_dbus_list_get_next_link</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusObjectTree_1gab64dcc8febde768db3404cd93b333e1e" compoundref="dbus-object-tree_8c" startline="747" endline="904">_dbus_object_tree_dispatch_and_unlock</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_list_foreach</definition>
        <argsstring>(DBusList **list, DBusForeachFunction function, void *data)</argsstring>
        <name>_dbus_list_foreach</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>DBusForeachFunction</type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Calls the given function for each element in the list. </para>        </briefdescription>
        <detaileddescription>
<para>The function is passed the list element as its first argument, and the given data as its second argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the head of the list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call for each element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>extra data for the function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="793" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="790" bodyend="805"/>
        <references refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" compoundref="dbus-list_8h" startline="93">_dbus_list_get_next_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusMessageInternals_1ga51299aab1f5e0b2408ab858d3377b20c" compoundref="dbus-message_8c" startline="3781" endline="3797">_dbus_message_loader_unref</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1ga1b399ef2d7f128e59bb32dbb5b590e1b" compoundref="dbus-timeout_8c" startline="211" endline="223">_dbus_timeout_list_free</referencedby>
        <referencedby refid="group__DBusTimeoutInternals_1ga6760d1963b870b45f855501e38b49fd9" compoundref="dbus-timeout_8c" startline="239" endline="299">_dbus_timeout_list_set_functions</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gac3f75c0da2c8c51e8708f45dd27f9e2d" compoundref="dbus-watch_8c" startline="232" endline="243">_dbus_watch_list_free</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gae9ab8cf14f4191191e94183be9a031d9" compoundref="dbus-watch_8c" startline="260" endline="347">_dbus_watch_list_set_functions</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusList_1ga1d0e850f8e151630fa94d3b05e6038d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_list_length_is_one</definition>
        <argsstring>(DBusList **list)</argsstring>
        <name>_dbus_list_length_is_one</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Check whether length is exactly one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if length is exactly one </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" line="815" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c" bodystart="814" bodyend="818"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>C;<sp/>c-file-style:<sp/>&quot;gnu&quot;;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>dbus-list.c<sp/>Generic<sp/>linked<sp/>list<sp/>utility<sp/>(internal<sp/>to<sp/>D-Bus<sp/>implementation)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2002<sp/><sp/>Red<sp/>Hat,<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Academic<sp/>Free<sp/>License<sp/>version<sp/>2.1</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-internals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-list.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-mempool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-threads-internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusMemPool" kindref="compound" tooltip="Internals fields of DBusMemPool.">DBusMemPool</ref><sp/>*list_pool;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">_DBUS_DEFINE_GLOBAL_LOCK<sp/>(list);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/*<sp/>the<sp/>mem<sp/>pool<sp/>is<sp/>probably<sp/>a<sp/>speed<sp/>hit,<sp/>with<sp/>the<sp/>thread</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>lock,<sp/>though<sp/>it<sp/>does<sp/>still<sp/>save<sp/>memory<sp/>-<sp/>unknown.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref>*</highlight></codeline>
<codeline lineno="55"><highlight class="normal">alloc_link<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>_DBUS_LOCK<sp/>(list);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list_pool<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list_pool<sp/>=<sp/><ref refid="group__DBusMemPool_1gaf1bae02bc5fcb879f77ff2c13ca03ac8" kindref="member" tooltip="Creates a new memory pool, or returns NULL on failure.">_dbus_mem_pool_new</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref>),<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list_pool<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(list);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" kindref="member" tooltip="Allocates an object from the memory pool.">_dbus_mem_pool_alloc</ref><sp/>(list_pool);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" kindref="member" tooltip="Frees a memory pool (and all elements allocated from it).">_dbus_mem_pool_free</ref><sp/>(list_pool);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_pool<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(list);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" kindref="member" tooltip="Allocates an object from the memory pool.">_dbus_mem_pool_alloc</ref><sp/>(list_pool);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>_DBUS_UNLOCK<sp/>(list);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">free_link<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>_DBUS_LOCK<sp/>(list);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" kindref="member" tooltip="Deallocates an object previously created with _dbus_mem_pool_alloc().">_dbus_mem_pool_dealloc</ref><sp/>(list_pool,<sp/>link))</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" kindref="member" tooltip="Frees a memory pool (and all elements allocated from it).">_dbus_mem_pool_free</ref><sp/>(list_pool);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list_pool<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>_DBUS_UNLOCK<sp/>(list);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">link_before<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*before_this_link,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*link)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*list<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*list<sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>=<sp/>before_this_link;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>=<sp/>before_this_link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>before_this_link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref>-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before_this_link<sp/>==<sp/>*list)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*list<sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">link_after<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*after_this_link,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*link)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*list<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*list<sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>=<sp/>after_this_link;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>=<sp/>after_this_link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>after_this_link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref>*</highlight></codeline>
<codeline lineno="219" refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" kindref="member" tooltip="Allocates a linked list node.">_dbus_list_alloc_link</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alloc_link<sp/>(data);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>free_link<sp/>(link);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="247" refid="group__DBusList_1gad99045e79db46159babe69718f343053" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(list,<sp/>data))</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>cycle<sp/>the<sp/>list<sp/>forward<sp/>one<sp/>so<sp/>the<sp/>prepended<sp/>node<sp/>is<sp/>the<sp/>tail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>*list<sp/>=<sp/>(*list)-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="269" refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>alloc_link<sp/>(data);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>link_before<sp/>(list,<sp/>*list,<sp/>link);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" kindref="member" tooltip="Appends a link to the list.">_dbus_list_append_link</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" kindref="member" tooltip="Prepends a link to the list.">_dbus_list_prepend_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>cycle<sp/>the<sp/>list<sp/>forward<sp/>one<sp/>so<sp/>the<sp/>prepended<sp/>node<sp/>is<sp/>the<sp/>tail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>*list<sp/>=<sp/>(*list)-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" kindref="member" tooltip="Prepends a link to the list.">_dbus_list_prepend_link</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>link_before<sp/>(list,<sp/>*list,<sp/>link);</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="326"><highlight class="normal">_dbus_list_insert_before<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*before_this_link,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before_this_link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(list,<sp/>data);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>alloc_link<sp/>(data);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link_before<sp/>(list,<sp/>before_this_link,<sp/>link);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="356" refid="group__DBusList_1ga2dacb82db59f0012951d8245017473c9" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga2dacb82db59f0012951d8245017473c9" kindref="member" tooltip="Inserts data into the list after the given existing link.">_dbus_list_insert_after</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*after_this_link,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;<sp/><sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(after_this_link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(list,<sp/>data);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>alloc_link<sp/>(data);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link_after<sp/>(list,<sp/>after_this_link,<sp/>link);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="group__DBusList_1ga0d1fde0acf1330cb41a9c290c7ae87b5" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga0d1fde0acf1330cb41a9c290c7ae87b5" kindref="member" tooltip="Inserts a link into the list before the given existing link.">_dbus_list_insert_before_link</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*before_this_link,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*link)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(before_this_link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" kindref="member" tooltip="Appends a link to the list.">_dbus_list_append_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>link_before<sp/>(list,<sp/>before_this_link,<sp/>link);</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="group__DBusList_1ga20f6b11dd53979b94b6c4822ff6c1141" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga20f6b11dd53979b94b6c4822ff6c1141" kindref="member" tooltip="Inserts a link into the list after the given existing link.">_dbus_list_insert_after_link</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*after_this_link,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*link)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(after_this_link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" kindref="member" tooltip="Prepends a link to the list.">_dbus_list_prepend_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>link_after<sp/>(list,<sp/>after_this_link,<sp/>link);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="423" refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref><sp/>==<sp/>data)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="454" refid="group__DBusList_1gad93f1fc853914144e94fc7a7dc0945aa" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gad93f1fc853914144e94fc7a7dc0945aa" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove_last</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga5929ad5253d2f538158e513e9df3002b" kindref="member" tooltip="Finds a value in the list.">_dbus_list_find_last</ref><sp/>(list,<sp/>data);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref>*</highlight></codeline>
<codeline lineno="480" refid="group__DBusList_1ga5929ad5253d2f538158e513e9df3002b" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga5929ad5253d2f538158e513e9df3002b" kindref="member" tooltip="Finds a value in the list.">_dbus_list_find_last</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" kindref="member" tooltip="Gets the last link in the list.">_dbus_list_get_last_link</ref><sp/>(list);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref><sp/>==<sp/>data)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga6637493bf5fc09bddb44ac295c475cae" kindref="member" tooltip="Gets the previous link in the list, or NULL if there are no more links.">_dbus_list_get_prev_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" kindref="member" tooltip="Removes the given link from the list, but doesn&amp;#39;t free it.">_dbus_list_unlink</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*link)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>==<sp/>link)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>one-element<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*list<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref>-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>=<sp/>link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*list<sp/>==<sp/>link)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*list<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/>*link)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" kindref="member" tooltip="Removes the given link from the list, but doesn&amp;#39;t free it.">_dbus_list_unlink</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>free_link<sp/>(link);</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*next<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free_link<sp/>(link);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>*list<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref>*</highlight></codeline>
<codeline lineno="575" refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*list;</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref>*</highlight></codeline>
<codeline lineno="588" refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" kindref="member" tooltip="Gets the last link in the list.">_dbus_list_get_last_link</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*list<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*list)-&gt;prev;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="604" refid="group__DBusList_1ga18afc36fff1636a71295bcc7a75dc4f6" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga18afc36fff1636a71295bcc7a75dc4f6" kindref="member" tooltip="Gets the last data in the list.">_dbus_list_get_last</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*list<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*list)-&gt;prev-&gt;data;</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="620" refid="group__DBusList_1ga254e18f698f5fc518bde031e723e67c6" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga254e18f698f5fc518bde031e723e67c6" kindref="member" tooltip="Gets the first data in the list.">_dbus_list_get_first</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*list<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*list)-&gt;data;</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref>*</highlight></codeline>
<codeline lineno="636" refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" kindref="member" tooltip="Removes the first link in the list and returns it.">_dbus_list_pop_first_link</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(list);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" kindref="member" tooltip="Removes the given link from the list, but doesn&amp;#39;t free it.">_dbus_list_unlink</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="657" refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" kindref="member" tooltip="Removes the first value in the list and returns it.">_dbus_list_pop_first</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(list);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>data<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="680" refid="group__DBusList_1gaad2ba56c77f2bba8e1e8dcb4b24542a6" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gaad2ba56c77f2bba8e1e8dcb4b24542a6" kindref="member" tooltip="Removes the last value in the list and returns it.">_dbus_list_pop_last</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="681"><highlight class="normal">{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" kindref="member" tooltip="Gets the last link in the list.">_dbus_list_get_last_link</ref><sp/>(list);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>data<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref>*</highlight></codeline>
<codeline lineno="704"><highlight class="normal">_dbus_list_pop_last_link<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" kindref="member" tooltip="Gets the last link in the list.">_dbus_list_get_last_link</ref><sp/>(list);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" kindref="member" tooltip="Removes the given link from the list, but doesn&amp;#39;t free it.">_dbus_list_unlink</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="728" refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" kindref="member" tooltip="Copies a list.">_dbus_list_copy</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**dest)</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(list<sp/>!=<sp/>dest);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>*dest<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(dest,<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>))</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>what<sp/>we<sp/>have<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(dest);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="group__DBusList_1gaa2144a5489bb35b16b2b671488ad597c" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1gaa2144a5489bb35b16b2b671488ad597c" kindref="member" tooltip="Gets the length of a list.">_dbus_list_get_length</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++length;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790" refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" kindref="member" tooltip="Calls the given function for each element in the list.">_dbus_list_foreach</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**list,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBusForeachFunction<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*next<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>function)<sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>,<sp/>data);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="814" refid="group__DBusList_1ga1d0e850f8e151630fa94d3b05e6038d9" refkind="member"><highlight class="normal"><ref refid="group__DBusList_1ga1d0e850f8e151630fa94d3b05e6038d9" kindref="member" tooltip="Check whether length is exactly one.">_dbus_list_length_is_one</ref><sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*list<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*list)-&gt;next<sp/>==<sp/>*list);</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">verify_list<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>*list;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>==<sp/>link)</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>==<sp/>link);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(*list<sp/>==<sp/>link);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(link-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref>-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref><sp/>==<sp/>link);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>-&gt;<ref refid="structDBusList_1aaeb8ce69b141da1f04621ae81eed3388" kindref="member" tooltip="Previous list node.">prev</ref><sp/>==<sp/>link);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/>*list);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(length<sp/>==<sp/><ref refid="group__DBusList_1gaa2144a5489bb35b16b2b671488ad597c" kindref="member" tooltip="Gets the length of a list.">_dbus_list_get_length</ref><sp/>(list));</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(<ref refid="group__DBusList_1ga1d0e850f8e151630fa94d3b05e6038d9" kindref="member" tooltip="Check whether length is exactly one.">_dbus_list_length_is_one</ref><sp/>(list));</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(!<ref refid="group__DBusList_1ga1d0e850f8e151630fa94d3b05e6038d9" kindref="member" tooltip="Check whether length is exactly one.">_dbus_list_length_is_one</ref><sp/>(list));</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="863"><highlight class="normal">is_ascending_sequence<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="864"><highlight class="normal">{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>prev<sp/>=<sp/>_DBUS_INT_MIN;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(list);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>_DBUS_POINTER_TO_INT<sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;=<sp/>prev)</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="887"><highlight class="normal">is_descending_sequence<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>prev<sp/>=<sp/>_DBUS_INT_MAX;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(list);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>_DBUS_POINTER_TO_INT<sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&gt;=<sp/>prev)</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="911"><highlight class="normal">all_even_values<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(list);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>_DBUS_POINTER_TO_INT<sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v<sp/>%<sp/>2)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="930"><highlight class="normal">all_odd_values<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list)</highlight></codeline>
<codeline lineno="931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(list);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>_DBUS_POINTER_TO_INT<sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list,<sp/>link);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="949"><highlight class="normal">lists_equal<sp/>(<ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list1,</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>**list2)</highlight></codeline>
<codeline lineno="951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link1;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link2;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>link1<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(list1);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>link2<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(list2);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link1<sp/>&amp;&amp;<sp/>link2)</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link1-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref><sp/>!=<sp/>link2-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link1<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list1,<sp/>link1);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link2<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(list2,<sp/>link2);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link1<sp/>||<sp/>link2)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="978"><highlight class="normal">_dbus_list_test<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="979"><highlight class="normal">{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*list1;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*list2;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link1;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link2;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*copy1;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*copy2;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>list1<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>list2<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>append<sp/>and<sp/>prepend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i)))</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>allocate<sp/>for<sp/>append&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i)))</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;count<sp/>not<sp/>allocate<sp/>for<sp/>prepend&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(<ref refid="group__DBusList_1gaa2144a5489bb35b16b2b671488ad597c" kindref="member" tooltip="Gets the length of a list.">_dbus_list_get_length</ref><sp/>(&amp;list1)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(<ref refid="group__DBusList_1gaa2144a5489bb35b16b2b671488ad597c" kindref="member" tooltip="Gets the length of a list.">_dbus_list_get_length</ref><sp/>(&amp;list2)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_ascending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_descending_sequence<sp/>(&amp;list2));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>list<sp/>clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>get_first,<sp/>get_last,<sp/>pop_first,<sp/>pop_last<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*got_data1;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*got_data2;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data1;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data2;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>got_data1<sp/>=<sp/><ref refid="group__DBusList_1ga18afc36fff1636a71295bcc7a75dc4f6" kindref="member" tooltip="Gets the last data in the list.">_dbus_list_get_last</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>got_data2<sp/>=<sp/><ref refid="group__DBusList_1ga254e18f698f5fc518bde031e723e67c6" kindref="member" tooltip="Gets the first data in the list.">_dbus_list_get_first</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data1<sp/>=<sp/><ref refid="group__DBusList_1gaad2ba56c77f2bba8e1e8dcb4b24542a6" kindref="member" tooltip="Removes the last value in the list and returns it.">_dbus_list_pop_last</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data2<sp/>=<sp/><ref refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" kindref="member" tooltip="Removes the first value in the list and returns it.">_dbus_list_pop_first</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(got_data1<sp/>==<sp/>data1);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(got_data2<sp/>==<sp/>data2);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(_DBUS_POINTER_TO_INT<sp/>(data1)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(_DBUS_POINTER_TO_INT<sp/>(data2)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(is_ascending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(is_descending_sequence<sp/>(&amp;list2));</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(list1<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(list2<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>get_first_link,<sp/>get_last_link,<sp/>pop_first_link,<sp/>pop_last_link<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*got_link1;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*got_link2;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link1;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link2;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data2;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>got_link1<sp/>=<sp/><ref refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" kindref="member" tooltip="Gets the last link in the list.">_dbus_list_get_last_link</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>got_link2<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link1<sp/>=<sp/>_dbus_list_pop_last_link<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link2<sp/>=<sp/><ref refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" kindref="member" tooltip="Removes the first link in the list and returns it.">_dbus_list_pop_first_link</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(got_link1<sp/>==<sp/>link1);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(got_link2<sp/>==<sp/>link2);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data1<sp/>=<sp/>link1-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data2<sp/>=<sp/>link2-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(link1);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(link2);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(_DBUS_POINTER_TO_INT<sp/>(data1)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(_DBUS_POINTER_TO_INT<sp/>(data2)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(is_ascending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(is_descending_sequence<sp/>(&amp;list2));</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(list1<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(list2<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>iteration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(<ref refid="group__DBusList_1gaa2144a5489bb35b16b2b671488ad597c" kindref="member" tooltip="Gets the length of a list.">_dbus_list_get_length</ref><sp/>(&amp;list1)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(<ref refid="group__DBusList_1gaa2144a5489bb35b16b2b671488ad597c" kindref="member" tooltip="Gets the length of a list.">_dbus_list_get_length</ref><sp/>(&amp;list2)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_ascending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_descending_sequence<sp/>(&amp;list2));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>link2<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link2<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;link2);<sp/></highlight><highlight class="comment">/*<sp/>pretend<sp/>this<sp/>link<sp/>is<sp/>the<sp/>head<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(_DBUS_POINTER_TO_INT<sp/>(link2-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link2<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;list2,<sp/>link2);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>link1<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link1<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;link1);<sp/></highlight><highlight class="comment">/*<sp/>pretend<sp/>this<sp/>link<sp/>is<sp/>the<sp/>head<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(_DBUS_POINTER_TO_INT<sp/>(link1-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link1<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;list1,<sp/>link1);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>link1<sp/>=<sp/><ref refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" kindref="member" tooltip="Gets the last link in the list.">_dbus_list_get_last_link</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link1<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;link1);<sp/></highlight><highlight class="comment">/*<sp/>pretend<sp/>this<sp/>link<sp/>is<sp/>the<sp/>head<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(_DBUS_POINTER_TO_INT<sp/>(link1-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link1<sp/>=<sp/><ref refid="group__DBusList_1ga6637493bf5fc09bddb44ac295c475cae" kindref="member" tooltip="Gets the previous link in the list, or NULL if there are no more links.">_dbus_list_get_prev_link</ref><sp/>(&amp;list1,<sp/>link1);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>remove<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i)))</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;element<sp/>should<sp/>have<sp/>been<sp/>in<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i)))</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;element<sp/>should<sp/>have<sp/>been<sp/>in<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(all_odd_values<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(all_odd_values<sp/>(&amp;list2));</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>test<sp/>removing<sp/>the<sp/>other<sp/>half<sp/>of<sp/>the<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>%<sp/>2)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i)))</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;element<sp/>should<sp/>have<sp/>been<sp/>in<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i)))</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;element<sp/>should<sp/>have<sp/>been<sp/>in<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(all_even_values<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(all_even_values<sp/>(&amp;list2));</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>list<sp/>using<sp/>remove_link<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list1<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(&amp;list1,<sp/>list1);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(list2<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(&amp;list2,<sp/>list2);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>remove<sp/>link<sp/>more<sp/>generally<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>link2<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link2<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*next<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;list2,<sp/>link2);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(_DBUS_POINTER_TO_INT<sp/>(link2-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(&amp;list2,<sp/>link2);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link2<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(all_odd_values<sp/>(&amp;list2));<sp/><sp/></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>link1<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link1<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*next<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;list1,<sp/>link1);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(_DBUS_POINTER_TO_INT<sp/>(link1-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>%<sp/>2)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(&amp;list1,<sp/>link1);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link1<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(all_even_values<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>copying<sp/>a<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(&amp;list2,<sp/>_DBUS_INT_TO_POINTER<sp/>(i));</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>bad<sp/>pointers,<sp/>because<sp/>they<sp/>are<sp/>allowed<sp/>in<sp/>the<sp/>copy<sp/>dest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>copy1<sp/>=<sp/>_DBUS_INT_TO_POINTER<sp/>(0x342234);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>copy2<sp/>=<sp/>_DBUS_INT_TO_POINTER<sp/>(23);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" kindref="member" tooltip="Copies a list.">_dbus_list_copy</ref><sp/>(&amp;list1,<sp/>&amp;copy1);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;copy1);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(lists_equal<sp/>(&amp;list1,<sp/>&amp;copy1));</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" kindref="member" tooltip="Copies a list.">_dbus_list_copy</ref><sp/>(&amp;list2,<sp/>&amp;copy2);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;copy2);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(lists_equal<sp/>(&amp;list2,<sp/>&amp;copy2));</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>test<sp/>copying<sp/>empty<sp/>lists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;copy1);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;copy2);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>bad<sp/>pointers,<sp/>because<sp/>they<sp/>are<sp/>allowed<sp/>in<sp/>the<sp/>copy<sp/>dest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>copy1<sp/>=<sp/>_DBUS_INT_TO_POINTER<sp/>(0x342234);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>copy2<sp/>=<sp/>_DBUS_INT_TO_POINTER<sp/>(23);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" kindref="member" tooltip="Copies a list.">_dbus_list_copy</ref><sp/>(&amp;list1,<sp/>&amp;copy1);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;copy1);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(lists_equal<sp/>(&amp;list1,<sp/>&amp;copy1));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" kindref="member" tooltip="Copies a list.">_dbus_list_copy</ref><sp/>(&amp;list2,<sp/>&amp;copy2);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;copy2);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(lists_equal<sp/>(&amp;list2,<sp/>&amp;copy2));</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list2);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>insert_before<sp/>on<sp/>empty<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>_dbus_list_insert_before<sp/>(&amp;list1,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_INT_TO_POINTER<sp/>(0));</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>inserting<sp/>before<sp/>first<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>_dbus_list_insert_before<sp/>(&amp;list1,<sp/>list1,</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_INT_TO_POINTER<sp/>(2));</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_descending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>inserting<sp/>in<sp/>the<sp/>middle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>_dbus_list_insert_before<sp/>(&amp;list1,<sp/>list1-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>,</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_INT_TO_POINTER<sp/>(1));</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_descending_sequence<sp/>(&amp;list1));<sp/><sp/></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>using<sp/>insert_before<sp/>to<sp/>append<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>_dbus_list_insert_before<sp/>(&amp;list1,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_INT_TO_POINTER<sp/>(-1));</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_descending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>insert_after<sp/>on<sp/>empty<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga2dacb82db59f0012951d8245017473c9" kindref="member" tooltip="Inserts data into the list after the given existing link.">_dbus_list_insert_after</ref><sp/>(&amp;list1,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_INT_TO_POINTER<sp/>(0));</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>inserting<sp/>after<sp/>first<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga2dacb82db59f0012951d8245017473c9" kindref="member" tooltip="Inserts data into the list after the given existing link.">_dbus_list_insert_after</ref><sp/>(&amp;list1,<sp/>list1,</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_INT_TO_POINTER<sp/>(1));</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_ascending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>inserting<sp/>at<sp/>the<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga2dacb82db59f0012951d8245017473c9" kindref="member" tooltip="Inserts data into the list after the given existing link.">_dbus_list_insert_after</ref><sp/>(&amp;list1,<sp/>list1-&gt;<ref refid="structDBusList_1a83180142180c856b2a02778e155cb044" kindref="member" tooltip="Next list node.">next</ref>,</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_INT_TO_POINTER<sp/>(2));</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_ascending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>using<sp/>insert_after<sp/>to<sp/>prepend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga2dacb82db59f0012951d8245017473c9" kindref="member" tooltip="Inserts data into the list after the given existing link.">_dbus_list_insert_after</ref><sp/>(&amp;list1,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_INT_TO_POINTER<sp/>(-1));</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_ascending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>using<sp/>remove_last<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(2));</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(1));</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(3));</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gad93f1fc853914144e94fc7a7dc0945aa" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove_last</ref><sp/>(&amp;list1,<sp/>_DBUS_INT_TO_POINTER<sp/>(2));</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>verify_list<sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(is_ascending_sequence<sp/>(&amp;list1));</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;list1);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-list.c"/>
  </compounddef>
</doxygen>
