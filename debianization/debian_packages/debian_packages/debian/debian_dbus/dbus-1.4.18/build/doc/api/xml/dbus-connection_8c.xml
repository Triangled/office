<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="dbus-connection_8c" kind="file">
    <compoundname>dbus-connection.c</compoundname>
    <includes local="no">config.h</includes>
    <includes refid="dbus-shared_8h" local="yes">dbus-shared.h</includes>
    <includes refid="dbus-connection_8h" local="yes">dbus-connection.h</includes>
    <includes refid="dbus-list_8h" local="yes">dbus-list.h</includes>
    <includes refid="dbus-timeout_8h" local="yes">dbus-timeout.h</includes>
    <includes refid="dbus-transport_8h" local="yes">dbus-transport.h</includes>
    <includes refid="dbus-watch_8h" local="yes">dbus-watch.h</includes>
    <includes refid="dbus-connection-internal_8h" local="yes">dbus-connection-internal.h</includes>
    <includes refid="dbus-pending-call-internal_8h" local="yes">dbus-pending-call-internal.h</includes>
    <includes refid="dbus-hash_8h" local="yes">dbus-hash.h</includes>
    <includes refid="dbus-message-internal_8h" local="yes">dbus-message-internal.h</includes>
    <includes refid="dbus-message-private_8h" local="yes">dbus-message-private.h</includes>
    <includes refid="dbus-threads_8h" local="yes">dbus-threads.h</includes>
    <includes refid="dbus-protocol_8h" local="yes">dbus-protocol.h</includes>
    <includes refid="dbus-dataslot_8h" local="yes">dbus-dataslot.h</includes>
    <includes refid="dbus-string_8h" local="yes">dbus-string.h</includes>
    <includes refid="dbus-pending-call_8h" local="yes">dbus-pending-call.h</includes>
    <includes refid="dbus-object-tree_8h" local="yes">dbus-object-tree.h</includes>
    <includes refid="dbus-threads-internal_8h" local="yes">dbus-threads-internal.h</includes>
    <includes refid="dbus-bus_8h" local="yes">dbus-bus.h</includes>
    <includes refid="dbus-marshal-basic_8h" local="yes">dbus-marshal-basic.h</includes>
    <incdepgraph>
      <node id="236">
        <label>stdarg.h</label>
      </node>
      <node id="243">
        <label>dbus/dbus-threads-internal.h</label>
        <link refid="dbus-threads-internal_8h_source"/>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
      </node>
      <node id="255">
        <label>dbus/dbus-marshal-validate.h</label>
        <link refid="dbus-marshal-validate_8h_source"/>
      </node>
      <node id="244">
        <label>dbus/dbus-threads.h</label>
        <link refid="dbus-threads_8h_source"/>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
      </node>
      <node id="228">
        <label>dbus/dbus-errors.h</label>
        <link refid="dbus-errors_8h_source"/>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
      </node>
      <node id="238">
        <label>dbus/dbus-internals.h</label>
        <link refid="dbus-internals_8h_source"/>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
      </node>
      <node id="246">
        <label>dbus-transport.h</label>
        <link refid="dbus-transport_8h_source"/>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
      </node>
      <node id="250">
        <label>dbus/dbus-resources.h</label>
        <link refid="dbus-resources_8h_source"/>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="257">
        <label>dbus/dbus-marshal-header.h</label>
        <link refid="dbus-marshal-header_8h_source"/>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
      </node>
      <node id="231">
        <label>stddef.h</label>
      </node>
      <node id="240">
        <label>dbus/dbus-file.h</label>
        <link refid="dbus-file_8h_source"/>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
      </node>
      <node id="249">
        <label>dbus-connection-internal.h</label>
        <link refid="dbus-connection-internal_8h_source"/>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
      </node>
      <node id="232">
        <label>dbus/dbus-arch-deps.h</label>
      </node>
      <node id="253">
        <label>dbus-hash.h</label>
        <link refid="dbus-hash_8h_source"/>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
      </node>
      <node id="229">
        <label>dbus/dbus-macros.h</label>
        <link refid="dbus-macros_8h_source"/>
      </node>
      <node id="242">
        <label>string.h</label>
      </node>
      <node id="239">
        <label>dbus/dbus-sysdeps.h</label>
        <link refid="dbus-sysdeps_8h_source"/>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
      </node>
      <node id="258">
        <label>dbus/dbus-marshal-basic.h</label>
        <link refid="dbus-marshal-basic_8h_source"/>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
      </node>
      <node id="261">
        <label>dbus-bus.h</label>
        <link refid="dbus-bus_8h_source"/>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>dbus-pending-call.h</label>
        <link refid="dbus-pending-call_8h_source"/>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="256">
        <label>dbus-message-private.h</label>
        <link refid="dbus-message-private_8h_source"/>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
      </node>
      <node id="230">
        <label>dbus/dbus-types.h</label>
        <link refid="dbus-types_8h_source"/>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
      </node>
      <node id="226">
        <label>dbus-shared.h</label>
        <link refid="dbus-shared_8h_source"/>
      </node>
      <node id="241">
        <label>dbus/dbus-string.h</label>
        <link refid="dbus-string_8h_source"/>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
      </node>
      <node id="247">
        <label>dbus/dbus-address.h</label>
        <link refid="dbus-address_8h_source"/>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
      </node>
      <node id="234">
        <label>dbus/dbus-memory.h</label>
        <link refid="dbus-memory_8h_source"/>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
      </node>
      <node id="260">
        <label>dbus-object-tree.h</label>
        <link refid="dbus-object-tree_8h_source"/>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="248">
        <label>dbus-watch.h</label>
        <link refid="dbus-watch_8h_source"/>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>dbus/dbus-protocol.h</label>
        <link refid="dbus-protocol_8h_source"/>
      </node>
      <node id="245">
        <label>dbus-timeout.h</label>
        <link refid="dbus-timeout_8h_source"/>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
      </node>
      <node id="235">
        <label>dbus/dbus-message.h</label>
        <link refid="dbus-message_8h_source"/>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
      </node>
      <node id="224">
        <label>dbus-connection.c</label>
        <link refid="dbus-connection.c"/>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
      </node>
      <node id="227">
        <label>dbus-connection.h</label>
        <link refid="dbus-connection_8h_source"/>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
      </node>
      <node id="252">
        <label>dbus-pending-call-internal.h</label>
        <link refid="dbus-pending-call-internal_8h_source"/>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
      </node>
      <node id="225">
        <label>config.h</label>
      </node>
      <node id="251">
        <label>dbus/dbus-dataslot.h</label>
        <link refid="dbus-dataslot_8h_source"/>
        <childnode refid="238" relation="include">
        </childnode>
      </node>
      <node id="254">
        <label>dbus-message-internal.h</label>
        <link refid="dbus-message-internal_8h_source"/>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
      </node>
      <node id="237">
        <label>dbus-list.h</label>
        <link refid="dbus-list_8h_source"/>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structDBusMessageFilter" prot="public">DBusMessageFilter</innerclass>
    <innerclass refid="structDBusPreallocatedSend" prot="public">DBusPreallocatedSend</innerclass>
    <innerclass refid="structDBusConnection" prot="public">DBusConnection</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="dbus-connection_8c_1a8f97d0505f9aa66b39bd2f0d3f1519d1" prot="public" static="no">
        <name>TOOK_LOCK_CHECK</name>
        <param><defname>connection</defname></param>
        <initializer>do {                \
    _dbus_assert (!(connection)-&gt;have_connection_lock); \
    (connection)-&gt;have_connection_lock = <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;          \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="55" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-connection_8c_1a99c77f121b81673058bf78dbc4bf10d0" prot="public" static="no">
        <name>RELEASING_LOCK_CHECK</name>
        <param><defname>connection</defname></param>
        <initializer>do {            \
    _dbus_assert ((connection)-&gt;have_connection_lock);   \
    (connection)-&gt;have_connection_lock = <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;          \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="59" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-connection_8c_1a20e30181a40e1d435c83776c1cacaaf5" prot="public" static="no">
        <name>HAVE_LOCK_CHECK</name>
        <param><defname>connection</defname></param>
        <initializer>_dbus_assert ((connection)-&gt;have_connection_lock)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="60" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-connection_8c_1acce81a92b14d7cb4b4f11cf75fbd384a" prot="public" static="no">
        <name>TRACE_LOCKS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="64" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-connection_8c_1a99fcbae5b8f2ed2cc019cab85f63d4e4" prot="public" static="no">
        <name>CONNECTION_LOCK</name>
        <param><defname>connection</defname></param>
        <initializer>do {                                      \
    if (TRACE_LOCKS) { _dbus_verbose (&quot;LOCK\n&quot;); }   \
    _dbus_mutex_lock ((connection)-&gt;mutex);                                      \
    TOOK_LOCK_CHECK (connection);                                               \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="70" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-connection_8c_1ab21a3014fa3cacf2a580e079321abc33" prot="public" static="no">
        <name>CONNECTION_UNLOCK</name>
        <param><defname>connection</defname></param>
        <initializer>do {                                              \
    if (TRACE_LOCKS) { _dbus_verbose (&quot;UNLOCK\n&quot;);  }        \
    RELEASING_LOCK_CHECK (connection);                                                  \
    <ref refid="group__DBusThreadsInternals_1ga94dcc555488e5d677f10bd3898d61c00" kindref="member">_dbus_mutex_unlock</ref> ((connection)-&gt;mutex);                                            \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="76" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-connection_8c_1a9890026dcbe7d81059fb5953f43b03a2" prot="public" static="no">
        <name>SLOTS_LOCK</name>
        <param><defname>connection</defname></param>
        <initializer>do {                     \
    <ref refid="group__DBusThreadsInternals_1gae6eafe138e9c317bfb25971d1d8bef2d" kindref="member">_dbus_mutex_lock</ref> ((connection)-&gt;slot_mutex);        \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="80" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-connection_8c_1a1c990d0ce465270e0c307b62a022a8f9" prot="public" static="no">
        <name>SLOTS_UNLOCK</name>
        <param><defname>connection</defname></param>
        <initializer>do {                   \
    <ref refid="group__DBusThreadsInternals_1ga94dcc555488e5d677f10bd3898d61c00" kindref="member">_dbus_mutex_unlock</ref> ((connection)-&gt;slot_mutex);      \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="84" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dbus-connection_8c_1a944aba2fb3e53f3877222bb34e3578af" prot="public" static="no">
        <name>DISPATCH_STATUS_NAME</name>
        <param><defname>s</defname></param>
        <initializer>((s) == <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member">DBUS_DISPATCH_COMPLETE</ref> ? &quot;complete&quot; :         \
                      (s) == <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref> ? &quot;data remains&quot; : \
                      (s) == <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member">DBUS_DISPATCH_NEED_MEMORY</ref> ? &quot;need memory&quot; :   \
                      &quot;???&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="90" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1gaec8158f55878d1a6459ebdc9950fa783" prot="public" static="no">
        <type>struct <ref refid="structDBusMessageFilter" kindref="compound">DBusMessageFilter</ref></type>
        <definition>typedef struct DBusMessageFilter DBusMessageFilter</definition>
        <argsstring></argsstring>
        <name>DBusMessageFilter</name>
        <briefdescription>
<para>Internal struct representing a message filter function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="212" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1gab3c673c1e36e293c5f2baa92418603a3" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusWatchAddFunction)(DBusWatchList *list, DBusWatch *watch)</definition>
        <argsstring>)(DBusWatchList *list, DBusWatch *watch)</argsstring>
        <name>DBusWatchAddFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_watch() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="659" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1ga475a0e9a2f2b7a279ba07fa3352114d4" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusWatchRemoveFunction)(DBusWatchList *list, DBusWatch *watch)</definition>
        <argsstring>)(DBusWatchList *list, DBusWatch *watch)</argsstring>
        <name>DBusWatchRemoveFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_watch() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="662" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1ga851f0958d46980f5a39bcfb874a4cb78" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusWatchToggleFunction)(DBusWatchList *list, DBusWatch *watch, dbus_bool_t enabled)</definition>
        <argsstring>)(DBusWatchList *list, DBusWatch *watch, dbus_bool_t enabled)</argsstring>
        <name>DBusWatchToggleFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_watch() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="666" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1ga6ca28a0af7de84c51fdbafe8786d3446" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusTimeoutAddFunction)(DBusTimeoutList *list, DBusTimeout *timeout)</definition>
        <argsstring>)(DBusTimeoutList *list, DBusTimeout *timeout)</argsstring>
        <name>DBusTimeoutAddFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_timeout() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="783" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1gafe75d05f2abf712c7fe13691ef27754c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusTimeoutRemoveFunction)(DBusTimeoutList *list, DBusTimeout *timeout)</definition>
        <argsstring>)(DBusTimeoutList *list, DBusTimeout *timeout)</argsstring>
        <name>DBusTimeoutRemoveFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_timeout() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="786" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1ga1b4c97e7ef6f2cb8704cf74acc03c727" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusTimeoutToggleFunction)(DBusTimeoutList *list, DBusTimeout *timeout, dbus_bool_t enabled)</definition>
        <argsstring>)(DBusTimeoutList *list, DBusTimeout *timeout, dbus_bool_t enabled)</argsstring>
        <name>DBusTimeoutToggleFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_timeout() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="790" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="788" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__DBusConnectionInternals_1ga10ab26dacdb418f4b94148571b5bf0aa" prot="public" static="yes" mutable="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_modify_sigpipe</definition>
        <argsstring></argsstring>
        <name>_dbus_modify_sigpipe</name>
        <initializer> <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="239" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__DBusConnectionInternals_1gab0e1a7a50a12173e9be729b275903294" prot="public" static="yes" mutable="no">
        <type><ref refid="structDBusHashTable" kindref="compound">DBusHashTable</ref> *</type>
        <definition>DBusHashTable* shared_connections</definition>
        <argsstring></argsstring>
        <name>shared_connections</name>
        <initializer> <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1508" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__DBusConnectionInternals_1ga4ef7c9bbbcef9e36b2bc52c9c8e96c30" prot="public" static="yes" mutable="no">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>DBusList* shared_connections_no_guid</definition>
        <argsstring></argsstring>
        <name>shared_connections_no_guid</name>
        <initializer> <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1509" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__DBusConnection_1gaa0d783eaf99d7f70b8b1d0bfdd43bb82" prot="public" static="yes" mutable="no">
        <type><ref refid="structDBusDataSlotAllocator" kindref="compound">DBusDataSlotAllocator</ref></type>
        <definition>DBusDataSlotAllocator slot_allocator</definition>
        <argsstring></argsstring>
        <name>slot_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5814" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5814" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaeff0b29105e6bd71ead935a200a8bf39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
        <definition>static DBusDispatchStatus _dbus_connection_get_dispatch_status_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_get_dispatch_status_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="329" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4177" bodyend="4222"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga347a73baf085be84624ea9069d6d9129" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_update_dispatch_status_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusDispatchStatus new_status)</argsstring>
        <name>_dbus_connection_update_dispatch_status_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
          <declname>new_status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="331" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4225" bodyend="4276"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3d2ea43404c2d550028e05e9a5f08fed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_last_unref</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_last_unref</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="332" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2654" bodyend="2740"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gacfea31e972b93773bfdd43459c3d1962" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_acquire_dispatch</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_acquire_dispatch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Acquire the dispatcher. </para>        </briefdescription>
        <detaileddescription>
<para>This is a separate lock so the main connection lock can be dropped to call out to application dispatch handlers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="333" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4055" bodyend="4081"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga43472f29755302a1a4f856d4f049e717" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_release_dispatch</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_release_dispatch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Release the dispatcher when you&apos;re done with it. </para>        </briefdescription>
        <detaileddescription>
<para>Only call after you&apos;ve acquired the dispatcher. Wakes up at most one thread currently waiting to acquire the dispatcher.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="334" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4091" bodyend="4105"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga741c2b2a106f6ab9c9ce22aeeb4dcebd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
        <definition>static DBusDispatchStatus _dbus_connection_flush_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_flush_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Blocks until the outgoing message queue is empty. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes connection lock already held.</para><para>If you call this, you MUST call update_dispatch_status afterword...</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="335" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3543" bodyend="3573"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga0d9bfa5ab1f38f88998299e9d275110e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_close_possibly_shared_and_unlock</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_close_possibly_shared_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="336" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2797" bodyend="2829"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga377256faaaf545bde52eaf96e002b2fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_get_is_connected_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_get_is_connected_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="337" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2895" bodyend="2899"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga01c7e2e1c7fd78d81f48c985bf62e5ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_peek_for_reply_unlocked</definition>
        <argsstring>(DBusConnection *connection, dbus_uint32_t client_serial)</argsstring>
        <name>_dbus_connection_peek_for_reply_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>dbus_uint32_t</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="339" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2207" bodyend="2228"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2c0f5a3c67e77a3aa3763a0d5c290147" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessageFilter" kindref="compound">DBusMessageFilter</ref> *</type>
        <definition>static DBusMessageFilter* _dbus_message_filter_ref</definition>
        <argsstring>(DBusMessageFilter *filter)</argsstring>
        <name>_dbus_message_filter_ref</name>
        <param>
          <type><ref refid="structDBusMessageFilter" kindref="compound">DBusMessageFilter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="343" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="342" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga553d10ec023348f36e6056b73a7e3f17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_message_filter_unref</definition>
        <argsstring>(DBusMessageFilter *filter)</argsstring>
        <name>_dbus_message_filter_unref</name>
        <param>
          <type><ref refid="structDBusMessageFilter" kindref="compound">DBusMessageFilter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="358" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="357" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga4fe0c8f7b72dc89b9e1a3110db2f778e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_lock</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_lock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Acquires the connection lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="380" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="379" bodyend="382"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <referencedby refid="group__DBusObjectTree_1gab64dcc8febde768db3404cd93b333e1e" compoundref="dbus-object-tree_8c" startline="747" endline="904">_dbus_object_tree_dispatch_and_unlock</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3db10d48ec16e485d5a638aacebd4ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_unlock</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Releases the connection lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="391" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="390" bodyend="393"/>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <referencedby refid="group__DBusObjectTree_1gab64dcc8febde768db3404cd93b333e1e" compoundref="dbus-object-tree_8c" startline="747" endline="904">_dbus_object_tree_dispatch_and_unlock</referencedby>
        <referencedby refid="group__DBusObjectTree_1gaab7040bd1bf037d99e9bbb75d0869a2f" compoundref="dbus-object-tree_8c" startline="1046" endline="1065">_dbus_object_tree_list_registered_and_unlock</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga3babe73ed342b6963997ef2efd73ef75" compoundref="dbus-object-tree_8c" startline="444" endline="522">_dbus_object_tree_unregister_and_unlock</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga0bfb45db918ac0bcb24a00c51ea313d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_wakeup_mainloop</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_wakeup_mainloop</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Wakes up the main loop if it is sleeping Needed if we&apos;re e.g. </para>        </briefdescription>
        <detaileddescription>
<para>queueing outgoing messages on a thread while the mainloop sleeps.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="404" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="403" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gac1b92eba0aeee294dc28fcc260c9b749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_queue_received_message_link</definition>
        <argsstring>(DBusConnection *connection, DBusList *link)</argsstring>
        <name>_dbus_connection_queue_received_message_link</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Adds a message-containing list link to the incoming message queue, taking ownership of the link and the message&apos;s current refcount. </para>        </briefdescription>
        <detaileddescription>
<para>Cannot fail due to lack of memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the message link to queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="475" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="473" bodyend="523"/>
        <references refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" compoundref="dbus-connection_8c" startline="873" endline="880">_dbus_connection_remove_timeout_unlocked</references>
        <references refid="group__DBusHashTable_1ga36ff49c4c35599e6fcdadc7f6805c49e" compoundref="dbus-hash_8c" startline="1205" endline="1218">_dbus_hash_table_lookup_int</references>
        <references refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" compoundref="dbus-list_8c" startline="292" endline="299">_dbus_list_append_link</references>
        <references refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" compoundref="dbus-pending-call_8c" startline="262" endline="267">_dbus_pending_call_get_timeout_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaf1e630b966722af540502329ed028254" compoundref="dbus-pending-call_8c" startline="231" endline="236">_dbus_pending_call_is_timeout_added_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" compoundref="dbus-pending-call_8c" startline="246" endline="252">_dbus_pending_call_set_timeout_added_unlocked</references>
        <references refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" compoundref="dbus-transport_8c" startline="697" endline="785">_dbus_transport_get_is_authenticated</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3083" endline="3095">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3169" endline="3181">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" compoundref="dbus-message_8c" startline="2952" endline="2964">dbus_message_get_path</references>
        <references refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" compoundref="dbus-message_8c" startline="1025" endline="1038">dbus_message_get_reply_serial</references>
        <references refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" compoundref="dbus-message_8c" startline="3399" endline="3409">dbus_message_get_signature</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1580" endline="1585">dbus_message_get_type</references>
        <references refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" compoundref="dbus-message_8c" startline="4512" endline="4527">dbus_message_type_to_string</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="257">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="264">DBusConnection::n_incoming</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" compoundref="dbus-connection_8c" startline="277">DBusConnection::pending_replies</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
        <referencedby refid="group__DBusTransport_1ga4046f36ecbdb75219f2b667f92e75a2b" compoundref="dbus-transport_8c" startline="1117" endline="1160">_dbus_transport_queue_messages</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gadb7a525dc6b566b575ee4f9b20028b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_queue_synthesized_message_link</definition>
        <argsstring>(DBusConnection *connection, DBusList *link)</argsstring>
        <name>_dbus_connection_queue_synthesized_message_link</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Adds a link + message to the incoming message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Can&apos;t fail. Takes ownership of both link and message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the list node and message to queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="536" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="534" bodyend="547"/>
        <references refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" compoundref="dbus-list_8c" startline="292" endline="299">_dbus_list_append_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="257">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="264">DBusConnection::n_incoming</references>
        <referencedby refid="group__DBusPendingCallInternals_1ga1bc4de7652108d0629522a4e3adffcab" compoundref="dbus-pending-call_8c" startline="211" endline="222">_dbus_pending_call_queue_timeout_error_unlocked</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3d31a01751860b67f960dcaffb7bb4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_has_messages_to_send_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_has_messages_to_send_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Checks whether there are messages in the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Called with connection lock held.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the outgoing queue is non-empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="559" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="558" bodyend="562"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" compoundref="dbus-connection_8c" startline="256">DBusConnection::outgoing_messages</references>
        <referencedby refid="group__DBusConnection_1gac40563ec4c0e309d936daf3163ba9bb7" compoundref="dbus-connection_8c" startline="574" endline="585">dbus_connection_has_messages_to_send</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2210bb5734c1a04d0d654b026f27d94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t dbus_connection_has_messages_to_send</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_has_messages_to_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Checks whether there are messages in the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush()</ref> to block until all outgoing messages have been written to the underlying transport (such as a socket).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the outgoing queue is non-empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="575" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="574" bodyend="585"/>
        <references refid="group__DBusConnectionInternals_1ga3d31a01751860b67f960dcaffb7bb4ef" compoundref="dbus-connection_8c" startline="558" endline="562">_dbus_connection_has_messages_to_send_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3955cd53ac4f671a5bb54019887389a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>DBusMessage* _dbus_connection_get_message_to_send</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_get_message_to_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the next outgoing message. </para>        </briefdescription>
        <detaileddescription>
<para>The message remains in the queue, and the caller does not own a reference to it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the message to be sent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="596" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="595" bodyend="600"/>
        <references refid="group__DBusList_1ga18afc36fff1636a71295bcc7a75dc4f6" compoundref="dbus-list_8c" startline="604" endline="610">_dbus_list_get_last</references>
        <references refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" compoundref="dbus-connection_8c" startline="256">DBusConnection::outgoing_messages</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2d04df24d0f54a4e2dcfbede4ef50f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_message_sent</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message)</argsstring>
        <name>_dbus_connection_message_sent</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Notifies the connection that a message has been sent, so the message can be removed from the outgoing queue. </para>        </briefdescription>
        <detaileddescription>
<para>Called with the connection lock held.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message that was sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="613" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="611" bodyend="655"/>
        <references refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" compoundref="dbus-list_8c" startline="588" endline="594">_dbus_list_get_last_link</references>
        <references refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" compoundref="dbus-list_8c" startline="310" endline="314">_dbus_list_prepend_link</references>
        <references refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" compoundref="dbus-list_8c" startline="507" endline="526">_dbus_list_unlink</references>
        <references refid="group__DBusMessageInternals_1ga339e5ead12e353a66fb93f1c1d441c3a" compoundref="dbus-message_8c" startline="292" endline="316">_dbus_message_remove_counter</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3083" endline="3095">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3169" endline="3181">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" compoundref="dbus-message_8c" startline="2952" endline="2964">dbus_message_get_path</references>
        <references refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" compoundref="dbus-message_8c" startline="3399" endline="3409">dbus_message_get_signature</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1580" endline="1585">dbus_message_get_type</references>
        <references refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" compoundref="dbus-message_8c" startline="4512" endline="4527">dbus_message_type_to_string</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1550" endline="1567">dbus_message_unref</references>
        <references refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" compoundref="dbus-connection_8c" startline="292">DBusConnection::link_cache</references>
        <references refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" compoundref="dbus-connection_8c" startline="263">DBusConnection::n_outgoing</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="266">DBusConnection::outgoing_counter</references>
        <references refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" compoundref="dbus-connection_8c" startline="256">DBusConnection::outgoing_messages</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaa43a13ee3509eaac5964672a22f3a713" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t protected_change_watch</definition>
        <argsstring>(DBusConnection *connection, DBusWatch *watch, DBusWatchAddFunction add_function, DBusWatchRemoveFunction remove_function, DBusWatchToggleFunction toggle_function, dbus_bool_t enabled)</argsstring>
        <name>protected_change_watch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1gab3c673c1e36e293c5f2baa92418603a3" kindref="member">DBusWatchAddFunction</ref></type>
          <declname>add_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1ga475a0e9a2f2b7a279ba07fa3352114d4" kindref="member">DBusWatchRemoveFunction</ref></type>
          <declname>remove_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1ga851f0958d46980f5a39bcfb874a4cb78" kindref="member">DBusWatchToggleFunction</ref></type>
          <declname>toggle_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="675" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="669" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga82adef36b4cd583bc1146eae5756c063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_add_watch_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusWatch *watch)</argsstring>
        <name>_dbus_connection_add_watch_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Adds a watch using the connection&apos;s DBusAddWatchFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise records the watch to be added when said function is available. Also re-adds the watch if the DBusAddWatchFunction changes. May fail due to lack of memory. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the watch to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="733" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="731" bodyend="737"/>
        <references refid="group__DBusWatchInternals_1gaec61655a4bd6186a6a1ec104771d8af5" compoundref="dbus-watch_8c" startline="358" endline="381">_dbus_watch_list_add_watch</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga65fc02c0756d0c7caaa39cd60922c99b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_remove_watch_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusWatch *watch)</argsstring>
        <name>_dbus_connection_remove_watch_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Removes a watch using the connection&apos;s DBusRemoveWatchFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to call this function on a watch that was not previously added. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the watch to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="751" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="749" bodyend="756"/>
        <references refid="group__DBusWatchInternals_1ga76894d297bc7d7d23cbacdc2b1778884" compoundref="dbus-watch_8c" startline="391" endline="407">_dbus_watch_list_remove_watch</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga6c00e2eaf225b154760976af5688d250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_toggle_watch_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusWatch *watch, dbus_bool_t enabled)</argsstring>
        <name>_dbus_connection_toggle_watch_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Toggles a watch and notifies app via connection&apos;s DBusWatchToggledFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to call this function on a watch that was not previously added. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the watch to toggle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to enable or disable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="772" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="769" bodyend="779"/>
        <references refid="group__DBusWatchInternals_1ga14bb50e8663a1d9d3960b4f73c09c097" compoundref="dbus-watch_8c" startline="418" endline="437">_dbus_watch_list_toggle_watch</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga7fe907a54508918cca9757075aef928c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t protected_change_timeout</definition>
        <argsstring>(DBusConnection *connection, DBusTimeout *timeout, DBusTimeoutAddFunction add_function, DBusTimeoutRemoveFunction remove_function, DBusTimeoutToggleFunction toggle_function, dbus_bool_t enabled)</argsstring>
        <name>protected_change_timeout</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1ga6ca28a0af7de84c51fdbafe8786d3446" kindref="member">DBusTimeoutAddFunction</ref></type>
          <declname>add_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1gafe75d05f2abf712c7fe13691ef27754c" kindref="member">DBusTimeoutRemoveFunction</ref></type>
          <declname>remove_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1ga1b4c97e7ef6f2cb8704cf74acc03c727" kindref="member">DBusTimeoutToggleFunction</ref></type>
          <declname>toggle_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="799" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="793" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga69e87e3be94b8c681585ec870e39a64a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_add_timeout_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusTimeout *timeout)</argsstring>
        <name>_dbus_connection_add_timeout_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Adds a timeout using the connection&apos;s DBusAddTimeoutFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise records the timeout to be added when said function is available. Also re-adds the timeout if the DBusAddTimeoutFunction changes. May fail due to lack of memory. The timeout will fire repeatedly until removed. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="857" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="855" bodyend="861"/>
        <references refid="group__DBusTimeoutInternals_1ga14955f061551ece122808b9e6ddc0757" compoundref="dbus-timeout_8c" startline="310" endline="330">_dbus_timeout_list_add_timeout</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_remove_timeout_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusTimeout *timeout)</argsstring>
        <name>_dbus_connection_remove_timeout_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Removes a timeout using the connection&apos;s DBusRemoveTimeoutFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to call this function on a timeout that was not previously added. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="875" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="873" bodyend="880"/>
        <references refid="group__DBusTimeoutInternals_1gaec0ffafdcac87f23878a2ddded044822" compoundref="dbus-timeout_8c" startline="340" endline="351">_dbus_timeout_list_remove_timeout</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnectionInternals_1gac1b92eba0aeee294dc28fcc260c9b749" compoundref="dbus-connection_8c" startline="473" endline="523">_dbus_connection_queue_received_message_link</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga165dcfd8b995ff0edd19aebcf3e1a61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_toggle_timeout_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusTimeout *timeout, dbus_bool_t enabled)</argsstring>
        <name>_dbus_connection_toggle_timeout_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Toggles a timeout and notifies app via connection&apos;s DBusTimeoutToggledFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to call this function on a timeout that was not previously added. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout to toggle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to enable or disable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="896" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="893" bodyend="901"/>
        <references refid="group__DBusTimeoutInternals_1ga3d1ee0968a47651c5428ebf48711b217" compoundref="dbus-timeout_8c" startline="362" endline="376">_dbus_timeout_list_toggle_timeout</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gacbd883ba828c924c6a45a0f170fbaf86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_attach_pending_call_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_attach_pending_call_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="906" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="904" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gab614d8dbd7a15e4d10e151ef8d9834cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void free_pending_call_on_hash_removal</definition>
        <argsstring>(void *data)</argsstring>
        <name>free_pending_call_on_hash_removal</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="956" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="955" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gac81dcffaea3ae3124784f02f401cf0ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_detach_pending_call_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_detach_pending_call_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="991" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="989" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga0b3b9225570d4aa9abda36ce02518dc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_detach_pending_call_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_detach_pending_call_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1002" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1000" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga968196bee49659e75c54b53d7c85fa51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_remove_pending_call</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_remove_pending_call</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Removes a pending call from the connection, such that the pending reply will be ignored. </para>        </briefdescription>
        <detaileddescription>
<para>May drop the last reference to the pending call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1034" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1032" bodyend="1037"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <referencedby refid="group__DBusPendingCall_1ga6530d18f891d3ca5f5df87ea7c2b155c" compoundref="dbus-pending-call_8c" startline="628" endline="634">dbus_pending_call_cancel</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga0f24cacd1574f2dfacbb15e51867a976" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_acquire_io_path</definition>
        <argsstring>(DBusConnection *connection, int timeout_milliseconds)</argsstring>
        <name>_dbus_connection_acquire_io_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>Acquire the transporter I/O path. </para>        </briefdescription>
        <detaileddescription>
<para>This must be done before doing any I/O in the transporter. May sleep and drop the IO path mutex while waiting for the I/O path.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum blocking time, or -1 for no limit. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the I/O path was acquired. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1051" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1049" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaf198a87ed9ea6e9d28c8c12649a352bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_release_io_path</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_release_io_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Release the I/O path when you&apos;re done with it. </para>        </briefdescription>
        <detaileddescription>
<para>Only call after you&apos;ve acquired the I/O. Wakes up at most one thread currently waiting to acquire the I/O path.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1132" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1131" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_do_iteration_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending, unsigned int flags, int timeout_milliseconds)</argsstring>
        <name>_dbus_connection_do_iteration_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>Queues incoming messages and sends outgoing messages for this connection, optionally blocking in the process. </para>        </briefdescription>
        <detaileddescription>
<para>Each call to <ref refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" kindref="member">_dbus_connection_do_iteration_unlocked()</ref> will call select() or poll() one time and then read or write data if possible.</para><para>The purpose of this function is to be able to flush outgoing messages or queue up incoming messages without returning control to the application and causing reentrancy weirdness.</para><para>The flags parameter allows you to specify whether to read incoming messages, write outgoing messages, or both, and whether to block if no immediate action is possible.</para><para>The timeout_milliseconds parameter does nothing unless the iteration is blocking.</para><para>If there are no outgoing messages and DBUS_ITERATION_DO_READING wasn&apos;t specified, then it&apos;s impossible to block, even if you specify DBUS_ITERATION_BLOCK; in that case the function returns immediately.</para><para>If pending is not NULL then a check is made if the pending call is completed after the io path has been required. If the call has been completed nothing is done. This must be done since the _dbus_connection_acquire_io_path releases the connection lock for a while.</para><para>Called with connection lock held.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call that should be checked or NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>iteration flags. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum blocking time, or -1 for no limit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1190" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1186" bodyend="1225"/>
        <references refid="group__DBusPendingCallInternals_1ga37bef4359b3c29629a57f5fe480690a1" compoundref="dbus-pending-call_8c" startline="455" endline="458">_dbus_pending_call_get_completed_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" compoundref="dbus-pending-call_8c" startline="276" endline="281">_dbus_pending_call_get_reply_serial_unlocked</references>
        <references refid="group__DBusTransport_1gac5e6d7a01debcf852b8d5a2fbc666fde" compoundref="dbus-transport_8c" startline="957" endline="979">_dbus_transport_do_iteration</references>
        <references refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" compoundref="dbus-connection_8c" startline="263">DBusConnection::n_outgoing</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
        <referencedby refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" compoundref="dbus-connection_8c" startline="2351" endline="2522">_dbus_connection_block_pending_call</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBusConnection* _dbus_connection_new_for_transport</definition>
        <argsstring>(DBusTransport *transport)</argsstring>
        <name>_dbus_connection_new_for_transport</name>
        <param>
          <type><ref refid="structDBusTransport" kindref="compound">DBusTransport</ref> *</type>
          <declname>transport</declname>
        </param>
        <briefdescription>
<para>Creates a new connection for the given transport. </para>        </briefdescription>
        <detaileddescription>
<para>A transport represents a message stream that uses some concrete mechanism, such as UNIX domain sockets. May return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if insufficient memory exists to create the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transport</parametername>
</parameternamelist>
<parameterdescription>
<para>the transport. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new connection, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1238" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1237" bodyend="1396"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2354" endline="2366">_dbus_atomic_inc</references>
        <references refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" compoundref="dbus-threads_8c" startline="233" endline="242">_dbus_condvar_free_at_location</references>
        <references refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" compoundref="dbus-threads_8c" startline="201" endline="213">_dbus_condvar_new_at_location</references>
        <references refid="group__DBusResources_1ga9911dd8fa020299a2b517251ea0be399" compoundref="dbus-resources_8c" startline="82" endline="100">_dbus_counter_new</references>
        <references refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" compoundref="dbus-resources_8c" startline="125" endline="136">_dbus_counter_unref</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="group__DBusDataSlot_1ga6de49b3a1210202215d40a5a19806992" compoundref="dbus-dataslot_8c" startline="213" endline="217">_dbus_data_slot_list_init</references>
        <references refid="group__DBusSysdeps_1ga6890d4cde3afec0bf274ca2af8c9e204" compoundref="dbus-sysdeps-unix_8c" startline="2763" endline="2766">_dbus_disable_sigpipe</references>
        <references refid="group__DBusHashTable_1gac8e434348a354b9606d4c50c127a5eb4" compoundref="dbus-hash_8c" startline="295" endline="353">_dbus_hash_table_new</references>
        <references refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" compoundref="dbus-hash_8c" startline="377" endline="426">_dbus_hash_table_unref</references>
        <references refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" compoundref="dbus-list_8c" startline="219" endline="222">_dbus_list_alloc_link</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="231" endline="234">_dbus_list_free_link</references>
        <references refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" compoundref="dbus-threads_8c" startline="127" endline="136">_dbus_mutex_free_at_location</references>
        <references refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" compoundref="dbus-threads_8c" startline="89" endline="103">_dbus_mutex_new_at_location</references>
        <references refid="group__DBusObjectTree_1ga5920f14b487122f13a3d439952d5ed2e" compoundref="dbus-object-tree_8c" startline="92" endline="121">_dbus_object_tree_new</references>
        <references refid="group__DBusObjectTree_1ga7639e273ab160c422a7cef0cda60ded5" compoundref="dbus-object-tree_8c" startline="143" endline="155">_dbus_object_tree_unref</references>
        <references refid="group__DBusTimeoutInternals_1ga1b399ef2d7f128e59bb32dbb5b590e1b" compoundref="dbus-timeout_8c" startline="211" endline="223">_dbus_timeout_list_free</references>
        <references refid="group__DBusTimeoutInternals_1ga5b122b35cdb3926b7dc2d084ddff9d62" compoundref="dbus-timeout_8c" startline="194" endline="203">_dbus_timeout_list_new</references>
        <references refid="group__DBusTransport_1ga31d6dbc864c9ea643d72521bbb1b7c56" compoundref="dbus-transport_8c" startline="456" endline="463">_dbus_transport_ref</references>
        <references refid="group__DBusTransport_1ga9aaa3f8bf429c94d4ed180dff36c503c" compoundref="dbus-transport_8c" startline="900" endline="914">_dbus_transport_set_connection</references>
        <references refid="group__DBusWatchInternals_1gac3f75c0da2c8c51e8708f45dd27f9e2d" compoundref="dbus-watch_8c" startline="232" endline="243">_dbus_watch_list_free</references>
        <references refid="group__DBusWatchInternals_1ga5d9db5d0af5916a5ec890eb38d5741eb" compoundref="dbus-watch_8c" startline="215" endline="224">_dbus_watch_list_new</references>
        <references refid="structDBusConnection_1a43d0bb9401103383e13ed3c99baf0daa" compoundref="dbus-connection_8c" startline="279">DBusConnection::client_serial</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" compoundref="dbus-connection_8h" startline="81">DBUS_DISPATCH_COMPLETE</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="629" endline="668">dbus_free</references>
        <references refid="group__DBusHashTable_1ggab0ab9767ffa5b6720a13b3d741630852a26446bd9fbb15c6c381b35a810207141" compoundref="dbus-hash_8h" startline="71">DBUS_HASH_INT</references>
        <references refid="group__DBusShared_1ga9ef6478aae637449ec0c5de1679f75ce" compoundref="dbus-shared_8h" startline="100">DBUS_INTERFACE_LOCAL</references>
        <references refid="group__DBusMessage_1ga48c2b872165f96dec91c14c9b8dd8830" compoundref="dbus-message_8c" startline="1282" endline="1310">dbus_message_new_signal</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1550" endline="1567">dbus_message_unref</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="group__DBusShared_1ga850990a54a46142ee7c5f8174cc932c1" compoundref="dbus-shared_8h" startline="82">DBUS_PATH_LOCAL</references>
        <references refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" compoundref="dbus-connection_8c" startline="280">DBusConnection::disconnect_message_link</references>
        <references refid="structDBusConnection_1a48d141d4311211e921571043bdbaeefb" compoundref="dbus-connection_8c" startline="312">DBusConnection::disconnected_message_arrived</references>
        <references refid="structDBusConnection_1a3b2707b9d10d0643f91a8e027ae118b5" compoundref="dbus-connection_8c" startline="316">DBusConnection::disconnected_message_processed</references>
        <references refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" compoundref="dbus-connection_8c" startline="252">DBusConnection::dispatch_cond</references>
        <references refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" compoundref="dbus-connection_8c" startline="251">DBusConnection::dispatch_mutex</references>
        <references refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" compoundref="dbus-connection_8c" startline="308">DBusConnection::exit_on_disconnect</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" compoundref="dbus-connection_8c" startline="272">DBusConnection::filter_list</references>
        <references refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" compoundref="dbus-connection_8c" startline="325">DBusConnection::generation</references>
        <references refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" compoundref="dbus-connection_8c" startline="254">DBusConnection::io_path_cond</references>
        <references refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" compoundref="dbus-connection_8c" startline="253">DBusConnection::io_path_mutex</references>
        <references refid="structDBusConnection_1af3bbd2ecba171ebb8e952eaa030971d7" compoundref="dbus-connection_8c" startline="290">DBusConnection::last_dispatch_status</references>
        <references refid="structDBusConnection_1ab5726e8d3ff6b08910899b7fe6d7293e" compoundref="dbus-connection_8c" startline="249">DBusConnection::mutex</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="295">DBusConnection::objects</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="266">DBusConnection::outgoing_counter</references>
        <references refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" compoundref="dbus-connection_8c" startline="277">DBusConnection::pending_replies</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="247">DBusConnection::refcount</references>
        <references refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" compoundref="dbus-connection_8c" startline="310">DBusConnection::route_peer_messages</references>
        <references refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" compoundref="dbus-connection_8c" startline="306">DBusConnection::shareable</references>
        <references refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" compoundref="dbus-connection_8c" startline="275">DBusConnection::slot_list</references>
        <references refid="structDBusConnection_1ad85b04cfea8a6a8efc5489f85b31122f" compoundref="dbus-connection_8c" startline="274">DBusConnection::slot_mutex</references>
        <references refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" compoundref="dbus-connection_8c" startline="270">DBusConnection::timeouts</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
        <references refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" compoundref="dbus-connection_8c" startline="269">DBusConnection::watches</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBusConnection* _dbus_connection_ref_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_ref_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Increments the reference count of a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Requires that the caller already holds the connection lock.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the connection. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1407" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1406" bodyend="1416"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2354" endline="2366">_dbus_atomic_inc</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" compoundref="dbus-connection_8c" startline="325">DBusConnection::generation</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="247">DBusConnection::refcount</references>
        <referencedby refid="group__DBusObjectTree_1ga3babe73ed342b6963997ef2efd73ef75" compoundref="dbus-object-tree_8c" startline="444" endline="522">_dbus_object_tree_unregister_and_unlock</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="94" endline="144">_dbus_pending_call_new_unlocked</referencedby>
        <referencedby refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" compoundref="dbus-transport_8c" startline="697" endline="785">_dbus_transport_get_is_authenticated</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_unref_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_unref_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Decrements the reference count of a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Requires that the caller already holds the connection lock.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1426" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1425" bodyend="1437"/>
        <references refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" compoundref="dbus-sysdeps-unix_8c" startline="2375" endline="2388">_dbus_atomic_dec</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="247">DBusConnection::refcount</references>
        <referencedby refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" compoundref="dbus-transport_8c" startline="697" endline="785">_dbus_transport_get_is_authenticated</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga5523cac5ad41408bfa285ac97293ed46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dbus_uint32_t</type>
        <definition>static dbus_uint32_t _dbus_connection_get_next_client_serial</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_get_next_client_serial</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1441" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1440" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_handle_watch</definition>
        <argsstring>(DBusWatch *watch, unsigned int condition, void *data)</argsstring>
        <name>_dbus_connection_handle_watch</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>A callback for use with dbus_watch_new() to create a <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000007"><xreftitle>Todo</xreftitle><xrefdescription><para>This is basically a hack - we could delete <ref refid="group__DBusTransport_1ga4a010098fe079eb6f201ff034d15fdff" kindref="member">_dbus_transport_handle_watch()</ref> and the virtual handle_watch in <ref refid="structDBusTransport" kindref="compound">DBusTransport</ref> if we got rid of it. The reason this is some work is threading, see the <ref refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" kindref="member">_dbus_connection_handle_watch()</ref> implementation.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the watch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>the current condition of the file descriptors being watched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a pointer to a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if the IO condition may not have been fully handled due to lack of memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1469" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1466" bodyend="1505"/>
        <references refid="group__DBusTransport_1ga4a010098fe079eb6f201ff034d15fdff" compoundref="dbus-transport_8c" startline="862" endline="888">_dbus_transport_handle_watch</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gabd4fff56a505b7d6aa8d0adfbb1d6c3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void close_connection_on_shutdown</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>close_connection_on_shutdown</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1513" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1512" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga8095cd57c65e347cbc526d807bc339ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void shared_connections_shutdown</definition>
        <argsstring>(void *data)</argsstring>
        <name>shared_connections_shutdown</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1529" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1528" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaa09684c4ae5605755b9e75c3b7d7ac21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t connection_lookup_shared</definition>
        <argsstring>(DBusAddressEntry *entry, DBusConnection **result)</argsstring>
        <name>connection_lookup_shared</name>
        <param>
          <type><ref refid="structDBusAddressEntry" kindref="compound">DBusAddressEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1579" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1577" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gab470b395ab53910dd790bae8ce610997" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t connection_record_shared_unlocked</definition>
        <argsstring>(DBusConnection *connection, const char *guid)</argsstring>
        <name>connection_record_shared_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1666" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1664" bodyend="1732"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaf55137a15282056a6f4034b782bb9bf5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void connection_forget_shared_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>connection_forget_shared_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1736" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1735" bodyend="1765"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga061f246a7a7d9d42e783f6cfbba2d034" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>static DBusConnection* connection_try_from_address_entry</definition>
        <argsstring>(DBusAddressEntry *entry, DBusError *error)</argsstring>
        <name>connection_try_from_address_entry</name>
        <param>
          <type><ref refid="structDBusAddressEntry" kindref="compound">DBusAddressEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1770" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1768" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga7f2ed7477b09dc7693d09565328d5490" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>static DBusConnection* _dbus_connection_open_internal</definition>
        <argsstring>(const char *address, dbus_bool_t shared, DBusError *error)</argsstring>
        <name>_dbus_connection_open_internal</name>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>shared</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1814" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1811" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gadc46f7abfe925f9860fc8c64aeb29ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_close_possibly_shared</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_close_possibly_shared</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Closes a shared OR private connection, while <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> can only be used on private connections. </para>        </briefdescription>
        <detaileddescription>
<para>Should only be called by the dbus code that owns the connection - an owner must be known, the open/close state is like malloc/free, not like ref/unref.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1905" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1904" bodyend="1911"/>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" compoundref="dbus-connection_8c" startline="325">DBusConnection::generation</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaff78b4673889d2bc16cc68f03aa32afd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
        <definition>static DBusPreallocatedSend* _dbus_connection_preallocate_send_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_preallocate_send_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1915" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1914" bodyend="1964"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gabcee6bb3b4a1183acf233f571a61fa67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_send_preallocated_unlocked_no_update</definition>
        <argsstring>(DBusConnection *connection, DBusPreallocatedSend *preallocated, DBusMessage *message, dbus_uint32_t *client_serial)</argsstring>
        <name>_dbus_connection_send_preallocated_unlocked_no_update</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
          <declname>preallocated</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>dbus_uint32_t *</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="1972" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="1968" bodyend="2037"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga8954e8db286afcc90414052fbc374bd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_send_preallocated_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusPreallocatedSend *preallocated, DBusMessage *message, dbus_uint32_t *client_serial)</argsstring>
        <name>_dbus_connection_send_preallocated_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
          <declname>preallocated</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>dbus_uint32_t *</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2044" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2040" bodyend="2058"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2974eb1c261305fafc635e14fc575d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_send_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message, dbus_uint32_t *client_serial)</argsstring>
        <name>_dbus_connection_send_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>dbus_uint32_t *</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member">dbus_connection_send()</ref>, but assumes the connection is already locked on function entry, and unlocks before returning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_serial</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for client serial of sent message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on out-of-memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2073" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2070" bodyend="2091"/>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" compoundref="dbus-connection_8c" startline="3244" endline="3270">dbus_connection_send</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga9f9665902c763bd1ddf9d9bc57d7a7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_close_if_only_one_ref</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_close_if_only_one_ref</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Used internally to handle the semantics of <ref refid="group__DBusServer_1gaa14d9109e04adccffd9a40460c28c53b" kindref="member">dbus_server_set_new_connection_function()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the new connection function does not ref the connection, we want to close it.</para><para>A bit of a hack, probably the new connection function should have returned a value for whether to close, or should have had to close the connection itself if it didn&apos;t want it.</para><para>But, this works OK as long as the new connection function doesn&apos;t do anything crazy like keep the connection around without ref&apos;ing it.</para><para>We have to lock the connection across refcount check and close in case the new connection function spawns a thread that closes and unrefs. In that case, if the app thread closes and unrefs first, we&apos;ll harmlessly close again; if the app thread still has the ref, we&apos;ll close and then the app will close harmlessly. If the app unrefs without closing, the app is broken since if the app refs from the new connection function it is supposed to also close.</para><para>If we didn&apos;t atomically check the refcount and close with the lock held though, we could screw this up.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2119" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2118" bodyend="2132"/>
        <references refid="group__DBusSysdeps_1ga626c810359ba0e362367ce2ec6691aca" compoundref="dbus-sysdeps-unix_8c" startline="2398" endline="2411">_dbus_atomic_get</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="247">DBusConnection::refcount</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga8ab04586ec46c6c6fd633ae8419717f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_memory_pause_based_on_timeout</definition>
        <argsstring>(int timeout_milliseconds)</argsstring>
        <name>_dbus_memory_pause_based_on_timeout</name>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>When a function that blocks has been called with a timeout, and we run out of memory, the time to wait for memory is based on the timeout. </para>        </briefdescription>
        <detaileddescription>
<para>If the caller was willing to block a long time we wait a relatively long time for memory, if they were only willing to block briefly then we retry for memory at a rapid rate.</para><para>the timeout requested for blocking </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2146" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2145" bodyend="2155"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3a0f1530f6e0da5cf1f690324de94023" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>static DBusMessage* generate_local_error_message</definition>
        <argsstring>(dbus_uint32_t serial, char *error_name, char *error_msg)</argsstring>
        <name>generate_local_error_message</name>
        <param>
          <type>dbus_uint32_t</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>error_name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>error_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2161" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2158" bodyend="2201"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga93c2fba8d3ad59f4d239f5e8a0d06d1f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>static DBusMessage* check_for_reply_unlocked</definition>
        <argsstring>(DBusConnection *connection, dbus_uint32_t client_serial)</argsstring>
        <name>check_for_reply_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>dbus_uint32_t</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2236" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2234" bodyend="2257"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga10fefadb2798c1408b4fb7806c93e466" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void connection_timeout_and_complete_all_pending_calls_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>connection_timeout_and_complete_all_pending_calls_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2261" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2260" bodyend="2291"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga7ce8e7325dce58eeb45a5fc6fb533f38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void complete_pending_call_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending, DBusMessage *message)</argsstring>
        <name>complete_pending_call_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2297" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2294" bodyend="2305"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3dfc6e8ebd1d91154e2de2d6e2b63a03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t check_for_reply_and_update_dispatch_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>check_for_reply_and_update_dispatch_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2310" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2308" bodyend="2334"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_block_pending_call</definition>
        <argsstring>(DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_block_pending_call</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Blocks until a pending call times out or gets a reply. </para>        </briefdescription>
        <detaileddescription>
<para>Does not re-enter the main loop or run filter/path-registered callbacks. The reply to the message will not be seen by filter callbacks.</para><para>Returns immediately if pending call already got a reply.</para><para><xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>could use performance improvements (it keeps scanning the whole message queue for example)</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call we block for a reply on </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2352" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2351" bodyend="2522"/>
        <references refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" compoundref="dbus-connection_8c" startline="1186" endline="1225">_dbus_connection_do_iteration_unlocked</references>
        <references refid="group__DBusSysdeps_1ga4e3cbe529fc3e7984ed6553672e085f8" compoundref="dbus-sysdeps-unix_8c" startline="2532" endline="2553">_dbus_get_current_time</references>
        <references refid="group__DBusPendingCallInternals_1ga37bef4359b3c29629a57f5fe480690a1" compoundref="dbus-pending-call_8c" startline="455" endline="458">_dbus_pending_call_get_completed_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga68e5ff616e6a6563d83966c3d88b9b32" compoundref="dbus-pending-call_8c" startline="306" endline="312">_dbus_pending_call_get_connection_and_lock</references>
        <references refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" compoundref="dbus-pending-call_8c" startline="276" endline="281">_dbus_pending_call_get_reply_serial_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" compoundref="dbus-pending-call_8c" startline="262" endline="267">_dbus_pending_call_get_timeout_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" compoundref="dbus-connection_8h" startline="80">DBUS_DISPATCH_DATA_REMAINS</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" compoundref="dbus-connection_8h" startline="82">DBUS_DISPATCH_NEED_MEMORY</references>
        <references refid="group__DBusProtocol_1gaef6443e0bd8cdcc1606d985a775d07a7" compoundref="dbus-protocol_8h" startline="384">DBUS_ERROR_DISCONNECTED</references>
        <references refid="group__DBusPendingCall_1gacbf33ae8a1cc125628f9ea44d175c159" compoundref="dbus-pending-call_8c" startline="644" endline="655">dbus_pending_call_get_completed</references>
        <references refid="group__DBusPendingCall_1ga334f6c6621583e15fdaf1a3f93dd2221" compoundref="dbus-pending-call_8c" startline="552" endline="559">dbus_pending_call_ref</references>
        <references refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" compoundref="dbus-pending-call_8c" startline="568" endline="578">dbus_pending_call_unref</references>
        <references refid="group__DBusTimeout_1ga67ba21b6189438875c6007ee79da5e37" compoundref="dbus-timeout_8c" startline="416" endline="419">dbus_timeout_get_interval</references>
        <references refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" compoundref="dbus-connection_8c" startline="280">DBusConnection::disconnect_message_link</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusPendingCall_1ga67b99f749a7f477c7b5d70f2acee5452" compoundref="dbus-pending-call_8c" startline="701" endline="706">dbus_pending_call_block</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBUS_EXPORT DBusConnection * dbus_connection_open</definition>
        <argsstring>(const char *address, DBusError *error)</argsstring>
        <name>dbus_connection_open</name>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Gets a connection to a remote address. </para>        </briefdescription>
        <detaileddescription>
<para>If a connection to the given address already exists, returns the existing connection with its reference count incremented. Otherwise, returns a new connection and saves the new connection for possible re-use if a future call to <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> asks to connect to the same server.</para><para>Use <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> to get a dedicated connection not shared with other callers of <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref>.</para><para>If the open fails, the function returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, and provides a reason for the failure in the error parameter. Pass <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for the error parameter if you aren&apos;t interested in the reason for failure.</para><para>Because this connection is shared, no user of the connection may call <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref>. However, when you are done with the connection you should call <ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member">dbus_connection_unref()</ref>.</para><para><simplesect kind="note"><para>Prefer <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> to <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> unless you have good reason; connections are expensive enough that it&apos;s wasteful to create lots of connections to the same server.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the address. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new connection, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2563" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2561" bodyend="2574"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBUS_EXPORT DBusConnection * dbus_connection_open_private</definition>
        <argsstring>(const char *address, DBusError *error)</argsstring>
        <name>dbus_connection_open_private</name>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Opens a new, dedicated connection to a remote address. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref>, always creates a new connection. This connection will not be saved or recycled by libdbus.</para><para>If the open fails, the function returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, and provides a reason for the failure in the error parameter. Pass <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for the error parameter if you aren&apos;t interested in the reason for failure.</para><para>When you are done with this connection, you must <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> to disconnect it, and <ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member">dbus_connection_unref()</ref> to free the connection object.</para><para>(The <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> can be skipped if the connection is already known to be disconnected, for example if you are inside a handler for the Disconnected signal.)</para><para><simplesect kind="note"><para>Prefer <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> to <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> unless you have good reason; connections are expensive enough that it&apos;s wasteful to create lots of connections to the same server.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the address. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new connection, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2606" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2604" bodyend="2617"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBUS_EXPORT DBusConnection * dbus_connection_ref</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_ref</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Increments the reference count of a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the connection. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2627" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2626" bodyend="2634"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2354" endline="2366">_dbus_atomic_inc</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" compoundref="dbus-connection_8c" startline="325">DBusConnection::generation</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="247">DBusConnection::refcount</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaefc5f0c28f15085dc162e48f5110b58b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void free_outgoing_message</definition>
        <argsstring>(void *element, void *data)</argsstring>
        <name>free_outgoing_message</name>
        <param>
          <type>void *</type>
          <declname>element</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2639" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2637" bodyend="2647"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_unref</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_unref</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Decrements the reference count of a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>, and finalizes it if the count reaches zero. </para>        </briefdescription>
        <detaileddescription>
<para>Note: it is a bug to drop the last reference to a connection that is still connected.</para><para>For shared connections, libdbus will own a reference as long as the connection is connected, so you can know that either you don&apos;t have the last reference, or it&apos;s OK to drop the last reference. Most connections are shared. <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> and <ref refid="group__DBusBus_1ga77ba5250adb84620f16007e1b023cf26" kindref="member">dbus_bus_get()</ref> return shared connections.</para><para>For private connections, the creator of the connection must arrange for <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> to be called prior to dropping the last reference. Private connections come from <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> or <ref refid="group__DBusBus_1ga9c62186f19cf3bd3c7c604bdcefb4e09" kindref="member">dbus_bus_get_private()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2763" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2762" bodyend="2785"/>
        <references refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" compoundref="dbus-sysdeps-unix_8c" startline="2375" endline="2388">_dbus_atomic_dec</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" compoundref="dbus-transport_8c" startline="523" endline="526">_dbus_transport_get_is_connected</references>
        <references refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="272" endline="291">_dbus_warn_check_failed</references>
        <references refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" compoundref="dbus-connection_8c" startline="325">DBusConnection::generation</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="247">DBusConnection::refcount</references>
        <references refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" compoundref="dbus-connection_8c" startline="306">DBusConnection::shareable</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
        <referencedby refid="group__DBusObjectTree_1ga3babe73ed342b6963997ef2efd73ef75" compoundref="dbus-object-tree_8c" startline="444" endline="522">_dbus_object_tree_unregister_and_unlock</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_close</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_close</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Closes a private connection, so no further data can be sent or received. </para>        </briefdescription>
        <detaileddescription>
<para>This disconnects the transport (such as a socket) underlying the connection.</para><para>Attempts to send messages after closing a connection are safe, but will result in error replies generated locally in libdbus.</para><para>This function does not affect the connection&apos;s reference count. It&apos;s safe to close a connection more than once; all calls after the first do nothing. It&apos;s impossible to &quot;reopen&quot; a connection, a new connection must be created. This function may result in a call to the DBusDispatchStatusFunction set with <ref refid="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" kindref="member">dbus_connection_set_dispatch_status_function()</ref>, as the disconnect message it generates needs to be dispatched.</para><para>If a connection is dropped by the remote application, it will close itself.</para><para>You must close a connection prior to releasing the last reference to the connection. If you <ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member">dbus_connection_unref()</ref> for the last time without closing the connection, the results are undefined; it is a bug in your program and libdbus will try to print a warning.</para><para>You may not close a shared connection. Connections created with <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> or <ref refid="group__DBusBus_1ga77ba5250adb84620f16007e1b023cf26" kindref="member">dbus_bus_get()</ref> are shared. These connections are owned by libdbus, and applications should only unref them, never close them. Applications can know it is safe to unref these connections because libdbus will be holding a reference as long as the connection is open. Thus, either the connection is closed and it is OK to drop the last reference, or the connection is open and the app knows it does not have the last reference.</para><para>Connections created with <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> or <ref refid="group__DBusBus_1ga9c62186f19cf3bd3c7c604bdcefb4e09" kindref="member">dbus_bus_get_private()</ref> are not kept track of or referenced by libdbus. The creator of these connections is responsible for calling <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> prior to releasing the last reference, if the connection is not already disconnected.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the private (unshared) connection to close </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2875" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2874" bodyend="2892"/>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="709">_dbus_current_generation</references>
        <references refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="272" endline="291">_dbus_warn_check_failed</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" compoundref="dbus-connection_8c" startline="325">DBusConnection::generation</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" compoundref="dbus-connection_8c" startline="306">DBusConnection::shareable</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga611ae94556af36fe30bfb547366ca4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_is_connected</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_is_connected</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets whether the connection is currently open. </para>        </briefdescription>
        <detaileddescription>
<para>A connection may become disconnected when the remote application closes its end, or exits; a connection may also be disconnected with <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref>.</para><para>There are not separate states for &quot;closed&quot; and &quot;disconnected,&quot; the two terms are synonymous. This function should really be called get_is_open() but for historical reasons is not.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the connection is still alive. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2916" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2915" bodyend="2926"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2f1fa02c9897b6f07f4d33c862de4a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_is_authenticated</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_is_authenticated</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets whether the connection was authenticated. </para>        </briefdescription>
        <detaileddescription>
<para>(Note that if the connection was authenticated then disconnected, this function still returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the connection was ever authenticated </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2938" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2937" bodyend="2948"/>
        <references refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" compoundref="dbus-transport_8c" startline="697" endline="785">_dbus_transport_get_is_authenticated</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaa6c5d523e16d8a5b9316c92d9ff1ac17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_is_anonymous</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_is_anonymous</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets whether the connection is not authenticated as a specific user. </para>        </briefdescription>
        <detaileddescription>
<para>If the connection is not authenticated, this function returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>, and if it is authenticated but as an anonymous user, it returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>. If it is authenticated as a specific user, then this returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>. (Note that if the connection was authenticated as anonymous then disconnected, this function still returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>.)</para><para>If the connection is not anonymous, you can use <ref refid="group__DBusConnection_1gaef670c3a8170ab9c719ec955252459d0" kindref="member">dbus_connection_get_unix_user()</ref> and <ref refid="group__DBusConnection_1ga2b3cb488f1922aeecdeafdcb110e91a8" kindref="member">dbus_connection_get_windows_user()</ref> to see who it&apos;s authorized as.</para><para>If you want to prevent non-anonymous authorization, use <ref refid="group__DBusServer_1ga309e5f1510c74c4b221d12d874d53341" kindref="member">dbus_server_set_auth_mechanisms()</ref> to remove the mechanisms that allow proving user identity (i.e. only allow the ANONYMOUS mechanism).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if not authenticated or authenticated as anonymous </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="2972" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="2971" bodyend="2982"/>
        <references refid="group__DBusTransport_1gaf0588dd4a6d1c556dd885d4c67622399" compoundref="dbus-transport_8c" startline="794" endline="807">_dbus_transport_get_is_anonymous</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gae6c19e146a37f9de6a06c1617874bed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>DBUS_EXPORT char * dbus_connection_get_server_id</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_server_id</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the ID of the server address we are authenticated to, if this connection is on the client side. </para>        </briefdescription>
        <detaileddescription>
<para>If the connection is on the server side, this will always return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> - use <ref refid="group__DBusServer_1ga3b2920b3c65836113781d9dd00d1e139" kindref="member">dbus_server_get_id()</ref> to get the ID of your own server, if you are the server side.</para><para>If a client-side connection is not authenticated yet, the ID may be available if it was included in the server address, but may not be available. The only way to be sure the server ID is available is to wait for authentication to complete.</para><para>In general, each mode of connecting to a given server will have its own ID. So for example, if the session bus daemon is listening on UNIX domain sockets and on TCP, then each of those modalities will have its own server ID.</para><para>If you want an ID that identifies an entire session bus, look at <ref refid="group__DBusBus_1ga18314500e7f6890a79bddbeace5df5f9" kindref="member">dbus_bus_get_id()</ref> instead (which is just a convenience wrapper around the org.freedesktop.DBus.GetId method invoked on the bus).</para><para>You can also get a machine ID; see <ref refid="group__DBusMisc_1ga2b21c9a12fea5f92763441c65ccbfcf9" kindref="member">dbus_get_local_machine_id()</ref> to get the machine you are on. There isn&apos;t a convenience wrapper, but you can invoke org.freedesktop.DBus.Peer.GetMachineId on any peer to get the machine ID on the other end.</para><para>The D-Bus specification describes the server ID and other IDs in a bit more detail.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the server ID or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if no memory or the connection is server-side </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3017" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3016" bodyend="3027"/>
        <references refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" compoundref="dbus-internals_8c" startline="480" endline="497">_dbus_strdup</references>
        <references refid="group__DBusTransport_1ga920abde00e77a970330fa3fc552fe7ea" compoundref="dbus-transport_8c" startline="842" endline="850">_dbus_transport_get_server_id</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga3e41509b3afdbc22872bacc5754e85c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_can_send_type</definition>
        <argsstring>(DBusConnection *connection, int type)</argsstring>
        <name>dbus_connection_can_send_type</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Tests whether a certain type can be send via the connection. </para>        </briefdescription>
        <detaileddescription>
<para>This will always return TRUE for all types, with the exception of DBUS_TYPE_UNIX_FD. The function will return TRUE for DBUS_TYPE_UNIX_FD only on systems that know Unix file descriptors and can send them via the chosen transport and when the remote side supports this.</para><para>This function can be used to do runtime checking for types that might be unknown to the specific D-Bus client implementation version, i.e. it will return FALSE for all types this implementation does not know, including invalid or reserved types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the type may be send via the connection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3049" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3047" bodyend="3071"/>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="816" endline="819">_dbus_transport_can_pass_unix_fd</references>
        <references refid="group__DBusMarshal_1gaa1bf18d3c95d4d4632fbdfe3a1d22bed" compoundref="dbus-marshal-basic_8c" startline="1280" endline="1306">_dbus_type_is_valid</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusProtocol_1ga59f8acaeb207b182982dfb97174b7f16" compoundref="dbus-protocol_8h" startline="114">DBUS_TYPE_UNIX_FD</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga19091beb74f1504b0e862a7ad10e71cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_exit_on_disconnect</definition>
        <argsstring>(DBusConnection *connection, dbus_bool_t exit_on_disconnect)</argsstring>
        <name>dbus_connection_set_exit_on_disconnect</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>exit_on_disconnect</declname>
        </param>
        <briefdescription>
<para>Set whether _exit() should be called when the connection receives a disconnect signal. </para>        </briefdescription>
        <detaileddescription>
<para>The call to _exit() comes after any handlers for the disconnect signal run; handlers can cancel the exit by calling this function.</para><para>By default, exit_on_disconnect is <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>; but for message bus connections returned from <ref refid="group__DBusBus_1ga77ba5250adb84620f16007e1b023cf26" kindref="member">dbus_bus_get()</ref> it will be toggled on by default.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exit_on_disconnect</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if _exit() should be called after a disconnect signal </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3089" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3087" bodyend="3095"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" compoundref="dbus-connection_8c" startline="308">DBusConnection::exit_on_disconnect</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6136968eba30e8313e668a622fcfb08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
        <definition>DBUS_EXPORT DBusPreallocatedSend * dbus_connection_preallocate_send</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_preallocate_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Preallocates resources needed to send a message, allowing the message to be sent without the possibility of memory allocation failure. </para>        </briefdescription>
        <detaileddescription>
<para>Allows apps to create a future guarantee that they can send a message regardless of memory shortages.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection we&apos;re preallocating for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the preallocated resources, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3108" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3107" bodyend="3121"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gad0ea06307b418616711131ea7bdae8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_free_preallocated_send</definition>
        <argsstring>(DBusConnection *connection, DBusPreallocatedSend *preallocated)</argsstring>
        <name>dbus_connection_free_preallocated_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
          <declname>preallocated</declname>
        </param>
        <briefdescription>
<para>Frees preallocated message-sending resources from <ref refid="group__DBusConnection_1ga6136968eba30e8313e668a622fcfb08d" kindref="member">dbus_connection_preallocate_send()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Should only be called if the preallocated resources are not used to send a message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preallocated</parametername>
</parameternamelist>
<parameterdescription>
<para>the resources </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3135" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3133" bodyend="3144"/>
        <references refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" compoundref="dbus-resources_8c" startline="125" endline="136">_dbus_counter_unref</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="231" endline="234">_dbus_list_free_link</references>
        <references refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" compoundref="dbus-connection_8c" startline="231">DBusPreallocatedSend::connection</references>
        <references refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" compoundref="dbus-connection_8c" startline="233">DBusPreallocatedSend::counter_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="629" endline="668">dbus_free</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" compoundref="dbus-connection_8c" startline="232">DBusPreallocatedSend::queue_link</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2fea5f972d1bfe7bcde8c0ec65ca9e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_send_preallocated</definition>
        <argsstring>(DBusConnection *connection, DBusPreallocatedSend *preallocated, DBusMessage *message, dbus_uint32_t *client_serial)</argsstring>
        <name>dbus_connection_send_preallocated</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
          <declname>preallocated</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>dbus_uint32_t *</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
<para>Sends a message using preallocated resources. </para>        </briefdescription>
        <detaileddescription>
<para>This function cannot fail. It works identically to <ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member">dbus_connection_send()</ref> in other respects. Preallocated resources comes from <ref refid="group__DBusConnection_1ga6136968eba30e8313e668a622fcfb08d" kindref="member">dbus_connection_preallocate_send()</ref>. This function &quot;consumes&quot; the preallocated resources, they need not be freed separately.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preallocated</parametername>
</parameternamelist>
<parameterdescription>
<para>the preallocated resources </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_serial</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for client serial assigned to the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3163" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3159" bodyend="3193"/>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="816" endline="819">_dbus_transport_can_pass_unix_fd</references>
        <references refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" compoundref="dbus-connection_8c" startline="231">DBusPreallocatedSend::connection</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3083" endline="3095">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3169" endline="3181">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1580" endline="1585">dbus_message_get_type</references>
        <references refid="group__DBusProtocol_1ga09416afd76b65139eddd31e1085d9ebf" compoundref="dbus-protocol_8h" startline="234">DBUS_MESSAGE_TYPE_METHOD_CALL</references>
        <references refid="group__DBusProtocol_1ga728d893ff0c00e126517ba39835220a5" compoundref="dbus-protocol_8h" startline="240">DBUS_MESSAGE_TYPE_SIGNAL</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaece6c024be1c0b6bf8801815e13d7952" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_send_unlocked_no_update</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message, dbus_uint32_t *client_serial)</argsstring>
        <name>_dbus_connection_send_unlocked_no_update</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>dbus_uint32_t *</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3199" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3196" bodyend="3214"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_send</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message, dbus_uint32_t *serial)</argsstring>
        <name>dbus_connection_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>dbus_uint32_t *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Adds a message to the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Does not block to write the message to the network; that happens asynchronously. To force the message to be written, call <ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush()</ref> however it is not necessary to call <ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush()</ref> by hand; the message will be sent the next time the main loop is run. <ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush()</ref> should only be used, for example, if the application was expected to exit before running the main loop.</para><para>Because this only queues the message, the only reason it can fail is lack of memory. Even if the connection is disconnected, no error will be returned. If the function fails due to lack of memory, it returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>. The function will never fail for other reasons; even if the connection is disconnected, you can queue an outgoing message, though obviously it won&apos;t be sent.</para><para>The message serial is used by the remote application to send a reply; see <ref refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" kindref="member">dbus_message_get_serial()</ref> or the D-Bus specification.</para><para><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member">dbus_message_unref()</ref> can be called as soon as this method returns as the message queue will hold its own ref until the message is sent.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for message serial, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if you don&apos;t care </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3247" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3244" bodyend="3270"/>
        <references refid="group__DBusConnectionInternals_1ga2974eb1c261305fafc635e14fc575d03" compoundref="dbus-connection_8c" startline="2070" endline="2091">_dbus_connection_send_and_unlock</references>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="816" endline="819">_dbus_transport_can_pass_unix_fd</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaef085ace36a7e442c07e2434113db28b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t reply_handler_timeout</definition>
        <argsstring>(void *data)</argsstring>
        <name>reply_handler_timeout</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3274" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3273" bodyend="3294"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_send_with_reply</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message, DBusPendingCall **pending_return, int timeout_milliseconds)</argsstring>
        <name>dbus_connection_send_with_reply</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> **</type>
          <declname>pending_return</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>Queues a message to send, as with <ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member">dbus_connection_send()</ref>, but also returns a <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> used to receive a reply to the message. </para>        </briefdescription>
        <detaileddescription>
<para>If no reply is received in the given timeout_milliseconds, this function expires the pending reply and generates a synthetic error reply (generated in-process, not by the remote application) indicating that a timeout occurred.</para><para>A <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> will see a reply message before any filters or registered object path handlers. See <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> for details on when handlers are run.</para><para>A <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> will always see exactly one reply message, unless it&apos;s cancelled with <ref refid="group__DBusPendingCall_1ga6530d18f891d3ca5f5df87ea7c2b155c" kindref="member">dbus_pending_call_cancel()</ref>.</para><para>If <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> is passed for the pending_return, the <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> will still be generated internally, and used to track the message reply timeout. This means a timeout error will occur if no reply arrives, unlike with <ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member">dbus_connection_send()</ref>.</para><para>If -1 is passed for the timeout, a sane default timeout is used. -1 is typically the best value for the timeout for this reason, unless you want a very short or very long timeout. If <ref refid="group__DBusPendingCall_1ga21384c9c5b0da54f7d0a92012522f213" kindref="member">DBUS_TIMEOUT_INFINITE</ref> is passed for the timeout, no timeout will be set and the call will block forever.</para><para><simplesect kind="warning"><para>if the connection is disconnected or you try to send Unix file descriptors on a connection that does not support them, the <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> will be set to <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, so be careful with this.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pending_return</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for a <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> object, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if connection is disconnected or when you try to send Unix file descriptors on a connection that does not support them. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds, -1 (or <ref refid="group__DBusPendingCall_1gabdc138a303699e88756d6c5988a16b05" kindref="member">DBUS_TIMEOUT_USE_DEFAULT</ref>) for default or <ref refid="group__DBusPendingCall_1ga21384c9c5b0da54f7d0a92012522f213" kindref="member">DBUS_TIMEOUT_INFINITE</ref> for no timeout </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory, <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3343" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3339" bodyend="3440"/>
        <references refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="94" endline="144">_dbus_pending_call_new_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga9901fc4c5fd2db9bf1ce2dcc9abf55fc" compoundref="dbus-pending-call_8c" startline="337" endline="365">_dbus_pending_call_set_timeout_error_unlocked</references>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="816" endline="819">_dbus_transport_can_pass_unix_fd</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" compoundref="dbus-message_8c" startline="989" endline="994">dbus_message_get_serial</references>
        <references refid="group__DBusMessageInternals_1ga3dd30a62c63eb9972cc0c564f2a89c3b" compoundref="dbus-message_8c" startline="203" endline="210">dbus_message_set_serial</references>
        <references refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" compoundref="dbus-pending-call_8c" startline="568" endline="578">dbus_pending_call_unref</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" compoundref="dbus-connection_8c" startline="3475" endline="3532">dbus_connection_send_with_reply_and_block</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>DBUS_EXPORT DBusMessage * dbus_connection_send_with_reply_and_block</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message, int timeout_milliseconds, DBusError *error)</argsstring>
        <name>dbus_connection_send_with_reply_and_block</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Sends a message and blocks a certain time period while waiting for a reply. </para>        </briefdescription>
        <detaileddescription>
<para>This function does not reenter the main loop, i.e. messages other than the reply are queued up but not processed. This function is used to invoke method calls on a remote object.</para><para>If a normal reply is received, it is returned, and removed from the incoming message queue. If it is not received, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> is returned and the error is set to <ref refid="group__DBusProtocol_1gade2cb1c5a6adf47af18672865f233b6d" kindref="member">DBUS_ERROR_NO_REPLY</ref>. If an error reply is received, it is converted to a <ref refid="structDBusError" kindref="compound">DBusError</ref> and returned as an error, then the reply message is deleted and <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> is returned. If something else goes wrong, result is set to whatever is appropriate, such as <ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1gaef6443e0bd8cdcc1606d985a775d07a7" kindref="member">DBUS_ERROR_DISCONNECTED</ref>.</para><para><simplesect kind="warning"><para>While this function blocks the calling thread will not be processing the incoming message queue. This means you can end up deadlocked if the application you&apos;re talking to needs you to reply to a method. To solve this, either avoid the situation, block in a separate thread from the main connection-dispatching thread, or use <ref refid="group__DBusPendingCall_1ga16b67b418b1dc27cfdda6b20f7447670" kindref="member">dbus_pending_call_set_notify()</ref> to avoid blocking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds, -1 (or <ref refid="group__DBusPendingCall_1gabdc138a303699e88756d6c5988a16b05" kindref="member">DBUS_TIMEOUT_USE_DEFAULT</ref>) for default or <ref refid="group__DBusPendingCall_1ga21384c9c5b0da54f7d0a92012522f213" kindref="member">DBUS_TIMEOUT_INFINITE</ref> for no timeout </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for error message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the message that is the reply or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> with an error code if the function fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3479" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3475" bodyend="3532"/>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="816" endline="819">_dbus_transport_can_pass_unix_fd</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" compoundref="dbus-connection_8c" startline="3339" endline="3440">dbus_connection_send_with_reply</references>
        <references refid="group__DBusProtocol_1gaef6443e0bd8cdcc1606d985a775d07a7" compoundref="dbus-protocol_8h" startline="384">DBUS_ERROR_DISCONNECTED</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="350">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1550" endline="1567">dbus_message_unref</references>
        <references refid="group__DBusPendingCall_1ga67b99f749a7f477c7b5d70f2acee5452" compoundref="dbus-pending-call_8c" startline="701" endline="706">dbus_pending_call_block</references>
        <references refid="group__DBusPendingCall_1ga5a738928c2369fef093ce00658903d06" compoundref="dbus-pending-call_8c" startline="667" endline="683">dbus_pending_call_steal_reply</references>
        <references refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" compoundref="dbus-pending-call_8c" startline="568" endline="578">dbus_pending_call_unref</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="420">dbus_set_error</references>
        <references refid="group__DBusMessage_1gaba5e49e956e6bbd1f857ffd21c289276" compoundref="dbus-message_8c" startline="3652" endline="3672">dbus_set_error_from_message</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
        <referencedby refid="group__DBusBus_1ga18314500e7f6890a79bddbeace5df5f9" compoundref="dbus-bus_8c" startline="941" endline="1000">dbus_bus_get_id</referencedby>
        <referencedby refid="group__DBusBus_1ga24d782c710f3d82caf1b1ed582dcf474" compoundref="dbus-bus_8c" startline="858" endline="920">dbus_bus_get_unix_user</referencedby>
        <referencedby refid="group__DBusBus_1ga5331b172dd8ed00eec130e894c5c2a0b" compoundref="dbus-bus_8c" startline="1273" endline="1324">dbus_bus_name_has_owner</referencedby>
        <referencedby refid="group__DBusBus_1ga0c21cf74d05c0bd8003846b56a588a4b" compoundref="dbus-bus_8c" startline="652" endline="730">dbus_bus_register</referencedby>
        <referencedby refid="group__DBusBus_1gaa4aa5ebe51cdbe8c0651609fc72e841a" compoundref="dbus-bus_8c" startline="1191" endline="1253">dbus_bus_release_name</referencedby>
        <referencedby refid="group__DBusBus_1ga8a9024c78c4ea89b6271f19dbc7861b2" compoundref="dbus-bus_8c" startline="1105" endline="1169">dbus_bus_request_name</referencedby>
        <referencedby refid="group__DBusBus_1ga81d303bf29d7c97ad4690ce35071b090" compoundref="dbus-bus_8c" startline="1349" endline="1402">dbus_bus_start_service_by_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_flush</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_flush</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Blocks until the outgoing message queue is empty. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3582" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3581" bodyend="3601"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga87c108f808f02c23af6b172d9732bdd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_read_write_dispatch</definition>
        <argsstring>(DBusConnection *connection, int timeout_milliseconds, dbus_bool_t dispatch)</argsstring>
        <name>_dbus_connection_read_write_dispatch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>dispatch</declname>
        </param>
        <briefdescription>
<para>This function implements <ref refid="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" kindref="member">dbus_connection_read_write_dispatch()</ref> and <ref refid="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" kindref="member">dbus_connection_read_write()</ref> (they pass a different value for the dispatch parameter). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>max time to block or -1 for infinite </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dispatch</parametername>
</parameternamelist>
<parameterdescription>
<para>dispatch new messages or leave them on the incoming queue </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the disconnect message has not been processed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3617" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3614" bodyend="3671"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_read_write_dispatch</definition>
        <argsstring>(DBusConnection *connection, int timeout_milliseconds)</argsstring>
        <name>dbus_connection_read_write_dispatch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>This function is intended for use with applications that don&apos;t want to write a main loop and deal with <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> and <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>An example usage would be:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" kindref="member" tooltip="This function is intended for use with applications that don&amp;#39;t want to write a main loop and deal wit...">dbus_connection_read_write_dispatch</ref><sp/>(connection,<sp/>-1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>;<sp/></highlight><highlight class="comment">//<sp/>empty<sp/>loop<sp/>body</highlight></codeline>
</programlisting></para><para>In this usage you would normally have set up a filter function to look at each message as it is dispatched. The loop terminates when the last message from the connection (the disconnected signal) is processed.</para><para>If there are messages to dispatch, this function will <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> once, and return. If there are no messages to dispatch, this function will block until it can read or write, then read or write, then return.</para><para>The way to think of this function is that it either makes some sort of progress, or it blocks. Note that, while it is blocked on I/O, it cannot be interrupted (even by other threads), which makes this function unsuitable for applications that do more than just react to received messages.</para><para>The return value indicates whether the disconnect message has been processed, NOT whether the connection is connected. This is important because even after disconnecting, you want to process any messages you received prior to the disconnect.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>max time to block or -1 for infinite </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the disconnect message has not been processed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3711" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3709" bodyend="3715"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_read_write</definition>
        <argsstring>(DBusConnection *connection, int timeout_milliseconds)</argsstring>
        <name>dbus_connection_read_write</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>This function is intended for use with applications that don&apos;t want to write a main loop and deal with <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> and <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>See also <ref refid="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" kindref="member">dbus_connection_read_write_dispatch()</ref>.</para><para>As long as the connection is open, this function will block until it can read or write, then read or write, then return <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>.</para><para>If the connection is closed, the function returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>.</para><para>The return value indicates whether reading or writing is still possible, i.e. whether the connection is connected.</para><para>Note that even after disconnection, messages may remain in the incoming queue that need to be processed. <ref refid="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" kindref="member">dbus_connection_read_write_dispatch()</ref> dispatches incoming messages for you; with <ref refid="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" kindref="member">dbus_connection_read_write()</ref> you have to arrange to drain the incoming queue yourself.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>max time to block or -1 for infinite </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if still connected </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3743" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3741" bodyend="3747"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga36357eedba8a04860efbf65be6103f70" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void check_disconnected_message_arrived_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *head_of_queue)</argsstring>
        <name>check_disconnected_message_arrived_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>head_of_queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3757" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3755" bodyend="3768"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>DBUS_EXPORT DBusMessage * dbus_connection_borrow_message</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_borrow_message</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Returns the first-received message from the incoming message queue, leaving it in the queue. </para>        </briefdescription>
        <detaileddescription>
<para>If the queue is empty, returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para>The caller does not own a reference to the returned message, and must either return it using <ref refid="group__DBusConnection_1ga0586da03a01c9c6f332fbea900ef55e3" kindref="member">dbus_connection_return_message()</ref> or keep it after calling <ref refid="group__DBusConnection_1ga7125d747575b2f596aceaf7be53eae68" kindref="member">dbus_connection_steal_borrowed_message()</ref>. No one can get at the message while its borrowed, so return it as quickly as possible and don&apos;t keep a reference to it after returning it. If you need to keep the message, make a copy of it.</para><para><ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> will block if called while a borrowed message is outstanding; only one piece of code can be playing with the incoming queue at a time. This function will block if called during a <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next message in the incoming queue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3791" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3790" bodyend="3828"/>
        <references refid="group__DBusList_1ga254e18f698f5fc518bde031e723e67c6" compoundref="dbus-list_8c" startline="620" endline="626">_dbus_list_get_first</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" compoundref="dbus-connection_8c" startline="4304" endline="4319">dbus_connection_get_dispatch_status</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" compoundref="dbus-connection_8h" startline="80">DBUS_DISPATCH_DATA_REMAINS</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="257">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" compoundref="dbus-connection_8c" startline="259">DBusConnection::message_borrowed</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga0586da03a01c9c6f332fbea900ef55e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_return_message</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message)</argsstring>
        <name>dbus_connection_return_message</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Used to return a message after peeking at it using <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Only called if message from <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref> was non-<ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message from <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3841" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3839" bodyend="3859"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" compoundref="dbus-connection_8c" startline="303">DBusConnection::dispatch_acquired</references>
        <references refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" compoundref="dbus-connection_8c" startline="259">DBusConnection::message_borrowed</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga7125d747575b2f596aceaf7be53eae68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_steal_borrowed_message</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message)</argsstring>
        <name>dbus_connection_steal_borrowed_message</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Used to keep a message after peeking at it using <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Before using this function, see the caveats/warnings in the documentation for <ref refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" kindref="member">dbus_connection_pop_message()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message from <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3873" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3871" bodyend="3900"/>
        <references refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" compoundref="dbus-list_8c" startline="657" endline="670">_dbus_list_pop_first</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" compoundref="dbus-connection_8c" startline="303">DBusConnection::dispatch_acquired</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="257">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" compoundref="dbus-connection_8c" startline="259">DBusConnection::message_borrowed</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="264">DBusConnection::n_incoming</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga741365bc9c7a535cd8510a8bf88c48cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>static DBusList* _dbus_connection_pop_message_link_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_pop_message_link_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3907" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3906" bodyend="3940"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga73950951615c08e47069a2249a9a386d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>static DBusMessage* _dbus_connection_pop_message_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_pop_message_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3947" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3946" bodyend="3966"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gad62c3ff7d1b6a0b8f017790bb847342e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_putback_message_link_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusList *message_link)</argsstring>
        <name>_dbus_connection_putback_message_link_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>message_link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="3971" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="3969" bodyend="3995"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>DBUS_EXPORT DBusMessage * dbus_connection_pop_message</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_pop_message</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Returns the first-received message from the incoming message queue, removing it from the queue. </para>        </briefdescription>
        <detaileddescription>
<para>The caller owns a reference to the returned message. If the queue is empty, returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para>This function bypasses any message handlers that are registered, and so using it is usually wrong. Instead, let the main loop invoke <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref>. Popping messages manually is only useful in very simple programs that don&apos;t share a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> with any libraries or other modules.</para><para>There is a lock that covers all ways of accessing the incoming message queue, so <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref>, <ref refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" kindref="member">dbus_connection_pop_message()</ref>, <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref>, etc. will all block while one of the others in the group is running.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next message in the incoming queue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4018" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4017" bodyend="4045"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" compoundref="dbus-connection_8c" startline="4304" endline="4319">dbus_connection_get_dispatch_status</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" compoundref="dbus-connection_8h" startline="80">DBUS_DISPATCH_DATA_REMAINS</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga0984f6d71eee0b2ce2e8fece87ae8a47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_failed_pop</definition>
        <argsstring>(DBusConnection *connection, DBusList *message_link)</argsstring>
        <name>_dbus_connection_failed_pop</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>message_link</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4110" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4108" bodyend="4114"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2820cc8046adc3eb567c8d5e244172a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void notify_disconnected_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>notify_disconnected_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4119" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4118" bodyend="4146"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga78443d79fe9264f5c1cceb52d027790e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
        <definition>static DBusDispatchStatus notify_disconnected_and_dispatch_complete_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>notify_disconnected_and_dispatch_complete_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4151" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4150" bodyend="4174"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
        <definition>DBUS_EXPORT DBusDispatchStatus dbus_connection_get_dispatch_status</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_dispatch_status</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the current state of the incoming message queue. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref> indicates that the message queue may contain messages. <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member">DBUS_DISPATCH_COMPLETE</ref> indicates that the incoming queue is empty. <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member">DBUS_DISPATCH_NEED_MEMORY</ref> indicates that there could be data, but we can&apos;t know for sure without more memory.</para><para>To process the incoming message queue, use <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> or (in rare cases) <ref refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" kindref="member">dbus_connection_pop_message()</ref>.</para><para>Note, <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref> really means that either we have messages in the queue, or we have raw bytes buffered up that need to be parsed. When these bytes are parsed, they may not add up to an entire message. Thus, it&apos;s possible to see a status of <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref> but not have a message yet.</para><para>In particular this happens on initial connection, because all sorts of authentication protocol stuff has to be parsed before the first message arrives.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>current dispatch status </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4305" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4304" bodyend="4319"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" compoundref="dbus-connection_8h" startline="81">DBUS_DISPATCH_COMPLETE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" compoundref="dbus-connection_8c" startline="3790" endline="3828">dbus_connection_borrow_message</referencedby>
        <referencedby refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" compoundref="dbus-connection_8c" startline="4017" endline="4045">dbus_connection_pop_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga8d4dfbae48ae59e77b777ae667ccdea9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusShared_1ga8244b29230187624c24986c24edab1de" kindref="member">DBusHandlerResult</ref></type>
        <definition>static DBusHandlerResult _dbus_connection_peer_filter_unlocked_no_update</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message)</argsstring>
        <name>_dbus_connection_peer_filter_unlocked_no_update</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Filter funtion for handling the Peer standard interface. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4327" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4325" bodyend="4415"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga53c43029a11974e7f6274c21c5838df8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusShared_1ga8244b29230187624c24986c24edab1de" kindref="member">DBusHandlerResult</ref></type>
        <definition>static DBusHandlerResult _dbus_connection_run_builtin_filters_unlocked_no_update</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message)</argsstring>
        <name>_dbus_connection_run_builtin_filters_unlocked_no_update</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Processes all builtin filter functions. </para>        </briefdescription>
        <detaileddescription>
<para>If the spec specifies a standard interface they should be processed from this method </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4426" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4424" bodyend="4431"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
        <definition>DBUS_EXPORT DBusDispatchStatus dbus_connection_dispatch</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_dispatch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Processes any incoming data. </para>        </briefdescription>
        <detaileddescription>
<para>If there&apos;s incoming raw data that has not yet been parsed, it is parsed, which may or may not result in adding messages to the incoming queue.</para><para>The incoming data buffer is filled when the connection reads from its underlying transport (such as a socket). Reading usually happens in <ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref> or <ref refid="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" kindref="member">dbus_connection_read_write()</ref>.</para><para>If there are complete messages in the incoming queue, <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> removes one message from the queue and processes it. Processing has three steps.</para><para>First, any method replies are passed to <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> or <ref refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" kindref="member">dbus_connection_send_with_reply_and_block()</ref> in order to complete the pending method call.</para><para>Second, any filters registered with <ref refid="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" kindref="member">dbus_connection_add_filter()</ref> are run. If any filter returns <ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" kindref="member">DBUS_HANDLER_RESULT_HANDLED</ref> then processing stops after that filter.</para><para>Third, if the message is a method call it is forwarded to any registered object path handlers added with <ref refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" kindref="member">dbus_connection_register_object_path()</ref> or <ref refid="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" kindref="member">dbus_connection_register_fallback()</ref>.</para><para>A single call to <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> will process at most one message; it will not clear the entire message queue.</para><para>Be careful about calling <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> from inside a message handler, i.e. calling <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> recursively. If threads have been initialized with a recursive mutex function, then this will not deadlock; however, it can certainly confuse your application.</para><para><xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>some FIXME in here about handling DBUS_HANDLER_RESULT_NEED_MEMORY</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dispatch status, see <ref refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" kindref="member">dbus_connection_get_dispatch_status()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4477" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4476" bodyend="4758"/>
        <references refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1406" endline="1416">_dbus_connection_ref_unlocked</references>
        <references refid="group__DBusHashTable_1ga36ff49c4c35599e6fcdadc7f6805c49e" compoundref="dbus-hash_8c" startline="1205" endline="1218">_dbus_hash_table_lookup_int</references>
        <references refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" compoundref="dbus-list_8c" startline="550" endline="565">_dbus_list_clear</references>
        <references refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" compoundref="dbus-list_8c" startline="728" endline="751">_dbus_list_copy</references>
        <references refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" compoundref="dbus-list_8c" startline="790" endline="805">_dbus_list_foreach</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="231" endline="234">_dbus_list_free_link</references>
        <references refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" compoundref="dbus-list_8c" startline="575" endline="578">_dbus_list_get_first_link</references>
        <references refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" compoundref="dbus-list_8h" startline="93">_dbus_list_get_next_link</references>
        <references refid="group__DBusObjectTree_1gab64dcc8febde768db3404cd93b333e1e" compoundref="dbus-object-tree_8c" startline="747" endline="904">_dbus_object_tree_dispatch_and_unlock</references>
        <references refid="group__DBusString_1gab0078cf7e0e5bd784ec6d6e0cc3923a2" compoundref="dbus-string_8c" startline="1285" endline="1297">_dbus_string_append_printf</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="263" endline="273">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="176" endline="179">_dbus_string_init</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" compoundref="dbus-connection_8c" startline="2762" endline="2785">dbus_connection_unref</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" compoundref="dbus-connection_8h" startline="81">DBUS_DISPATCH_COMPLETE</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" compoundref="dbus-connection_8h" startline="80">DBUS_DISPATCH_DATA_REMAINS</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" compoundref="dbus-connection_8h" startline="82">DBUS_DISPATCH_NEED_MEMORY</references>
        <references refid="group__DBusProtocol_1ga46c7cbfa1806b0cccb56e9a7ca92f02b" compoundref="dbus-protocol_8h" startline="392">DBUS_ERROR_UNKNOWN_METHOD</references>
        <references refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" compoundref="dbus-shared_8h" startline="68">DBUS_HANDLER_RESULT_HANDLED</references>
        <references refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" compoundref="dbus-shared_8h" startline="70">DBUS_HANDLER_RESULT_NEED_MEMORY</references>
        <references refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deacb84b64c92055f2585fe9c29f1e5df68" compoundref="dbus-shared_8h" startline="69">DBUS_HANDLER_RESULT_NOT_YET_HANDLED</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3083" endline="3095">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3169" endline="3181">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" compoundref="dbus-message_8c" startline="1025" endline="1038">dbus_message_get_reply_serial</references>
        <references refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" compoundref="dbus-message_8c" startline="3399" endline="3409">dbus_message_get_signature</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1580" endline="1585">dbus_message_get_type</references>
        <references refid="group__DBusMessage_1ga2ab896965aec97fb21293affeed36232" compoundref="dbus-message_8c" startline="1327" endline="1379">dbus_message_new_error</references>
        <references refid="group__DBusProtocol_1ga09416afd76b65139eddd31e1085d9ebf" compoundref="dbus-protocol_8h" startline="234">DBUS_MESSAGE_TYPE_METHOD_CALL</references>
        <references refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" compoundref="dbus-message_8c" startline="4512" endline="4527">dbus_message_type_to_string</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1550" endline="1567">dbus_message_unref</references>
        <references refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" compoundref="dbus-connection_8c" startline="272">DBusConnection::filter_list</references>
        <references refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" compoundref="dbus-connection_8c" startline="220">DBusMessageFilter::function</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="295">DBusConnection::objects</references>
        <references refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" compoundref="dbus-connection_8c" startline="277">DBusConnection::pending_replies</references>
        <references refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" compoundref="dbus-connection_8c" startline="221">DBusMessageFilter::user_data</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_set_watch_functions</definition>
        <argsstring>(DBusConnection *connection, DBusAddWatchFunction add_function, DBusRemoveWatchFunction remove_function, DBusWatchToggledFunction toggled_function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_watch_functions</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga9188ca3fd89c957dc269dbe8601b270e" kindref="member">DBusAddWatchFunction</ref></type>
          <declname>add_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1gaaab846a872d938b27503129551ea0c62" kindref="member">DBusRemoveWatchFunction</ref></type>
          <declname>remove_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1gace13544ff3075b5fccbce896682ec6ff" kindref="member">DBusWatchToggledFunction</ref></type>
          <declname>toggled_function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets the watch functions for the connection. </para>        </briefdescription>
        <detaileddescription>
<para>These functions are responsible for making the application&apos;s main loop aware of file descriptors that need to be monitored for events, using select() or poll(). When using Qt, typically the DBusAddWatchFunction would create a QSocketNotifier. When using GLib, the DBusAddWatchFunction could call g_io_add_watch(), or could be used as part of a more elaborate GSource. Note that when a watch is added, it may not be enabled.</para><para>The DBusWatchToggledFunction notifies the application that the watch has been enabled or disabled. Call <ref refid="group__DBusWatch_1gae7a91e6d4d1bc187419c47c522e33a8f" kindref="member">dbus_watch_get_enabled()</ref> to check this. A disabled watch should have no effect, and enabled watch should be added to the main loop. This feature is used instead of simply adding/removing the watch because enabling/disabling can be done without memory allocation. The toggled function may be NULL if a main loop re-queries <ref refid="group__DBusWatch_1gae7a91e6d4d1bc187419c47c522e33a8f" kindref="member">dbus_watch_get_enabled()</ref> every time anyway.</para><para>The <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> can be queried for the file descriptor to watch using <ref refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" kindref="member">dbus_watch_get_unix_fd()</ref> or <ref refid="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" kindref="member">dbus_watch_get_socket()</ref>, and for the events to watch for using <ref refid="group__DBusWatch_1gaf172a2b1d1f82333e67cec8d99c9204a" kindref="member">dbus_watch_get_flags()</ref>. The flags returned by <ref refid="group__DBusWatch_1gaf172a2b1d1f82333e67cec8d99c9204a" kindref="member">dbus_watch_get_flags()</ref> will only contain DBUS_WATCH_READABLE and DBUS_WATCH_WRITABLE, never DBUS_WATCH_HANGUP or DBUS_WATCH_ERROR; all watches implicitly include a watch for hangups, errors, and other exceptional conditions.</para><para>Once a file descriptor becomes readable or writable, or an exception occurs, <ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref> should be called to notify the connection of the file descriptor&apos;s condition.</para><para><ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref> cannot be called during the DBusAddWatchFunction, as the connection will not be ready to handle that watch yet.</para><para>It is not allowed to reference a <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> after it has been passed to remove_function.</para><para>If <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> is returned due to lack of memory, the failure may be due to a <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> return from the new add_function. If so, the add_function may have been called successfully one or more times, but the remove_function will also have been called to remove any successful adds. i.e. if <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> is returned the net result should be that <ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions()</ref> has no effect, but the add_function and remove_function may have been called.</para><para><simplesect kind="note"><para>The thread lock on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> is held while watch functions are invoked, so inside these functions you may not invoke any methods on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> or it will deadlock. See the comments in the code or <ulink url="http://lists.freedesktop.org/archives/dbus/2007-July/tread.html#8144">http://lists.freedesktop.org/archives/dbus/2007-July/tread.html#8144</ulink> if you encounter this issue and want to attempt writing a patch.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to begin monitoring a new descriptor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remove_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to stop monitoring a descriptor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toggled_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to notify of enable/disable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to add_function and remove_function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be called to free the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure (no memory) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4828" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4822" bodyend="4843"/>
        <references refid="group__DBusWatchInternals_1gae9ab8cf14f4191191e94183be9a031d9" compoundref="dbus-watch_8c" startline="260" endline="347">_dbus_watch_list_set_functions</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" compoundref="dbus-connection_8c" startline="269">DBusConnection::watches</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gab3cbc68eec427e9ce1783b25d44fe93c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_set_timeout_functions</definition>
        <argsstring>(DBusConnection *connection, DBusAddTimeoutFunction add_function, DBusRemoveTimeoutFunction remove_function, DBusTimeoutToggledFunction toggled_function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_timeout_functions</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga01a45587090d82ee97b5042b49037a08" kindref="member">DBusAddTimeoutFunction</ref></type>
          <declname>add_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga13aae9d5981de45abca0db1717dc7daf" kindref="member">DBusRemoveTimeoutFunction</ref></type>
          <declname>remove_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga62eea9a2032ae15b6738534b93d18e86" kindref="member">DBusTimeoutToggledFunction</ref></type>
          <declname>toggled_function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets the timeout functions for the connection. </para>        </briefdescription>
        <detaileddescription>
<para>These functions are responsible for making the application&apos;s main loop aware of timeouts. When using Qt, typically the DBusAddTimeoutFunction would create a QTimer. When using GLib, the DBusAddTimeoutFunction would call g_timeout_add.</para><para>The DBusTimeoutToggledFunction notifies the application that the timeout has been enabled or disabled. Call <ref refid="group__DBusTimeout_1ga58954b2edb45ec1632529d35525ea45c" kindref="member">dbus_timeout_get_enabled()</ref> to check this. A disabled timeout should have no effect, and enabled timeout should be added to the main loop. This feature is used instead of simply adding/removing the timeout because enabling/disabling can be done without memory allocation. With Qt, QTimer::start() and QTimer::stop() can be used to enable and disable. The toggled function may be NULL if a main loop re-queries <ref refid="group__DBusTimeout_1ga58954b2edb45ec1632529d35525ea45c" kindref="member">dbus_timeout_get_enabled()</ref> every time anyway. Whenever a timeout is toggled, its interval may change.</para><para>The <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> can be queried for the timer interval using <ref refid="group__DBusTimeout_1ga67ba21b6189438875c6007ee79da5e37" kindref="member">dbus_timeout_get_interval()</ref>. <ref refid="group__DBusTimeout_1ga038b67c8d3db2624a1e4a8bc45f25d12" kindref="member">dbus_timeout_handle()</ref> should be called repeatedly, each time the interval elapses, starting after it has elapsed once. The timeout stops firing when it is removed with the given remove_function. The timer interval may change whenever the timeout is added, removed, or toggled.</para><para><simplesect kind="note"><para>The thread lock on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> is held while timeout functions are invoked, so inside these functions you may not invoke any methods on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> or it will deadlock. See the comments in the code or <ulink url="http://lists.freedesktop.org/archives/dbus/2007-July/thread.html#8144">http://lists.freedesktop.org/archives/dbus/2007-July/thread.html#8144</ulink> if you encounter this issue and want to attempt writing a patch.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to add a timeout. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remove_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to remove a timeout. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toggled_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to notify of enable/disable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to add_function and remove_function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be called to free the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure (no memory) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4891" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4885" bodyend="4906"/>
        <references refid="group__DBusTimeoutInternals_1ga6760d1963b870b45f855501e38b49fd9" compoundref="dbus-timeout_8c" startline="239" endline="299">_dbus_timeout_list_set_functions</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" compoundref="dbus-connection_8c" startline="270">DBusConnection::timeouts</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2b1df13251c7ec348bcba39c0924e881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_wakeup_main_function</definition>
        <argsstring>(DBusConnection *connection, DBusWakeupMainFunction wakeup_main_function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_wakeup_main_function</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga4bea703ee5b9f8dfe79c4082c347d43d" kindref="member">DBusWakeupMainFunction</ref></type>
          <declname>wakeup_main_function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets the mainloop wakeup function for the connection. </para>        </briefdescription>
        <detaileddescription>
<para>This function is responsible for waking up the main loop (if its sleeping in another thread) when some some change has happened to the connection that the mainloop needs to reconsider (e.g. a message has been queued for writing). When using Qt, this typically results in a call to QEventLoop::wakeUp(). When using GLib, it would call g_main_context_wakeup().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wakeup_main_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to wake up the mainloop </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass wakeup_main_function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be called to free the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4927" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4923" bodyend="4946"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a8da896126df262503431acd73638c917" compoundref="dbus-connection_8c" startline="284">DBusConnection::free_wakeup_main_data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ac8aff7bafd9ed046d835c5ed80bc218c" compoundref="dbus-connection_8c" startline="283">DBusConnection::wakeup_main_data</references>
        <references refid="structDBusConnection_1a211104e37f65d45ab8fcb149e4bcc84e" compoundref="dbus-connection_8c" startline="282">DBusConnection::wakeup_main_function</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_dispatch_status_function</definition>
        <argsstring>(DBusConnection *connection, DBusDispatchStatusFunction function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_dispatch_status_function</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1gaad6e12a5d298ef30a99d8c667abad58a" kindref="member">DBusDispatchStatusFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Set a function to be invoked when the dispatch status changes. </para>        </briefdescription>
        <detaileddescription>
<para>If the dispatch status is <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref>, then <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> needs to be called to process incoming messages. However, <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> MUST NOT BE CALLED from inside the DBusDispatchStatusFunction. Indeed, almost any reentrancy in this function is a bad idea. Instead, the DBusDispatchStatusFunction should simply save an indication that messages should be dispatched later, when the main loop is re-entered.</para><para>If you don&apos;t set a dispatch status function, you have to be sure to dispatch on every iteration of your main loop, especially if <ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref> or <ref refid="group__DBusTimeout_1ga038b67c8d3db2624a1e4a8bc45f25d12" kindref="member">dbus_timeout_handle()</ref> were called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call on dispatch status changes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data for function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>free the function data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="4973" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="4969" bodyend="4992"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a0225f7934d1bd118ae2eeacf8a1c6f19" compoundref="dbus-connection_8c" startline="287">DBusConnection::dispatch_status_data</references>
        <references refid="structDBusConnection_1af6cbafdf80cd474c654fc226581900a2" compoundref="dbus-connection_8c" startline="286">DBusConnection::dispatch_status_function</references>
        <references refid="structDBusConnection_1a71f8b1e2078c4edb98c62de1886dfb2a" compoundref="dbus-connection_8c" startline="288">DBusConnection::free_dispatch_status_data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga38297f511f4124accdfa68c321e081cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_unix_fd</definition>
        <argsstring>(DBusConnection *connection, int *fd)</argsstring>
        <name>dbus_connection_get_unix_fd</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Get the UNIX file descriptor of the connection, if any. </para>        </briefdescription>
        <detaileddescription>
<para>This can be used for SELinux access control checks with getpeercon() for example. DO NOT read or write to the file descriptor, or try to select() on it; use <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> for main loop integration. Not all connections will have a file descriptor. So for adding descriptors to the main loop, use <ref refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" kindref="member">dbus_watch_get_unix_fd()</ref> and so forth.</para><para>If the connection is socket-based, you can also use <ref refid="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" kindref="member">dbus_connection_get_socket()</ref>, which will work on Windows too. This function always fails on Windows.</para><para>Right now the returned descriptor is always a socket, but that is not guaranteed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the file descriptor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if fd is successfully obtained. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5016" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5014" bodyend="5026"/>
        <references refid="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" compoundref="dbus-connection_8c" startline="5044" endline="5060">dbus_connection_get_socket</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_socket</definition>
        <argsstring>(DBusConnection *connection, int *fd)</argsstring>
        <name>dbus_connection_get_socket</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Gets the underlying Windows or UNIX socket file descriptor of the connection, if any. </para>        </briefdescription>
        <detaileddescription>
<para>DO NOT read or write to the file descriptor, or try to select() on it; use <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> for main loop integration. Not all connections will have a socket. So for adding descriptors to the main loop, use <ref refid="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" kindref="member">dbus_watch_get_socket()</ref> and so forth.</para><para>If the connection is not socket-based, this function will return FALSE, even if the connection does have a file descriptor of some kind. i.e. this function always returns specifically a socket file descriptor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the file descriptor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if fd is successfully obtained. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5046" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5044" bodyend="5060"/>
        <references refid="group__DBusTransport_1gac58d38eb19b39774f89271fc6472e087" compoundref="dbus-transport_8c" startline="924" endline="943">_dbus_transport_get_socket_fd</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
        <referencedby refid="group__DBusConnection_1ga38297f511f4124accdfa68c321e081cc" compoundref="dbus-connection_8c" startline="5014" endline="5026">dbus_connection_get_unix_fd</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaef670c3a8170ab9c719ec955252459d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_unix_user</definition>
        <argsstring>(DBusConnection *connection, unsigned long *uid)</argsstring>
        <name>dbus_connection_get_unix_user</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>unsigned long *</type>
          <declname>uid</declname>
        </param>
        <briefdescription>
<para>Gets the UNIX user ID of the connection if known. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the uid is filled in. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on non-UNIX platforms for now, though in theory someone could hook Windows to NIS or something. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> prior to authenticating the connection.</para><para>The UID is only read by servers from clients; clients can&apos;t usually get the UID of servers, because servers do not authenticate to clients. The returned UID is the UID the connection authenticated as.</para><para>The message bus is a server and the apps connecting to the bus are clients.</para><para>You can ask the bus to tell you the UID of another connection though if you like; this is done with <ref refid="group__DBusBus_1ga24d782c710f3d82caf1b1ed582dcf474" kindref="member">dbus_bus_get_unix_user()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the user ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if uid is filled in with a valid user ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5088" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5086" bodyend="5109"/>
        <references refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" compoundref="dbus-transport_8c" startline="697" endline="785">_dbus_transport_get_is_authenticated</references>
        <references refid="group__DBusTransport_1gaf3c4a47f73bd584a9fda1e5e7a825da9" compoundref="dbus-transport_8c" startline="1280" endline="1303">_dbus_transport_get_unix_user</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaeebeadcafa87e2d30eed4296f26fb73c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_unix_process_id</definition>
        <argsstring>(DBusConnection *connection, unsigned long *pid)</argsstring>
        <name>dbus_connection_get_unix_process_id</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>unsigned long *</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
<para>Gets the process ID of the connection if any. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the pid is filled in. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> prior to authenticating the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the process ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if uid is filled in with a valid process ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5124" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5122" bodyend="5141"/>
        <references refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" compoundref="dbus-transport_8c" startline="697" endline="785">_dbus_transport_get_is_authenticated</references>
        <references refid="group__DBusTransport_1gae66bc81abe904a4b3ab32d8920c8fe1e" compoundref="dbus-transport_8c" startline="1313" endline="1336">_dbus_transport_get_unix_process_id</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga969b9dafe806c9fe0a54c9d8a565c2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_adt_audit_session_data</definition>
        <argsstring>(DBusConnection *connection, void **data, dbus_int32_t *data_size)</argsstring>
        <name>dbus_connection_get_adt_audit_session_data</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type>dbus_int32_t *</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Gets the ADT audit data of the connection if any. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the structure pointer is returned. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> prior to authenticating the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for audit data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if audit data is filled in with a valid ucred pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5157" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5154" bodyend="5175"/>
        <references refid="group__DBusTransport_1ga36ccd8321491895ca632e744028eea42" compoundref="dbus-transport_8c" startline="1347" endline="1370">_dbus_transport_get_adt_audit_session_data</references>
        <references refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" compoundref="dbus-transport_8c" startline="697" endline="785">_dbus_transport_get_is_authenticated</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_unix_user_function</definition>
        <argsstring>(DBusConnection *connection, DBusAllowUnixUserFunction function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_unix_user_function</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga36419a145848f3b234b3ba5640b0a3d0" kindref="member">DBusAllowUnixUserFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets a predicate function used to determine whether a given user ID is allowed to connect. </para>        </briefdescription>
        <detaileddescription>
<para>When an incoming connection has authenticated with a particular user ID, this function is called; if it returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>, the connection is allowed to proceed, otherwise the connection is disconnected.</para><para>If the function is set to <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> (as it is by default), then only the same UID as the server process will be allowed to connect. Also, root is always allowed to connect.</para><para>On Windows, the function will be set and its free_data_function will be invoked when the connection is freed or a new function is set. However, the function will never be called, because there are no UNIX user ids to pass to it, or at least none of the existing auth protocols would allow authenticating as a UNIX user on Windows.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the predicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to the predicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to free the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5204" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5200" bodyend="5218"/>
        <references refid="group__DBusTransport_1ga9f0ab472678a107c2ebe7f1da0754c44" compoundref="dbus-transport_8c" startline="1383" endline="1396">_dbus_transport_set_unix_user_function</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2b3cb488f1922aeecdeafdcb110e91a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_windows_user</definition>
        <argsstring>(DBusConnection *connection, char **windows_sid_p)</argsstring>
        <name>dbus_connection_get_windows_user</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>windows_sid_p</declname>
        </param>
        <briefdescription>
<para>Gets the Windows user SID of the connection if known. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the ID is filled in. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on non-Windows platforms for now, though in theory someone could hook UNIX to Active Directory or something. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> prior to authenticating the connection.</para><para>The user is only read by servers from clients; clients can&apos;t usually get the user of servers, because servers do not authenticate to clients. The returned user is the user the connection authenticated as.</para><para>The message bus is a server and the apps connecting to the bus are clients.</para><para>The returned user string has to be freed with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref>.</para><para>The return value indicates whether the user SID is available; if it&apos;s available but we don&apos;t have the memory to copy it, then the return value is <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> and <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> is given as the SID.</para><para><xrefsect id="todo_1_todo000010"><xreftitle>Todo</xreftitle><xrefdescription><para>We would like to be able to say "You can ask the bus to tell you the user of another connection though if you like; this is done with dbus_bus_get_windows_user()." But this has to be implemented in bus/driver.c and <ref refid="dbus-bus_8c_source" kindref="compound">dbus/dbus-bus.c</ref>, and is pointless anyway since on Windows we only use the session bus for now.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windows_sid_p</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for an allocated copy of the user ID, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if no memory </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if user is available (returned value may be <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> anyway if no memory) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5254" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5252" bodyend="5275"/>
        <references refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" compoundref="dbus-transport_8c" startline="697" endline="785">_dbus_transport_get_is_authenticated</references>
        <references refid="group__DBusTransport_1ga3f4f4ce9eaef18567fd21f5c6a1fde99" compoundref="dbus-transport_8c" startline="1406" endline="1428">_dbus_transport_get_windows_user</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaa35ced9ccd29d3366749ae383b120f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_windows_user_function</definition>
        <argsstring>(DBusConnection *connection, DBusAllowWindowsUserFunction function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_windows_user_function</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga47436366726762688036c600d651bab6" kindref="member">DBusAllowWindowsUserFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets a predicate function used to determine whether a given user ID is allowed to connect. </para>        </briefdescription>
        <detaileddescription>
<para>When an incoming connection has authenticated with a particular user ID, this function is called; if it returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>, the connection is allowed to proceed, otherwise the connection is disconnected.</para><para>If the function is set to <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> (as it is by default), then only the same user owning the server process will be allowed to connect.</para><para>On UNIX, the function will be set and its free_data_function will be invoked when the connection is freed or a new function is set. However, the function will never be called, because there is no way right now to authenticate as a Windows user on UNIX.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the predicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to the predicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to free the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5303" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5299" bodyend="5317"/>
        <references refid="group__DBusTransport_1gadbf528ef41efde73d0bc386d10b7f5b1" compoundref="dbus-transport_8c" startline="1442" endline="1455">_dbus_transport_set_windows_user_function</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gade349ff04ed548993a8054250e317c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_allow_anonymous</definition>
        <argsstring>(DBusConnection *connection, dbus_bool_t value)</argsstring>
        <name>dbus_connection_set_allow_anonymous</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This function must be called on the server side of a connection when the connection is first seen in the <ref refid="group__DBusServer_1ga8478cd198973f6a6cb224ec23175faa7" kindref="member">DBusNewConnectionFunction</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If set to <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> (the default is <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>), then the connection can proceed even if the client does not authenticate as some user identity, i.e. clients can connect anonymously.</para><para>This setting interacts with the available authorization mechanisms (see <ref refid="group__DBusServer_1ga309e5f1510c74c4b221d12d874d53341" kindref="member">dbus_server_set_auth_mechanisms()</ref>). Namely, an auth mechanism such as ANONYMOUS that supports anonymous auth must be included in the list of available mechanisms for anonymous login to work.</para><para>This setting also changes the default rule for connections authorized as a user; normally, if a connection authorizes as a user identity, it is permitted if the user identity is root or the user identity matches the user identity of the server process. If anonymous connections are allowed, however, then any user identity is allowed.</para><para>You can override the rules for connections authorized as a user identity with <ref refid="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" kindref="member">dbus_connection_set_unix_user_function()</ref> and <ref refid="group__DBusConnection_1gaa35ced9ccd29d3366749ae383b120f9c" kindref="member">dbus_connection_set_windows_user_function()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to allow authentication as an anonymous user </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5348" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5346" bodyend="5354"/>
        <references refid="group__DBusTransport_1ga5f4bd7eb5621003595b75cb8033463cd" compoundref="dbus-transport_8c" startline="1479" endline="1483">_dbus_transport_set_allow_anonymous</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaf58e8cc7b8717db1581459c0c3d34b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_route_peer_messages</definition>
        <argsstring>(DBusConnection *connection, dbus_bool_t value)</argsstring>
        <name>dbus_connection_set_route_peer_messages</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Normally <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> automatically handles all messages to the org.freedesktop.DBus.Peer interface. </para>        </briefdescription>
        <detaileddescription>
<para>However, the message bus wants to be able to route methods on that interface through the bus and to other applications. If routing peer messages is enabled, then messages with the org.freedesktop.DBus.Peer interface that also have a bus destination name set will not be automatically handled by the <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> and instead will be dispatched normally to the application.</para><para>If a normal application sets this flag, it can break things badly. So don&apos;t set this unless you are the message bus.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> to pass through org.freedesktop.DBus.Peer messages with a bus name set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5376" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5374" bodyend="5382"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" compoundref="dbus-connection_8c" startline="310">DBusConnection::route_peer_messages</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_add_filter</definition>
        <argsstring>(DBusConnection *connection, DBusHandleMessageFunction function, void *user_data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_add_filter</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga13febac22a058c4fc98a90ce7da69489" kindref="member">DBusHandleMessageFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Adds a message filter. </para>        </briefdescription>
        <detaileddescription>
<para>Filters are handlers that are run on all incoming messages, prior to the objects registered with <ref refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" kindref="member">dbus_connection_register_object_path()</ref>. Filters are run in the order that they were added. The same handler can be added as a filter more than once, in which case it will be run more than once. Filters added during a filter callback won&apos;t be run on the message being processed.</para><para><xrefsect id="todo_1_todo000011"><xreftitle>Todo</xreftitle><xrefdescription><para>we don&apos;t run filters on messages while blocking without entering the main loop, since filters are run as part of <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref>. This is probably a feature, as filters could create arbitrary reentrancy. But kind of sucks if you&apos;re trying to filter METHOD_RETURN for some reason.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to handle messages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user data to pass to the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to use for freeing user data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5410" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5406" bodyend="5443"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2354" endline="2366">_dbus_atomic_inc</references>
        <references refid="group__DBusList_1gad99045e79db46159babe69718f343053" compoundref="dbus-list_8c" startline="247" endline="257">_dbus_list_append</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" compoundref="dbus-connection_8c" startline="272">DBusConnection::filter_list</references>
        <references refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" compoundref="dbus-connection_8c" startline="222">DBusMessageFilter::free_user_data_function</references>
        <references refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" compoundref="dbus-connection_8c" startline="220">DBusMessageFilter::function</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusMessageFilter_1a2d2debd9a708cb7d4f8447c18f7458b9" compoundref="dbus-connection_8c" startline="219">DBusMessageFilter::refcount</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <references refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" compoundref="dbus-connection_8c" startline="221">DBusMessageFilter::user_data</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga5e7f1dad410506a8a6f5182c55e7c4fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_remove_filter</definition>
        <argsstring>(DBusConnection *connection, DBusHandleMessageFunction function, void *user_data)</argsstring>
        <name>dbus_connection_remove_filter</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga13febac22a058c4fc98a90ce7da69489" kindref="member">DBusHandleMessageFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Removes a previously-added message filter. </para>        </briefdescription>
        <detaileddescription>
<para>It is a programming error to call this function for a handler that has not been added as a filter. If the given handler was added more than once, only one instance of it will be removed (the most recently-added instance).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to remove </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user data for the handler to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5461" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5458" bodyend="5509"/>
        <references refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" compoundref="dbus-list_8c" startline="588" endline="594">_dbus_list_get_last_link</references>
        <references refid="group__DBusList_1ga6637493bf5fc09bddb44ac295c475cae" compoundref="dbus-list_8h" startline="94">_dbus_list_get_prev_link</references>
        <references refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" compoundref="dbus-list_8c" startline="535" endline="540">_dbus_list_remove_link</references>
        <references refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="272" endline="291">_dbus_warn_check_failed</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" compoundref="dbus-connection_8c" startline="272">DBusConnection::filter_list</references>
        <references refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" compoundref="dbus-connection_8c" startline="222">DBusMessageFilter::free_user_data_function</references>
        <references refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" compoundref="dbus-connection_8c" startline="220">DBusMessageFilter::function</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" compoundref="dbus-connection_8c" startline="221">DBusMessageFilter::user_data</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga708b1e108feed18f5775ff404c9dda4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_try_register_object_path</definition>
        <argsstring>(DBusConnection *connection, const char *path, const DBusObjectPathVTable *vtable, void *user_data, DBusError *error)</argsstring>
        <name>dbus_connection_try_register_object_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> *</type>
          <declname>vtable</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Registers a handler for a given path in the object hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>The given vtable handles messages sent to exactly the given path.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtable</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to functions in the vtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error (<ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>) is reported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5529" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5524" bodyend="5553"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1082" endline="1165">_dbus_decompose_path</references>
        <references refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" compoundref="dbus-object-tree_8c" startline="391" endline="434">_dbus_object_tree_register</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="677" endline="692">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="295">DBusConnection::objects</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_register_object_path</definition>
        <argsstring>(DBusConnection *connection, const char *path, const DBusObjectPathVTable *vtable, void *user_data)</argsstring>
        <name>dbus_connection_register_object_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> *</type>
          <declname>vtable</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Registers a handler for a given path in the object hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>The given vtable handles messages sent to exactly the given path.</para><para>It is a bug to call this function for object paths which already have a handler. Use <ref refid="group__DBusConnection_1ga708b1e108feed18f5775ff404c9dda4b" kindref="member">dbus_connection_try_register_object_path()</ref> if this might be the case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtable</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to functions in the vtable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error (<ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>) ocurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5575" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5571" bodyend="5607"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1082" endline="1165">_dbus_decompose_path</references>
        <references refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" compoundref="dbus-object-tree_8c" startline="391" endline="434">_dbus_object_tree_register</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="244" endline="261">_dbus_warn</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" compoundref="dbus-errors_8c" startline="211" endline="226">dbus_error_free</references>
        <references refid="group__DBusErrors_1ga48515c580199514026542fe053ef1887" compoundref="dbus-errors_8c" startline="302" endline="320">dbus_error_has_name</references>
        <references refid="group__DBusErrorInternals_1ga961cc70e3891282a65205c4c8418d88e" compoundref="dbus-errors_8h" startline="62">DBUS_ERROR_INIT</references>
        <references refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" compoundref="dbus-protocol_8h" startline="445">DBUS_ERROR_OBJECT_PATH_IN_USE</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="677" endline="692">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusError_1afb559175326de5b6b340e26204e92d72" compoundref="dbus-errors_8h" startline="51">DBusError::message</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="295">DBusConnection::objects</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga8e9d2d4ff17c3071124e4993d1536ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_try_register_fallback</definition>
        <argsstring>(DBusConnection *connection, const char *path, const DBusObjectPathVTable *vtable, void *user_data, DBusError *error)</argsstring>
        <name>dbus_connection_try_register_fallback</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> *</type>
          <declname>vtable</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Registers a fallback handler for a given subsection of the object hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>The given vtable handles messages at or below the given path. You can use this to establish a default message handling policy for a whole &quot;subdirectory.&quot;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtable</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to functions in the vtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error (<ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>) is reported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5629" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5624" bodyend="5653"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1082" endline="1165">_dbus_decompose_path</references>
        <references refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" compoundref="dbus-object-tree_8c" startline="391" endline="434">_dbus_object_tree_register</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="677" endline="692">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="295">DBusConnection::objects</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_register_fallback</definition>
        <argsstring>(DBusConnection *connection, const char *path, const DBusObjectPathVTable *vtable, void *user_data)</argsstring>
        <name>dbus_connection_register_fallback</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> *</type>
          <declname>vtable</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Registers a fallback handler for a given subsection of the object hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>The given vtable handles messages at or below the given path. You can use this to establish a default message handling policy for a whole &quot;subdirectory.&quot;</para><para>It is a bug to call this function for object paths which already have a handler. Use <ref refid="group__DBusConnection_1ga8e9d2d4ff17c3071124e4993d1536ed4" kindref="member">dbus_connection_try_register_fallback()</ref> if this might be the case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtable</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to functions in the vtable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error (<ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>) occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5677" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5673" bodyend="5709"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1082" endline="1165">_dbus_decompose_path</references>
        <references refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" compoundref="dbus-object-tree_8c" startline="391" endline="434">_dbus_object_tree_register</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="244" endline="261">_dbus_warn</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" compoundref="dbus-errors_8c" startline="211" endline="226">dbus_error_free</references>
        <references refid="group__DBusErrors_1ga48515c580199514026542fe053ef1887" compoundref="dbus-errors_8c" startline="302" endline="320">dbus_error_has_name</references>
        <references refid="group__DBusErrorInternals_1ga961cc70e3891282a65205c4c8418d88e" compoundref="dbus-errors_8h" startline="62">DBUS_ERROR_INIT</references>
        <references refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" compoundref="dbus-protocol_8h" startline="445">DBUS_ERROR_OBJECT_PATH_IN_USE</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="677" endline="692">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusError_1afb559175326de5b6b340e26204e92d72" compoundref="dbus-errors_8h" startline="51">DBusError::message</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="295">DBusConnection::objects</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6ae8f005dedf24c5f2df1768795392fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_unregister_object_path</definition>
        <argsstring>(DBusConnection *connection, const char *path)</argsstring>
        <name>dbus_connection_unregister_object_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Unregisters the handler registered with exactly the given path. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s a bug to call this function for a path that isn&apos;t registered. Can unregister both fallback paths and object paths.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5723" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5721" bodyend="5740"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1082" endline="1165">_dbus_decompose_path</references>
        <references refid="group__DBusObjectTree_1ga3babe73ed342b6963997ef2efd73ef75" compoundref="dbus-object-tree_8c" startline="444" endline="522">_dbus_object_tree_unregister_and_unlock</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="677" endline="692">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="295">DBusConnection::objects</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga08ee6e70b74c294fe24d0f391f16db24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_object_path_data</definition>
        <argsstring>(DBusConnection *connection, const char *path, void **data_p)</argsstring>
        <name>dbus_connection_get_object_path_data</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>data_p</declname>
        </param>
        <briefdescription>
<para>Gets the user data passed to <ref refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" kindref="member">dbus_connection_register_object_path()</ref> or <ref refid="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" kindref="member">dbus_connection_register_fallback()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If nothing was registered at this path, the data is filled in with <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path you registered with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_p</parametername>
</parameternamelist>
<parameterdescription>
<para>location to store the user data, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5756" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5753" bodyend="5777"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1082" endline="1165">_dbus_decompose_path</references>
        <references refid="group__DBusObjectTree_1ga4cf5a5f35d2bd18b6fa8aa58ba6b5de4" compoundref="dbus-object-tree_8c" startline="915" endline="934">_dbus_object_tree_get_user_data_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="677" endline="692">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="295">DBusConnection::objects</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga3e9de2067d0eed66ef73230fae8d8be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_list_registered</definition>
        <argsstring>(DBusConnection *connection, const char *parent_path, char ***child_entries)</argsstring>
        <name>dbus_connection_list_registered</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>parent_path</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>child_entries</declname>
        </param>
        <briefdescription>
<para>Lists the registered fallback handlers and object path handlers at the given parent_path. </para>        </briefdescription>
        <detaileddescription>
<para>The returned array should be freed with <ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member">dbus_free_string_array()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent_path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to list the child handlers of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_entries</parametername>
</parameternamelist>
<parameterdescription>
<para>returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>-terminated array of children </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory to allocate the child entries </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5793" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5790" bodyend="5812"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1082" endline="1165">_dbus_decompose_path</references>
        <references refid="group__DBusObjectTree_1gaab7040bd1bf037d99e9bbb75d0869a2f" compoundref="dbus-object-tree_8c" startline="1046" endline="1065">_dbus_object_tree_list_registered_and_unlock</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="677" endline="692">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="295">DBusConnection::objects</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga728b15c71a492ad244e5a480f1156088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_allocate_data_slot</definition>
        <argsstring>(dbus_int32_t *slot_p)</argsstring>
        <name>dbus_connection_allocate_data_slot</name>
        <param>
          <type>dbus_int32_t *</type>
          <declname>slot_p</declname>
        </param>
        <briefdescription>
<para>Allocates an integer ID to be used for storing application-specific data on any <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The allocated ID may then be used with <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref> and <ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member">dbus_connection_get_data()</ref>. The passed-in slot must be initialized to -1, and is filled in with the slot ID. If the passed-in slot is not -1, it&apos;s assumed to be already allocated, and its refcount is incremented.</para><para>The allocated slot is global, i.e. all <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> objects will have a slot with the given integer ID reserved.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_p</parametername>
</parameternamelist>
<parameterdescription>
<para>address of a global variable storing the slot </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure (no memory) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5833" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5832" bodyend="5837"/>
        <references refid="group__DBusDataSlot_1ga941a12182e69c185bd27f6efbfbd0f86" compoundref="dbus-dataslot_8c" startline="69" endline="151">_dbus_data_slot_allocator_alloc</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga7dc8c73d8c3e733f5410d52be84239a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_free_data_slot</definition>
        <argsstring>(dbus_int32_t *slot_p)</argsstring>
        <name>dbus_connection_free_data_slot</name>
        <param>
          <type>dbus_int32_t *</type>
          <declname>slot_p</declname>
        </param>
        <briefdescription>
<para>Deallocates a global ID for connection data slots. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member">dbus_connection_get_data()</ref> and <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref> may no longer be used with this slot. Existing data stored on existing <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> objects will be freed when the connection is finalized, but may not be retrieved (and may only be replaced if someone else reallocates the slot). When the refcount on the passed-in slot reaches 0, it is set to -1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_p</parametername>
</parameternamelist>
<parameterdescription>
<para>address storing the slot to deallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5852" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5851" bodyend="5856"/>
        <references refid="group__DBusDataSlot_1ga059c50a24cd9fc984e918e6159841633" compoundref="dbus-dataslot_8c" startline="165" endline="206">_dbus_data_slot_allocator_free</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_set_data</definition>
        <argsstring>(DBusConnection *connection, dbus_int32_t slot, void *data, DBusFreeFunction free_data_func)</argsstring>
        <name>dbus_connection_set_data</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>dbus_int32_t</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_func</declname>
        </param>
        <briefdescription>
<para>Stores a pointer on a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>, along with an optional function to be used for freeing the data when the data is set again, or when the connection is finalized. </para>        </briefdescription>
        <detaileddescription>
<para>The slot number must have been allocated with <ref refid="group__DBusConnection_1ga728b15c71a492ad244e5a480f1156088" kindref="member">dbus_connection_allocate_data_slot()</ref>.</para><para><simplesect kind="note"><para>This function does not take the main thread lock on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>, which allows it to be used from inside watch and timeout functions. (See the note in docs for <ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions()</ref>.) A side effect of this is that you need to know there&apos;s a reference held on the connection while invoking <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref>, or the connection could be finalized during <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>the slot number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_func</parametername>
</parameternamelist>
<parameterdescription>
<para>finalizer function for the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if there was enough memory to store the data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5885" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5881" bodyend="5910"/>
        <references refid="group__DBusDataSlot_1gad2952f9f686d96e7114fc49ab7452e1a" compoundref="dbus-dataslot_8c" startline="237" endline="286">_dbus_data_slot_list_set</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" compoundref="dbus-connection_8c" startline="275">DBusConnection::slot_list</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>DBUS_EXPORT void * dbus_connection_get_data</definition>
        <argsstring>(DBusConnection *connection, dbus_int32_t slot)</argsstring>
        <name>dbus_connection_get_data</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>dbus_int32_t</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
<para>Retrieves data previously set with <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The slot must still be allocated (must not have been freed).</para><para><simplesect kind="note"><para>This function does not take the main thread lock on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>, which allows it to be used from inside watch and timeout functions. (See the note in docs for <ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions()</ref>.) A side effect of this is that you need to know there&apos;s a reference held on the connection while invoking <ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member">dbus_connection_get_data()</ref>, or the connection could be finalized during <ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member">dbus_connection_get_data()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>the slot to get data from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the data, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5932" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5930" bodyend="5946"/>
        <references refid="group__DBusDataSlot_1ga43f741229f0c38788442601e2750ec66" compoundref="dbus-dataslot_8c" startline="298" endline="318">_dbus_data_slot_list_get</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" compoundref="dbus-connection_8c" startline="275">DBusConnection::slot_list</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga794d0b572e30448fb262618222f76124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_change_sigpipe</definition>
        <argsstring>(dbus_bool_t will_modify_sigpipe)</argsstring>
        <name>dbus_connection_set_change_sigpipe</name>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>will_modify_sigpipe</declname>
        </param>
        <briefdescription>
<para>This function sets a global flag for whether dbus_connection_new() will set SIGPIPE behavior to SIG_IGN. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>will_modify_sigpipe</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> to allow sigpipe to be set to SIG_IGN </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5956" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5955" bodyend="5958"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga0d783462274a6c71d3767f5821c29ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_max_message_size</definition>
        <argsstring>(DBusConnection *connection, long size)</argsstring>
        <name>dbus_connection_set_max_message_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Specifies the maximum size message this connection is allowed to receive. </para>        </briefdescription>
        <detaileddescription>
<para>Larger messages will result in disconnecting the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum message size the connection can receive, in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5971" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5969" bodyend="5978"/>
        <references refid="group__DBusTransport_1ga03ea875260e71f59af708146cabf95ab" compoundref="dbus-transport_8c" startline="1169" endline="1173">_dbus_transport_set_max_message_size</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga7a459e64d7dca7b592136cec0a73422c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_max_message_size</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_max_message_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the value set by <ref refid="group__DBusConnection_1ga0d783462274a6c71d3767f5821c29ce9" kindref="member">dbus_connection_set_max_message_size()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the max size of a single message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="5988" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="5987" bodyend="5997"/>
        <references refid="group__DBusTransport_1gae36d2a90bad6ef13c0379fa9864ff68e" compoundref="dbus-transport_8c" startline="1195" endline="1198">_dbus_transport_get_max_message_size</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2aadce7d15c0e11983363912292b3fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_max_message_unix_fds</definition>
        <argsstring>(DBusConnection *connection, long n)</argsstring>
        <name>dbus_connection_set_max_message_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Specifies the maximum number of unix fds a message on this connection is allowed to receive. </para>        </briefdescription>
        <detaileddescription>
<para>Messages with more unix fds will result in disconnecting the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum message unix fds the connection can receive </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="6010" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="6008" bodyend="6017"/>
        <references refid="group__DBusTransport_1gad005fffd646202e74a789765ae82a40f" compoundref="dbus-transport_8c" startline="1182" endline="1186">_dbus_transport_set_max_message_unix_fds</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga18abaca9a512dbb7b6f921c3df6875d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_max_message_unix_fds</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_max_message_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the value set by <ref refid="group__DBusConnection_1ga2aadce7d15c0e11983363912292b3fcd" kindref="member">dbus_connection_set_max_message_unix_fds()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the max numer of unix fds of a single message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="6027" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="6026" bodyend="6036"/>
        <references refid="group__DBusTransport_1gaa28e8edd4d849108b158d95eb7da812d" compoundref="dbus-transport_8c" startline="1207" endline="1210">_dbus_transport_get_max_message_unix_fds</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6565d75f16e6e803372b2ae3d94d991b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_max_received_size</definition>
        <argsstring>(DBusConnection *connection, long size)</argsstring>
        <name>dbus_connection_set_max_received_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the maximum total number of bytes that can be used for all messages received on this connection. </para>        </briefdescription>
        <detaileddescription>
<para>Messages count toward the maximum until they are finalized. When the maximum is reached, the connection will not read more data until some messages are finalized.</para><para>The semantics of the maximum are: if outstanding messages are already above the maximum, additional messages will not be read. The semantics are not: if the next message would cause us to exceed the maximum, we don&apos;t read it. The reason is that we don&apos;t know the size of a message until after we read it.</para><para>Thus, the max live messages size can actually be exceeded by up to the maximum size of a single message.</para><para>Also, if we read say 1024 bytes off the wire in a single read(), and that contains a half-dozen small messages, we may exceed the size max by that amount. But this should be inconsequential.</para><para>This does imply that we can&apos;t call read() with a buffer larger than we&apos;re willing to exceed this limit by.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum size in bytes of all outstanding messages </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="6066" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="6064" bodyend="6073"/>
        <references refid="group__DBusTransport_1ga08e0368732df5f4e58a2c838fe4484f6" compoundref="dbus-transport_8c" startline="1219" endline="1228">_dbus_transport_set_max_received_size</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga376529acf41d1d34b4f46c0d9d515c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_max_received_size</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_max_received_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the value set by <ref refid="group__DBusConnection_1ga6565d75f16e6e803372b2ae3d94d991b" kindref="member">dbus_connection_set_max_received_size()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the max size of all live messages </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="6083" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="6082" bodyend="6092"/>
        <references refid="group__DBusTransport_1ga8992b33d9060a103bd38705462a0ea96" compoundref="dbus-transport_8c" startline="1255" endline="1258">_dbus_transport_get_max_received_size</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga81e63dc6d9298e8a7f92c0d93d0e80b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_max_received_unix_fds</definition>
        <argsstring>(DBusConnection *connection, long n)</argsstring>
        <name>dbus_connection_set_max_received_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Sets the maximum total number of unix fds that can be used for all messages received on this connection. </para>        </briefdescription>
        <detaileddescription>
<para>Messages count toward the maximum until they are finalized. When the maximum is reached, the connection will not read more data until some messages are finalized.</para><para>The semantics are analogous to those of <ref refid="group__DBusConnection_1ga6565d75f16e6e803372b2ae3d94d991b" kindref="member">dbus_connection_set_max_received_size()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum size in bytes of all outstanding messages </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="6108" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="6106" bodyend="6115"/>
        <references refid="group__DBusTransport_1gaae297c86eb0b79b6cef4a1f7e4b50356" compoundref="dbus-transport_8c" startline="1237" endline="1246">_dbus_transport_set_max_received_unix_fds</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga219f31132338616f82dc975c070ff418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_max_received_unix_fds</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_max_received_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the value set by <ref refid="group__DBusConnection_1ga81e63dc6d9298e8a7f92c0d93d0e80b3" kindref="member">dbus_connection_set_max_received_unix_fds()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the max unix fds of all live messages </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="6125" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="6124" bodyend="6134"/>
        <references refid="group__DBusTransport_1gacd0b2e68c65dc3b0c1cfdf3fb8358a44" compoundref="dbus-transport_8c" startline="1267" endline="1270">_dbus_transport_get_max_received_unix_fds</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="268">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga47aff801f586e7116f9c54532bb1baf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_outgoing_size</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_outgoing_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the approximate size in bytes of all messages in the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para>The size is approximate in that you shouldn&apos;t use it to decide how many bytes to read off the network or anything of that nature, as optimizations may choose to tell small white lies to avoid performance overhead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes that have been queued up but not sent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="6148" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="6147" bodyend="6157"/>
        <references refid="group__DBusResources_1ga49de078fb626aff30f273933ad5c8b2a" compoundref="dbus-resources_8c" startline="205" endline="208">_dbus_counter_get_size_value</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="266">DBusConnection::outgoing_counter</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gad218838fdaa8d36c606723c63e96f453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_outgoing_unix_fds</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_outgoing_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the approximate number of uni fds of all messages in the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of unix fds that have been queued up but not sent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" line="6168" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c" bodystart="6167" bodyend="6177"/>
        <references refid="group__DBusResources_1ga25b2d12b9dc4d3525df2b8401f4ce56d" compoundref="dbus-resources_8c" startline="217" endline="220">_dbus_counter_get_unix_fd_value</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="52">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="56">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="266">DBusConnection::outgoing_counter</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>C;<sp/>c-file-style:<sp/>&quot;gnu&quot;;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>dbus-connection.c<sp/>DBusConnection<sp/>object</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2002-2006<sp/><sp/>Red<sp/>Hat<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Academic<sp/>Free<sp/>License<sp/>version<sp/>2.1</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-shared.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-connection.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-list.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-timeout.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-transport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-watch.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-connection-internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-pending-call-internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-list.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-hash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-message-internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-message-private.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-threads.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-dataslot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-pending-call.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-object-tree.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-threads-internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-bus.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-marshal-basic.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_DISABLE_CHECKS</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TOOK_LOCK_CHECK(connection)</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RELEASING_LOCK_CHECK(connection)</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_LOCK_CHECK(connection)</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TOOK_LOCK_CHECK(connection)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(!(connection)-&gt;have_connection_lock);<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(connection)-&gt;have_connection_lock<sp/>=<sp/>TRUE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RELEASING_LOCK_CHECK(connection)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_dbus_assert<sp/>((connection)-&gt;have_connection_lock);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(connection)-&gt;have_connection_lock<sp/>=<sp/>FALSE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_LOCK_CHECK(connection)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>((connection)-&gt;have_connection_lock)</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>A<sp/>&quot;DO_NOT_HAVE_LOCK_CHECK&quot;<sp/>is<sp/>impossible<sp/>since<sp/>we<sp/>need<sp/>the<sp/>lock<sp/>to<sp/>check<sp/>the<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TRACE_LOCKS<sp/>1</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONNECTION_LOCK(connection)<sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(TRACE_LOCKS)<sp/>{<sp/>_dbus_verbose<sp/>(&quot;LOCK\n&quot;);<sp/>}<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_dbus_mutex_lock<sp/>((connection)-&gt;mutex);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TOOK_LOCK_CHECK<sp/>(connection);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONNECTION_UNLOCK(connection)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(TRACE_LOCKS)<sp/>{<sp/>_dbus_verbose<sp/>(&quot;UNLOCK\n&quot;);<sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RELEASING_LOCK_CHECK<sp/>(connection);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_dbus_mutex_unlock<sp/>((connection)-&gt;mutex);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SLOTS_LOCK(connection)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_dbus_mutex_lock<sp/>((connection)-&gt;slot_mutex);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SLOTS_UNLOCK(connection)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_dbus_mutex_unlock<sp/>((connection)-&gt;slot_mutex);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DISPATCH_STATUS_NAME(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((s)<sp/>==<sp/>DBUS_DISPATCH_COMPLETE<sp/>?<sp/>&quot;complete&quot;<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s)<sp/>==<sp/>DBUS_DISPATCH_DATA_REMAINS<sp/>?<sp/>&quot;data<sp/>remains&quot;<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s)<sp/>==<sp/>DBUS_DISPATCH_NEED_MEMORY<sp/>?<sp/>&quot;need<sp/>memory&quot;<sp/>:<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;???&quot;)</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="212" refid="group__DBusConnectionInternals_1gaec8158f55878d1a6459ebdc9950fa783" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref><sp/><ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="structDBusMessageFilter" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref></highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219" refid="structDBusMessageFilter_1a2d2debd9a708cb7d4f8447c18f7458b9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusAtomic" kindref="compound" tooltip="An atomic integer safe to increment or decrement from multiple threads.">DBusAtomic</ref><sp/><ref refid="structDBusMessageFilter_1a2d2debd9a708cb7d4f8447c18f7458b9" kindref="member" tooltip="Reference count.">refcount</ref>;<sp/></highlight></codeline>
<codeline lineno="220" refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga13febac22a058c4fc98a90ce7da69489" kindref="member" tooltip="Called when a message needs to be handled.">DBusHandleMessageFunction</ref><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="221" refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" kindref="member" tooltip="User data for the function.">user_data</ref>;<sp/></highlight></codeline>
<codeline lineno="222" refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><ref refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" kindref="member" tooltip="Function to free the user data.">free_user_data_function</ref>;<sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal">};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="structDBusPreallocatedSend" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref></highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231" refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*<ref refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" kindref="member" tooltip="Connection we&amp;#39;d send the message to.">connection</ref>;<sp/></highlight></codeline>
<codeline lineno="232" refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*<ref refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" kindref="member" tooltip="Preallocated link in the queue.">queue_link</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233" refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*<ref refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" kindref="member" tooltip="Preallocated link in the resource counter.">counter_link</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal">};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_DECL_MSG_NOSIGNAL</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>_dbus_modify_sigpipe<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>_dbus_modify_sigpipe<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="245" refid="structDBusConnection" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref></highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247" refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusAtomic" kindref="compound" tooltip="An atomic integer safe to increment or decrement from multiple threads.">DBusAtomic</ref><sp/><ref refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" kindref="member" tooltip="Reference count.">refcount</ref>;<sp/></highlight></codeline>
<codeline lineno="249" refid="structDBusConnection_1ab5726e8d3ff6b08910899b7fe6d7293e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*<ref refid="structDBusConnection_1ab5726e8d3ff6b08910899b7fe6d7293e" kindref="member" tooltip="Lock on the entire DBusConnection.">mutex</ref>;<sp/></highlight></codeline>
<codeline lineno="251" refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="252" refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*<ref refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" kindref="member" tooltip="Notify when dispatch_acquired is available.">dispatch_cond</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253" refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="254" refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/>*<ref refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" kindref="member" tooltip="Notify when io_path_acquired is available.">io_path_cond</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256" refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*<ref refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" kindref="member" tooltip="Queue of messages we need to send, send the end of the list first.">outgoing_messages</ref>;<sp/></highlight></codeline>
<codeline lineno="257" refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>;<sp/></highlight></codeline>
<codeline lineno="259" refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref>;<sp/></highlight></codeline>
<codeline lineno="263" refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="264" refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="266" refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusCounter" kindref="compound" tooltip="Internals of DBusCounter.">DBusCounter</ref><sp/>*<ref refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" kindref="member" tooltip="Counts size of outgoing messages.">outgoing_counter</ref>;<sp/></highlight></codeline>
<codeline lineno="268" refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusTransport" kindref="compound" tooltip="Object representing a transport such as a socket.">DBusTransport</ref><sp/>*<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269" refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusWatchList" kindref="compound" tooltip="DBusWatchList implementation details.">DBusWatchList</ref><sp/>*<ref refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" kindref="member" tooltip="Stores active watches.">watches</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="270" refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusTimeoutList" kindref="compound" tooltip="DBusTimeoutList implementation details.">DBusTimeoutList</ref><sp/>*<ref refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" kindref="member" tooltip="Stores active timeouts.">timeouts</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="272" refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274" refid="structDBusConnection_1ad85b04cfea8a6a8efc5489f85b31122f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/>*<ref refid="structDBusConnection_1ad85b04cfea8a6a8efc5489f85b31122f" kindref="member" tooltip="Lock on slot_list so overall connection lock need not be taken.">slot_mutex</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275" refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusDataSlotList" kindref="compound" tooltip="Data structure that stores the actual user data set at a given slot.">DBusDataSlotList</ref><sp/><ref refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" kindref="member" tooltip="Data stored by allocated integer ID.">slot_list</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="277" refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusHashTable" kindref="compound" tooltip="Internals of DBusHashTable.">DBusHashTable</ref><sp/>*<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="279" refid="structDBusConnection_1a43d0bb9401103383e13ed3c99baf0daa" refkind="member"><highlight class="normal"><sp/><sp/>dbus_uint32_t<sp/><ref refid="structDBusConnection_1a43d0bb9401103383e13ed3c99baf0daa" kindref="member" tooltip="Client serial.">client_serial</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="280" refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref>;<sp/></highlight></codeline>
<codeline lineno="282" refid="structDBusConnection_1a211104e37f65d45ab8fcb149e4bcc84e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga4bea703ee5b9f8dfe79c4082c347d43d" kindref="member" tooltip="Called when the main loop&amp;#39;s thread should be notified that there&amp;#39;s now work to do.">DBusWakeupMainFunction</ref><sp/><ref refid="structDBusConnection_1a211104e37f65d45ab8fcb149e4bcc84e" kindref="member" tooltip="Function to wake up the mainloop.">wakeup_main_function</ref>;<sp/></highlight></codeline>
<codeline lineno="283" refid="structDBusConnection_1ac8aff7bafd9ed046d835c5ed80bc218c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structDBusConnection_1ac8aff7bafd9ed046d835c5ed80bc218c" kindref="member" tooltip="Application data for wakeup_main_function.">wakeup_main_data</ref>;<sp/></highlight></codeline>
<codeline lineno="284" refid="structDBusConnection_1a8da896126df262503431acd73638c917" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><ref refid="structDBusConnection_1a8da896126df262503431acd73638c917" kindref="member" tooltip="free wakeup_main_data">free_wakeup_main_data</ref>;<sp/></highlight></codeline>
<codeline lineno="286" refid="structDBusConnection_1af6cbafdf80cd474c654fc226581900a2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gaad6e12a5d298ef30a99d8c667abad58a" kindref="member" tooltip="Called when the return value of dbus_connection_get_dispatch_status() may have changed.">DBusDispatchStatusFunction</ref><sp/><ref refid="structDBusConnection_1af6cbafdf80cd474c654fc226581900a2" kindref="member" tooltip="Function on dispatch status changes.">dispatch_status_function</ref>;<sp/></highlight></codeline>
<codeline lineno="287" refid="structDBusConnection_1a0225f7934d1bd118ae2eeacf8a1c6f19" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structDBusConnection_1a0225f7934d1bd118ae2eeacf8a1c6f19" kindref="member" tooltip="Application data for dispatch_status_function.">dispatch_status_data</ref>;<sp/></highlight></codeline>
<codeline lineno="288" refid="structDBusConnection_1a71f8b1e2078c4edb98c62de1886dfb2a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><ref refid="structDBusConnection_1a71f8b1e2078c4edb98c62de1886dfb2a" kindref="member" tooltip="free dispatch_status_data">free_dispatch_status_data</ref>;<sp/></highlight></codeline>
<codeline lineno="290" refid="structDBusConnection_1af3bbd2ecba171ebb8e952eaa030971d7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/><ref refid="structDBusConnection_1af3bbd2ecba171ebb8e952eaa030971d7" kindref="member" tooltip="The last dispatch status we reported to the application.">last_dispatch_status</ref>;<sp/></highlight></codeline>
<codeline lineno="292" refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*<ref refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" kindref="member" tooltip="A cache of linked list links to prevent contention for the global linked list mempool lock...">link_cache</ref>;<sp/></highlight></codeline>
<codeline lineno="295" refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusObjectTree" kindref="compound" tooltip="Internals of DBusObjectTree.">DBusObjectTree</ref><sp/>*<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>;<sp/></highlight></codeline>
<codeline lineno="297" refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref>;<sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>two<sp/>MUST<sp/>be<sp/>bools<sp/>and<sp/>not<sp/>bitfields,<sp/>because<sp/>they<sp/>are<sp/>protected<sp/>by<sp/>a<sp/>separate<sp/>lock</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/>*<sp/>from<sp/>connection-&gt;mutex<sp/>and<sp/>all<sp/>bitfields<sp/>in<sp/>a<sp/>word<sp/>have<sp/>to<sp/>be<sp/>read/written<sp/>together.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/>*<sp/>So<sp/>you<sp/>can&apos;t<sp/>have<sp/>a<sp/>different<sp/>lock<sp/>for<sp/>different<sp/>bitfields<sp/>in<sp/>the<sp/>same<sp/>word.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><ref refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" kindref="member" tooltip="Someone has dispatch path (can drain incoming queue)">dispatch_acquired</ref>;<sp/></highlight></codeline>
<codeline lineno="304" refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="306" refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" kindref="member" tooltip="TRUE if libdbus owns a reference to the connection and can return it from dbus_connection_open() more...">shareable</ref><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="308" refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" kindref="member" tooltip="If TRUE, exit after handling disconnect signal.">exit_on_disconnect</ref><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="310" refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" kindref="member" tooltip="If TRUE, if org.freedesktop.DBus.Peer messages have a bus name, don&amp;#39;t handle them automatically...">route_peer_messages</ref><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="312" refid="structDBusConnection_1a48d141d4311211e921571043bdbaeefb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection_1a48d141d4311211e921571043bdbaeefb" kindref="member" tooltip="We popped or are dispatching the disconnected message.">disconnected_message_arrived</ref><sp/>:<sp/>1;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316" refid="structDBusConnection_1a3b2707b9d10d0643f91a8e027ae118b5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection_1a3b2707b9d10d0643f91a8e027ae118b5" kindref="member" tooltip="We did our default handling of the disconnected message, such as closing the connection.">disconnected_message_processed</ref><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor">#ifndef<sp/>DBUS_DISABLE_CHECKS</highlight></codeline>
<codeline lineno="321" refid="structDBusConnection_1a336a7953a4a28e55f6e6a07acfa11df3" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection_1a336a7953a4a28e55f6e6a07acfa11df3" kindref="member" tooltip="Used to check locking.">have_connection_lock</ref><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DBUS_DISABLE_CHECKS</highlight></codeline>
<codeline lineno="325" refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" kindref="member" tooltip="_dbus_current_generation that should correspond to this connection">generation</ref>;<sp/></highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor">#endif<sp/></highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"></highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>_dbus_connection_get_dispatch_status_unlocked<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/><sp/>new_status);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_last_unref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_acquire_dispatch<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_release_dispatch<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>_dbus_connection_flush_unlocked<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_close_possibly_shared_and_unlock<sp/><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_get_is_connected_unlocked<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_peek_for_reply_unlocked<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>client_serial);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref><sp/>*</highlight></codeline>
<codeline lineno="342"><highlight class="normal">_dbus_message_filter_ref<sp/>(<ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref><sp/>*filter)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_DISABLE_ASSERT</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;filter-&gt;<ref refid="structDBusMessageFilter_1a2d2debd9a708cb7d4f8447c18f7458b9" kindref="member" tooltip="Reference count.">refcount</ref>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>dbus_int32_t<sp/>old_value;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>old_value<sp/>=<sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;filter-&gt;<ref refid="structDBusMessageFilter_1a2d2debd9a708cb7d4f8447c18f7458b9" kindref="member" tooltip="Reference count.">refcount</ref>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(old_value<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filter;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">_dbus_message_filter_unref<sp/>(<ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref><sp/>*filter)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>dbus_int32_t<sp/>old_value;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>old_value<sp/>=<sp/><ref refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" kindref="member" tooltip="Atomically decrement an integer.">_dbus_atomic_dec</ref><sp/>(&amp;filter-&gt;<ref refid="structDBusMessageFilter_1a2d2debd9a708cb7d4f8447c18f7458b9" kindref="member" tooltip="Reference count.">refcount</ref>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(old_value<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_value<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter-&gt;<ref refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" kindref="member" tooltip="Function to free the user data.">free_user_data_function</ref>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" kindref="member" tooltip="Function to free the user data.">free_user_data_function</ref>)<sp/>(filter-&gt;<ref refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" kindref="member" tooltip="User data for the function.">user_data</ref>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(filter);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="group__DBusConnectionInternals_1ga4fe0c8f7b72dc89b9e1a3110db2f778e" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga4fe0c8f7b72dc89b9e1a3110db2f778e" kindref="member" tooltip="Acquires the connection lock.">_dbus_connection_lock</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="group__DBusConnectionInternals_1ga3db10d48ec16e485d5a638aacebd4ad2" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga3db10d48ec16e485d5a638aacebd4ad2" kindref="member" tooltip="Releases the connection lock.">_dbus_connection_unlock</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">_dbus_connection_wakeup_mainloop<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a211104e37f65d45ab8fcb149e4bcc84e" kindref="member" tooltip="Function to wake up the mainloop.">wakeup_main_function</ref>)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>(*connection-&gt;<ref refid="structDBusConnection_1a211104e37f65d45ab8fcb149e4bcc84e" kindref="member" tooltip="Function to wake up the mainloop.">wakeup_main_function</ref>)<sp/>(connection-&gt;<ref refid="structDBusConnection_1ac8aff7bafd9ed046d835c5ed80bc218c" kindref="member" tooltip="Application data for wakeup_main_function.">wakeup_main_data</ref>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>For<sp/>now<sp/>this<sp/>function<sp/>isn&apos;t<sp/>used<sp/>*/</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="421"><highlight class="normal">_dbus_connection_queue_received_message<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*message)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" kindref="member" tooltip="Allocates a linked list node.">_dbus_list_alloc_link</ref><sp/>(message);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMessage_1ga834035e4817acd64adc8ca584bdf3982" kindref="member" tooltip="Increments the reference count of a DBusMessage.">dbus_message_ref</ref><sp/>(message);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1gac1b92eba0aeee294dc28fcc260c9b749" kindref="member" tooltip="Adds a message-containing list link to the incoming message queue, taking ownership of the link and t...">_dbus_connection_queue_received_message_link</ref><sp/>(connection,<sp/>link);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal">_dbus_connection_test_get_locks<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/><sp/><sp/>**mutex_loc,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/><sp/><sp/>**dispatch_mutex_loc,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member" tooltip="An opaque mutex type provided by the DBusThreadFunctions implementation installed by dbus_threads_ini...">DBusMutex</ref><sp/><sp/><sp/><sp/><sp/>**io_path_mutex_loc,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/><sp/><sp/>**dispatch_cond_loc,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref><sp/><sp/><sp/>**io_path_cond_loc)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>*mutex_loc<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1ab5726e8d3ff6b08910899b7fe6d7293e" kindref="member" tooltip="Lock on the entire DBusConnection.">mutex</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>*dispatch_mutex_loc<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>*io_path_mutex_loc<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>;<sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>*dispatch_cond_loc<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" kindref="member" tooltip="Notify when dispatch_acquired is available.">dispatch_cond</ref>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>*io_path_cond_loc<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" kindref="member" tooltip="Notify when io_path_acquired is available.">io_path_cond</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="472"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="group__DBusConnectionInternals_1gac1b92eba0aeee294dc28fcc260c9b749" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1gac1b92eba0aeee294dc28fcc260c9b749" kindref="member" tooltip="Adds a message-containing list link to the incoming message queue, taking ownership of the link and t...">_dbus_connection_queue_received_message_link</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*link)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>dbus_uint32_t<sp/>reply_serial;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*message;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(<ref refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" kindref="member" tooltip="Returns TRUE if we have been authenticated.">_dbus_transport_get_is_authenticated</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>));</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" kindref="member" tooltip="Appends a link to the list.">_dbus_list_append_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>message<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>is<sp/>a<sp/>reply<sp/>we&apos;re<sp/>waiting<sp/>on,<sp/>remove<sp/>timeout<sp/>for<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>reply_serial<sp/>=<sp/><ref refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" kindref="member" tooltip="Returns the serial that the message is a reply to or 0 if none.">dbus_message_get_reply_serial</ref><sp/>(message);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reply_serial<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pending<sp/>=<sp/><ref refid="group__DBusHashTable_1ga36ff49c4c35599e6fcdadc7f6805c49e" kindref="member" tooltip="Looks up the value for a given integer in a hash table of type DBUS_HASH_INT.">_dbus_hash_table_lookup_int</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply_serial);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusPendingCallInternals_1gaf1e630b966722af540502329ed028254" kindref="member" tooltip="Checks to see if a timeout has been added.">_dbus_pending_call_is_timeout_added_unlocked</ref><sp/>(pending))</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" kindref="member" tooltip="Removes a timeout using the connection&amp;#39;s DBusRemoveTimeoutFunction if available.">_dbus_connection_remove_timeout_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" kindref="member" tooltip="Retrives the timeout.">_dbus_pending_call_get_timeout_unlocked</ref><sp/>(pending));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" kindref="member" tooltip="Sets wether the timeout has been added.">_dbus_pending_call_set_timeout_added_unlocked</ref><sp/>(pending,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>_dbus_connection_wakeup_mainloop<sp/>(connection);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Message<sp/>%p<sp/>(%s<sp/>%s<sp/>%s<sp/>%s<sp/>&apos;%s&apos;<sp/>reply<sp/>to<sp/>%u)<sp/>added<sp/>to<sp/>incoming<sp/>queue<sp/>%p,<sp/>%d<sp/>incoming\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" kindref="member" tooltip="Utility function to convert a D-Bus message type into a machine-readable string (not translated)...">dbus_message_type_to_string</ref><sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message)),</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" kindref="member" tooltip="Gets the object path this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitt...">dbus_message_get_path</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" kindref="member" tooltip="Gets the object path this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitt...">dbus_message_get_path</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>path&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>interface&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>member&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" kindref="member" tooltip="Gets the type signature of the message, i.e.">dbus_message_get_signature</ref><sp/>(message),</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" kindref="member" tooltip="Returns the serial that the message is a reply to or 0 if none.">dbus_message_get_reply_serial</ref><sp/>(message),</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref>);}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="group__DBusConnectionInternals_1gadb7a525dc6b566b575ee4f9b20028b04" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1gadb7a525dc6b566b575ee4f9b20028b04" kindref="member" tooltip="Adds a link + message to the incoming message queue.">_dbus_connection_queue_synthesized_message_link</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" kindref="member" tooltip="Appends a link to the list.">_dbus_list_append_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>_dbus_connection_wakeup_mainloop<sp/>(connection);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Synthesized<sp/>message<sp/>%p<sp/>added<sp/>to<sp/>incoming<sp/>queue<sp/>%p,<sp/>%d<sp/>incoming\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>,<sp/>connection,<sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="558" refid="group__DBusConnectionInternals_1ga3d31a01751860b67f960dcaffb7bb4ef" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga3d31a01751860b67f960dcaffb7bb4ef" kindref="member" tooltip="Checks whether there are messages in the outgoing message queue.">_dbus_connection_has_messages_to_send_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connection-&gt;<ref refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" kindref="member" tooltip="Queue of messages we need to send, send the end of the list first.">outgoing_messages</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="574" refid="group__DBusConnection_1gac40563ec4c0e309d936daf3163ba9bb7" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga2210bb5734c1a04d0d654b026f27d94e" kindref="member" tooltip="Checks whether there are messages in the outgoing message queue.">dbus_connection_has_messages_to_send</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>v;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/><ref refid="group__DBusConnectionInternals_1ga3d31a01751860b67f960dcaffb7bb4ef" kindref="member" tooltip="Checks whether there are messages in the outgoing message queue.">_dbus_connection_has_messages_to_send_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref>*</highlight></codeline>
<codeline lineno="595" refid="group__DBusConnectionInternals_1ga3955cd53ac4f671a5bb54019887389a7" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga3955cd53ac4f671a5bb54019887389a7" kindref="member" tooltip="Gets the next outgoing message.">_dbus_connection_get_message_to_send</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusList_1ga18afc36fff1636a71295bcc7a75dc4f6" kindref="member" tooltip="Gets the last data in the list.">_dbus_list_get_last</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" kindref="member" tooltip="Queue of messages we need to send, send the end of the list first.">outgoing_messages</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611" refid="group__DBusConnectionInternals_1ga2d04df24d0f54a4e2dcfbede4ef50f09" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga2d04df24d0f54a4e2dcfbede4ef50f09" kindref="member" tooltip="Notifies the connection that a message has been sent, so the message can be removed from the outgoing...">_dbus_connection_message_sent</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*message)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>can<sp/>be<sp/>called<sp/>before<sp/>we<sp/>even<sp/>complete<sp/>authentication,<sp/>since</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/><sp/>*<sp/>it&apos;s<sp/>called<sp/>on<sp/>disconnect<sp/>to<sp/>clean<sp/>up<sp/>the<sp/>outgoing<sp/>queue.</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/><sp/>*<sp/>It&apos;s<sp/>also<sp/>called<sp/>as<sp/>we<sp/>successfully<sp/>send<sp/>each<sp/>message.</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" kindref="member" tooltip="Gets the last link in the list.">_dbus_list_get_last_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" kindref="member" tooltip="Queue of messages we need to send, send the end of the list first.">outgoing_messages</ref>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref><sp/>==<sp/>message);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>this<sp/>link<sp/>in<sp/>the<sp/>link<sp/>cache<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" kindref="member" tooltip="Removes the given link from the list, but doesn&amp;#39;t free it.">_dbus_list_unlink</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" kindref="member" tooltip="Queue of messages we need to send, send the end of the list first.">outgoing_messages</ref>,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" kindref="member" tooltip="Prepends a link to the list.">_dbus_list_prepend_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" kindref="member" tooltip="A cache of linked list links to prevent contention for the global linked list mempool lock...">link_cache</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Message<sp/>%p<sp/>(%s<sp/>%s<sp/>%s<sp/>%s<sp/>&apos;%s&apos;)<sp/>removed<sp/>from<sp/>outgoing<sp/>queue<sp/>%p,<sp/>%d<sp/>left<sp/>to<sp/>send\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" kindref="member" tooltip="Utility function to convert a D-Bus message type into a machine-readable string (not translated)...">dbus_message_type_to_string</ref><sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message)),</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" kindref="member" tooltip="Gets the object path this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitt...">dbus_message_get_path</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" kindref="member" tooltip="Gets the object path this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitt...">dbus_message_get_path</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>path&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>interface&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>member&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" kindref="member" tooltip="Gets the type signature of the message, i.e.">dbus_message_get_signature</ref><sp/>(message),</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection,<sp/>connection-&gt;<ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref>);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>this<sp/>link<sp/>in<sp/>the<sp/>link<sp/>cache<sp/>also<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMessageInternals_1ga339e5ead12e353a66fb93f1c1d441c3a" kindref="member" tooltip="Removes a counter tracking the size/unix fds of this message, and decrements the counter by the size/...">_dbus_message_remove_counter</ref><sp/>(message,<sp/>connection-&gt;<ref refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" kindref="member" tooltip="Counts size of outgoing messages.">outgoing_counter</ref>,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;link);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" kindref="member" tooltip="Prepends a link to the list.">_dbus_list_prepend_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" kindref="member" tooltip="A cache of linked list links to prevent contention for the global linked list mempool lock...">link_cache</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(message);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="group__DBusConnectionInternals_1gab3c673c1e36e293c5f2baa92418603a3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>(*<sp/><ref refid="group__DBusConnectionInternals_1gab3c673c1e36e293c5f2baa92418603a3" kindref="member" tooltip="Function to be called in protected_change_watch() with refcount held.">DBusWatchAddFunction</ref>)<sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusWatchList" kindref="compound" tooltip="DBusWatchList implementation details.">DBusWatchList</ref><sp/>*list,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusWatch" kindref="compound" tooltip="Implementation of DBusWatch.">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/>*watch);</highlight></codeline>
<codeline lineno="661" refid="group__DBusConnectionInternals_1ga475a0e9a2f2b7a279ba07fa3352114d4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnectionInternals_1ga475a0e9a2f2b7a279ba07fa3352114d4" kindref="member" tooltip="Function to be called in protected_change_watch() with refcount held.">DBusWatchRemoveFunction</ref>)<sp/><sp/>(<ref refid="structDBusWatchList" kindref="compound" tooltip="DBusWatchList implementation details.">DBusWatchList</ref><sp/>*list,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusWatch" kindref="compound" tooltip="Implementation of DBusWatch.">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/>*watch);</highlight></codeline>
<codeline lineno="664" refid="group__DBusConnectionInternals_1ga851f0958d46980f5a39bcfb874a4cb78" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnectionInternals_1ga851f0958d46980f5a39bcfb874a4cb78" kindref="member" tooltip="Function to be called in protected_change_watch() with refcount held.">DBusWatchToggleFunction</ref>)<sp/><sp/>(<ref refid="structDBusWatchList" kindref="compound" tooltip="DBusWatchList implementation details.">DBusWatchList</ref><sp/>*list,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusWatch" kindref="compound" tooltip="Implementation of DBusWatch.">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/>*watch,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/>enabled);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="669"><highlight class="normal">protected_change_watch<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusWatch" kindref="compound" tooltip="Implementation of DBusWatch.">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1gab3c673c1e36e293c5f2baa92418603a3" kindref="member" tooltip="Function to be called in protected_change_watch() with refcount held.">DBusWatchAddFunction</ref><sp/><sp/><sp/><sp/>add_function,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga475a0e9a2f2b7a279ba07fa3352114d4" kindref="member" tooltip="Function to be called in protected_change_watch() with refcount held.">DBusWatchRemoveFunction</ref><sp/>remove_function,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga851f0958d46980f5a39bcfb874a4cb78" kindref="member" tooltip="Function to be called in protected_change_watch() with refcount held.">DBusWatchToggleFunction</ref><sp/>toggle_function,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enabled)</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>original<sp/>purpose<sp/>of<sp/>protected_change_watch()<sp/>was<sp/>to<sp/>hold<sp/>a</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/>*<sp/>ref<sp/>on<sp/>the<sp/>connection<sp/>while<sp/>dropping<sp/>the<sp/>connection<sp/>lock,<sp/>then</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/>*<sp/>calling<sp/>out<sp/>to<sp/>the<sp/>app.<sp/><sp/>This<sp/>was<sp/>a<sp/>broken<sp/>hack<sp/>that<sp/>did<sp/>not</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/>*<sp/>work,<sp/>since<sp/>the<sp/>connection<sp/>was<sp/>in<sp/>a<sp/>hosed<sp/>state<sp/>(no<sp/>WatchList</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/><sp/>*<sp/>field)<sp/>while<sp/>calling<sp/>out.</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/>*<sp/>So<sp/>for<sp/>now<sp/>we&apos;ll<sp/>just<sp/>keep<sp/>the<sp/>lock<sp/>while<sp/>calling<sp/>out.<sp/>This<sp/>means</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/>*<sp/>apps<sp/>are<sp/>not<sp/>allowed<sp/>to<sp/>call<sp/>DBusConnection<sp/>methods<sp/>inside<sp/>a</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/>*<sp/>watch<sp/>function<sp/>or<sp/>they<sp/>will<sp/>deadlock.</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>&quot;real<sp/>fix&quot;<sp/>is<sp/>to<sp/>use<sp/>the<sp/>_and_unlock()<sp/>pattern<sp/>found</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/>*<sp/>elsewhere<sp/>in<sp/>the<sp/>code,<sp/>to<sp/>defer<sp/>calling<sp/>out<sp/>to<sp/>the<sp/>app<sp/>until</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/><sp/>*<sp/>we&apos;re<sp/>about<sp/>to<sp/>drop<sp/>locks<sp/>and<sp/>return<sp/>flow<sp/>of<sp/>control<sp/>to<sp/>the<sp/>app</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/><sp/>*<sp/>anyway.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/><sp/>*<sp/>See<sp/>http://lists.freedesktop.org/archives/dbus/2007-July/thread.html#8144</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" kindref="member" tooltip="Stores active watches.">watches</ref>)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add_function)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>(*<sp/>add_function)<sp/>(connection-&gt;<ref refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" kindref="member" tooltip="Stores active watches.">watches</ref>,<sp/>watch);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove_function)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>remove_function)<sp/>(connection-&gt;<ref refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" kindref="member" tooltip="Stores active watches.">watches</ref>,<sp/>watch);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>toggle_function)<sp/>(connection-&gt;<ref refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" kindref="member" tooltip="Stores active watches.">watches</ref>,<sp/>watch,<sp/>enabled);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="731" refid="group__DBusConnectionInternals_1ga82adef36b4cd583bc1146eae5756c063" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga82adef36b4cd583bc1146eae5756c063" kindref="member" tooltip="Adds a watch using the connection&amp;#39;s DBusAddWatchFunction if available.">_dbus_connection_add_watch_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusWatch" kindref="compound" tooltip="Implementation of DBusWatch.">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/>*watch)</highlight></codeline>
<codeline lineno="733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>protected_change_watch<sp/>(connection,<sp/>watch,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusWatchInternals_1gaec61655a4bd6186a6a1ec104771d8af5" kindref="member" tooltip="Adds a new watch to the watch list, invoking the application DBusAddWatchFunction if appropriate...">_dbus_watch_list_add_watch</ref>,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="group__DBusConnectionInternals_1ga65fc02c0756d0c7caaa39cd60922c99b" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga65fc02c0756d0c7caaa39cd60922c99b" kindref="member" tooltip="Removes a watch using the connection&amp;#39;s DBusRemoveWatchFunction if available.">_dbus_connection_remove_watch_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusWatch" kindref="compound" tooltip="Implementation of DBusWatch.">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/>*watch)</highlight></codeline>
<codeline lineno="751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>protected_change_watch<sp/>(connection,<sp/>watch,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusWatchInternals_1ga76894d297bc7d7d23cbacdc2b1778884" kindref="member" tooltip="Removes a watch from the watch list, invoking the application&amp;#39;s DBusRemoveWatchFunction if appropriat...">_dbus_watch_list_remove_watch</ref>,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769" refid="group__DBusConnectionInternals_1ga6c00e2eaf225b154760976af5688d250" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga6c00e2eaf225b154760976af5688d250" kindref="member" tooltip="Toggles a watch and notifies app via connection&amp;#39;s DBusWatchToggledFunction if available.">_dbus_connection_toggle_watch_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusWatch" kindref="compound" tooltip="Implementation of DBusWatch.">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/>*watch,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/>enabled)</highlight></codeline>
<codeline lineno="772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(watch<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>protected_change_watch<sp/>(connection,<sp/>watch,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusWatchInternals_1ga14bb50e8663a1d9d3960b4f73c09c097" kindref="member" tooltip="Sets a watch to the given enabled state, invoking the application&amp;#39;s DBusWatchToggledFunction if appro...">_dbus_watch_list_toggle_watch</ref>,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enabled);</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="group__DBusConnectionInternals_1ga6ca28a0af7de84c51fdbafe8786d3446" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>(*<sp/><ref refid="group__DBusConnectionInternals_1ga6ca28a0af7de84c51fdbafe8786d3446" kindref="member" tooltip="Function to be called in protected_change_timeout() with refcount held.">DBusTimeoutAddFunction</ref>)<sp/><sp/><sp/><sp/>(<ref refid="structDBusTimeoutList" kindref="compound" tooltip="DBusTimeoutList implementation details.">DBusTimeoutList</ref><sp/>*list,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusTimeout" kindref="compound" tooltip="Internals of DBusTimeout.">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/>*timeout);</highlight></codeline>
<codeline lineno="785" refid="group__DBusConnectionInternals_1gafe75d05f2abf712c7fe13691ef27754c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnectionInternals_1gafe75d05f2abf712c7fe13691ef27754c" kindref="member" tooltip="Function to be called in protected_change_timeout() with refcount held.">DBusTimeoutRemoveFunction</ref>)<sp/>(<ref refid="structDBusTimeoutList" kindref="compound" tooltip="DBusTimeoutList implementation details.">DBusTimeoutList</ref><sp/>*list,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusTimeout" kindref="compound" tooltip="Internals of DBusTimeout.">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/>*timeout);</highlight></codeline>
<codeline lineno="788" refid="group__DBusConnectionInternals_1ga1b4c97e7ef6f2cb8704cf74acc03c727" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnectionInternals_1ga1b4c97e7ef6f2cb8704cf74acc03c727" kindref="member" tooltip="Function to be called in protected_change_timeout() with refcount held.">DBusTimeoutToggleFunction</ref>)<sp/>(<ref refid="structDBusTimeoutList" kindref="compound" tooltip="DBusTimeoutList implementation details.">DBusTimeoutList</ref><sp/>*list,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusTimeout" kindref="compound" tooltip="Internals of DBusTimeout.">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/>*timeout,</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>enabled);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="793"><highlight class="normal">protected_change_timeout<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusTimeout" kindref="compound" tooltip="Internals of DBusTimeout.">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*timeout,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga6ca28a0af7de84c51fdbafe8786d3446" kindref="member" tooltip="Function to be called in protected_change_timeout() with refcount held.">DBusTimeoutAddFunction</ref><sp/><sp/><sp/><sp/>add_function,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1gafe75d05f2abf712c7fe13691ef27754c" kindref="member" tooltip="Function to be called in protected_change_timeout() with refcount held.">DBusTimeoutRemoveFunction</ref><sp/>remove_function,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga1b4c97e7ef6f2cb8704cf74acc03c727" kindref="member" tooltip="Function to be called in protected_change_timeout() with refcount held.">DBusTimeoutToggleFunction</ref><sp/>toggle_function,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enabled)</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>original<sp/>purpose<sp/>of<sp/>protected_change_timeout()<sp/>was<sp/>to<sp/>hold<sp/>a</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/><sp/><sp/>*<sp/>ref<sp/>on<sp/>the<sp/>connection<sp/>while<sp/>dropping<sp/>the<sp/>connection<sp/>lock,<sp/>then</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/>*<sp/>calling<sp/>out<sp/>to<sp/>the<sp/>app.<sp/><sp/>This<sp/>was<sp/>a<sp/>broken<sp/>hack<sp/>that<sp/>did<sp/>not</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/>*<sp/>work,<sp/>since<sp/>the<sp/>connection<sp/>was<sp/>in<sp/>a<sp/>hosed<sp/>state<sp/>(no<sp/>TimeoutList</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/>*<sp/>field)<sp/>while<sp/>calling<sp/>out.</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/>*<sp/>So<sp/>for<sp/>now<sp/>we&apos;ll<sp/>just<sp/>keep<sp/>the<sp/>lock<sp/>while<sp/>calling<sp/>out.<sp/>This<sp/>means</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/>*<sp/>apps<sp/>are<sp/>not<sp/>allowed<sp/>to<sp/>call<sp/>DBusConnection<sp/>methods<sp/>inside<sp/>a</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/>*<sp/>timeout<sp/>function<sp/>or<sp/>they<sp/>will<sp/>deadlock.</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>&quot;real<sp/>fix&quot;<sp/>is<sp/>to<sp/>use<sp/>the<sp/>_and_unlock()<sp/>pattern<sp/>found</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/>*<sp/>elsewhere<sp/>in<sp/>the<sp/>code,<sp/>to<sp/>defer<sp/>calling<sp/>out<sp/>to<sp/>the<sp/>app<sp/>until</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/>*<sp/>we&apos;re<sp/>about<sp/>to<sp/>drop<sp/>locks<sp/>and<sp/>return<sp/>flow<sp/>of<sp/>control<sp/>to<sp/>the<sp/>app</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/>*<sp/>anyway.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/>*<sp/>See<sp/>http://lists.freedesktop.org/archives/dbus/2007-July/thread.html#8144</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" kindref="member" tooltip="Stores active timeouts.">timeouts</ref>)</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add_function)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>(*<sp/>add_function)<sp/>(connection-&gt;<ref refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" kindref="member" tooltip="Stores active timeouts.">timeouts</ref>,<sp/>timeout);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove_function)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>remove_function)<sp/>(connection-&gt;<ref refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" kindref="member" tooltip="Stores active timeouts.">timeouts</ref>,<sp/>timeout);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>toggle_function)<sp/>(connection-&gt;<ref refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" kindref="member" tooltip="Stores active timeouts.">timeouts</ref>,<sp/>timeout,<sp/>enabled);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="855" refid="group__DBusConnectionInternals_1ga69e87e3be94b8c681585ec870e39a64a" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga69e87e3be94b8c681585ec870e39a64a" kindref="member" tooltip="Adds a timeout using the connection&amp;#39;s DBusAddTimeoutFunction if available.">_dbus_connection_add_timeout_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusTimeout" kindref="compound" tooltip="Internals of DBusTimeout.">DBusTimeout</ref><sp/><sp/><sp/><sp/>*timeout)</highlight></codeline>
<codeline lineno="857"><highlight class="normal">{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>protected_change_timeout<sp/>(connection,<sp/>timeout,</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTimeoutInternals_1ga14955f061551ece122808b9e6ddc0757" kindref="member" tooltip="Adds a new timeout to the timeout list, invoking the application DBusAddTimeoutFunction if appropriat...">_dbus_timeout_list_add_timeout</ref>,</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" kindref="member" tooltip="Removes a timeout using the connection&amp;#39;s DBusRemoveTimeoutFunction if available.">_dbus_connection_remove_timeout_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusTimeout" kindref="compound" tooltip="Internals of DBusTimeout.">DBusTimeout</ref><sp/><sp/><sp/><sp/>*timeout)</highlight></codeline>
<codeline lineno="875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>protected_change_timeout<sp/>(connection,<sp/>timeout,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTimeoutInternals_1gaec0ffafdcac87f23878a2ddded044822" kindref="member" tooltip="Removes a timeout from the timeout list, invoking the application&amp;#39;s DBusRemoveTimeoutFunction if appr...">_dbus_timeout_list_remove_timeout</ref>,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893" refid="group__DBusConnectionInternals_1ga165dcfd8b995ff0edd19aebcf3e1a61a" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga165dcfd8b995ff0edd19aebcf3e1a61a" kindref="member" tooltip="Toggles a timeout and notifies app via connection&amp;#39;s DBusTimeoutToggledFunction if available...">_dbus_connection_toggle_timeout_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusTimeout" kindref="compound" tooltip="Internals of DBusTimeout.">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/><sp/>*timeout,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enabled)</highlight></codeline>
<codeline lineno="896"><highlight class="normal">{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>protected_change_timeout<sp/>(connection,<sp/>timeout,</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTimeoutInternals_1ga3d1ee0968a47651c5428ebf48711b217" kindref="member" tooltip="Sets a timeout to the given enabled state, invoking the application&amp;#39;s DBusTimeoutToggledFunction if a...">_dbus_timeout_list_toggle_timeout</ref>,</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enabled);</highlight></codeline>
<codeline lineno="901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="904"><highlight class="normal">_dbus_connection_attach_pending_call_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending)</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>dbus_uint32_t<sp/>reply_serial;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><ref refid="structDBusTimeout" kindref="compound" tooltip="Internals of DBusTimeout.">DBusTimeout</ref><sp/>*timeout;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>reply_serial<sp/>=<sp/><ref refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" kindref="member" tooltip="Gets the reply&amp;#39;s serial number.">_dbus_pending_call_get_reply_serial_unlocked</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(reply_serial<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>timeout<sp/>=<sp/><ref refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" kindref="member" tooltip="Retrives the timeout.">_dbus_pending_call_get_timeout_unlocked</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusConnectionInternals_1ga69e87e3be94b8c681585ec870e39a64a" kindref="member" tooltip="Adds a timeout using the connection&amp;#39;s DBusAddTimeoutFunction if available.">_dbus_connection_add_timeout_unlocked</ref><sp/>(connection,<sp/>timeout))</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusHashTable_1gaca20a83f3214db08fa34df2c49c8edd5" kindref="member" tooltip="Creates a hash entry with the given key and value.">_dbus_hash_table_insert_int</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply_serial,</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pending))</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" kindref="member" tooltip="Removes a timeout using the connection&amp;#39;s DBusRemoveTimeoutFunction if available.">_dbus_connection_remove_timeout_unlocked</ref><sp/>(connection,<sp/>timeout);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" kindref="member" tooltip="Sets wether the timeout has been added.">_dbus_pending_call_set_timeout_added_unlocked</ref><sp/>(pending,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" kindref="member" tooltip="Sets wether the timeout has been added.">_dbus_pending_call_set_timeout_added_unlocked</ref><sp/>(pending,<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusHashTable_1gaca20a83f3214db08fa34df2c49c8edd5" kindref="member" tooltip="Creates a hash entry with the given key and value.">_dbus_hash_table_insert_int</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply_serial,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pending))</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" kindref="member" tooltip="Increments the reference count on a pending call, while the lock on its connection is already held...">_dbus_pending_call_ref_unlocked</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal">free_pending_call_on_hash_removal<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/>*connection;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>pending<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusPendingCallInternals_1gae725060aa80d9df58dcee4f1fa108784" kindref="member" tooltip="Gets the connection associated with this pending call.">_dbus_pending_call_get_connection_unlocked</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusPendingCallInternals_1gaf1e630b966722af540502329ed028254" kindref="member" tooltip="Checks to see if a timeout has been added.">_dbus_pending_call_is_timeout_added_unlocked</ref><sp/>(pending))</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" kindref="member" tooltip="Removes a timeout using the connection&amp;#39;s DBusRemoveTimeoutFunction if available.">_dbus_connection_remove_timeout_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" kindref="member" tooltip="Retrives the timeout.">_dbus_pending_call_get_timeout_unlocked</ref><sp/>(pending));</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" kindref="member" tooltip="Sets wether the timeout has been added.">_dbus_pending_call_set_timeout_added_unlocked</ref><sp/>(pending,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME<sp/>1.0?<sp/>this<sp/>is<sp/>sort<sp/>of<sp/>dangerous<sp/>and<sp/>undesirable<sp/>to<sp/>drop<sp/>the<sp/>lock<sp/></highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/>*<sp/>here,<sp/>but<sp/>the<sp/>pending<sp/>call<sp/>finalizer<sp/>could<sp/>in<sp/>principle<sp/>call<sp/>out<sp/>to<sp/></highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/>*<sp/>application<sp/>code<sp/>so<sp/>we<sp/>pretty<sp/>much<sp/>have<sp/>to...<sp/>some<sp/>larger<sp/>code<sp/>reorg<sp/></highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/>*<sp/>might<sp/>be<sp/>needed.</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" kindref="member" tooltip="Increments the reference count of a DBusConnection.">_dbus_connection_ref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga26f09beed0dd6323cca0452abf344567" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">_dbus_pending_call_unref_and_unlock</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" kindref="member" tooltip="Decrements the reference count of a DBusConnection.">_dbus_connection_unref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">_dbus_connection_detach_pending_call_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending)</highlight></codeline>
<codeline lineno="991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>ends<sp/>up<sp/>unlocking<sp/>to<sp/>call<sp/>the<sp/>pending<sp/>call<sp/>finalizer,<sp/>which<sp/>is<sp/>unexpected<sp/>to</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/><sp/>*<sp/>say<sp/>the<sp/>least.</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><ref refid="group__DBusHashTable_1gacdebe75bd692605a69dc73c15e0eefd0" kindref="member" tooltip="Removes the hash entry for the given key.">_dbus_hash_table_remove_int</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" kindref="member" tooltip="Gets the reply&amp;#39;s serial number.">_dbus_pending_call_get_reply_serial_unlocked</ref><sp/>(pending));</highlight></codeline>
<codeline lineno="997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal">_dbus_connection_detach_pending_call_and_unlock<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>idea<sp/>here<sp/>is<sp/>to<sp/>avoid<sp/>finalizing<sp/>the<sp/>pending<sp/>call</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/><sp/>*<sp/>with<sp/>the<sp/>lock<sp/>held,<sp/>since<sp/>there&apos;s<sp/>a<sp/>destroy<sp/>notifier</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>pending<sp/>call<sp/>that<sp/>goes<sp/>out<sp/>to<sp/>application<sp/>code.</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/><sp/><sp/>*<sp/>There&apos;s<sp/>an<sp/>extra<sp/>unlock<sp/>inside<sp/>the<sp/>hash<sp/>table</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/><sp/>*<sp/>&quot;free<sp/>pending<sp/>call&quot;<sp/>function<sp/>FIXME...</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" kindref="member" tooltip="Increments the reference count on a pending call, while the lock on its connection is already held...">_dbus_pending_call_ref_unlocked</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><ref refid="group__DBusHashTable_1gacdebe75bd692605a69dc73c15e0eefd0" kindref="member" tooltip="Removes the hash entry for the given key.">_dbus_hash_table_remove_int</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" kindref="member" tooltip="Gets the reply&amp;#39;s serial number.">_dbus_pending_call_get_reply_serial_unlocked</ref><sp/>(pending));</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusPendingCallInternals_1gaf1e630b966722af540502329ed028254" kindref="member" tooltip="Checks to see if a timeout has been added.">_dbus_pending_call_is_timeout_added_unlocked</ref><sp/>(pending))</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" kindref="member" tooltip="Removes a timeout using the connection&amp;#39;s DBusRemoveTimeoutFunction if available.">_dbus_connection_remove_timeout_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" kindref="member" tooltip="Retrives the timeout.">_dbus_pending_call_get_timeout_unlocked</ref><sp/>(pending));</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" kindref="member" tooltip="Sets wether the timeout has been added.">_dbus_pending_call_set_timeout_added_unlocked</ref><sp/>(pending,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga26f09beed0dd6323cca0452abf344567" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">_dbus_pending_call_unref_and_unlock</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032" refid="group__DBusConnectionInternals_1ga968196bee49659e75c54b53d7c85fa51" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga968196bee49659e75c54b53d7c85fa51" kindref="member" tooltip="Removes a pending call from the connection, such that the pending reply will be ignored.">_dbus_connection_remove_pending_call</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>_dbus_connection_detach_pending_call_and_unlock<sp/>(connection,<sp/>pending);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1049"><highlight class="normal">_dbus_connection_acquire_io_path<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>we_acquired;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>don&apos;t<sp/>want<sp/>the<sp/>connection<sp/>to<sp/>vanish<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" kindref="member" tooltip="Increments the reference count of a DBusConnection.">_dbus_connection_ref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>will<sp/>only<sp/>touch<sp/>io_path_acquired<sp/>which<sp/>is<sp/>protected<sp/>by<sp/>our<sp/>mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;locking<sp/>io_path_mutex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1gae6eafe138e9c317bfb25971d1d8bef2d" kindref="member" tooltip="Locks a mutex.">_dbus_mutex_lock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;start<sp/>connection-&gt;io_path_acquired<sp/>=<sp/>%d<sp/>timeout<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref>,<sp/>timeout_milliseconds);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>we_acquired<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref>)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout_milliseconds<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;waiting<sp/>%d<sp/>for<sp/>IO<sp/>path<sp/>to<sp/>be<sp/>acquirable\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusThreadsInternals_1gaac7b2117e5479ca6858734b59cfb9259" kindref="member" tooltip="Atomically unlocks the mutex and waits for the conditions variable to be signalled, or for a timeout.">_dbus_condvar_wait_timeout</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" kindref="member" tooltip="Notify when io_path_acquired is available.">io_path_cond</ref>,</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>,</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds))</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>timed<sp/>out<sp/>before<sp/>anyone<sp/>signaled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(writing<sp/>the<sp/>loop<sp/>to<sp/>handle<sp/>the<sp/>!timedout<sp/>case<sp/>by</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>waiting<sp/>longer<sp/>if<sp/>needed<sp/>is<sp/>a<sp/>pain<sp/>since<sp/>dbus</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wraps<sp/>pthread_cond_timedwait<sp/>to<sp/>take<sp/>a<sp/>relative</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>time<sp/>instead<sp/>of<sp/>absolute,<sp/>something<sp/>kind<sp/>of<sp/>stupid</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>on<sp/>our<sp/>part.<sp/>for<sp/>now<sp/>it<sp/>doesn&apos;t<sp/>matter,<sp/>we<sp/>will<sp/>just</highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>end<sp/>up<sp/>back<sp/>here<sp/>eventually.)</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref>)</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;waiting<sp/>for<sp/>IO<sp/>path<sp/>to<sp/>be<sp/>acquirable\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga393c0cfdec998dc5abe49480ac21ea51" kindref="member" tooltip="Atomically unlocks the mutex and waits for the conditions variable to be signalled.">_dbus_condvar_wait</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" kindref="member" tooltip="Notify when io_path_acquired is available.">io_path_cond</ref>,<sp/></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!connection-&gt;<ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref>)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>we_acquired<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;end<sp/>connection-&gt;io_path_acquired<sp/>=<sp/>%d<sp/>we_acquired<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref>,<sp/>we_acquired);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;unlocking<sp/>io_path_mutex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga94dcc555488e5d677f10bd3898d61c00" kindref="member" tooltip="Unlocks a mutex.">_dbus_mutex_unlock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" kindref="member" tooltip="Decrements the reference count of a DBusConnection.">_dbus_connection_unref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>we_acquired;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal">_dbus_connection_release_io_path<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;locking<sp/>io_path_mutex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1gae6eafe138e9c317bfb25971d1d8bef2d" kindref="member" tooltip="Locks a mutex.">_dbus_mutex_lock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref>);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;start<sp/>connection-&gt;io_path_acquired<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref>);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" kindref="member" tooltip="Someone has transport io path (can use the transport to read/write messages)">io_path_acquired</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga8af2fd84773022e7e7ce1f21f0126203" kindref="member" tooltip="If there are threads waiting on the condition variable, wake up exactly one.">_dbus_condvar_wake_one</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" kindref="member" tooltip="Notify when io_path_acquired is available.">io_path_cond</ref>);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;unlocking<sp/>io_path_mutex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga94dcc555488e5d677f10bd3898d61c00" kindref="member" tooltip="Unlocks a mutex.">_dbus_mutex_unlock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186" refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" kindref="member" tooltip="Queues incoming messages and sends outgoing messages for this connection, optionally blocking in the ...">_dbus_connection_do_iteration_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>flags,</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;start\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>&amp;=<sp/>~DBUS_ITERATION_DO_WRITING;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_connection_acquire_io_path<sp/>(connection,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(flags<sp/>&amp;<sp/>DBUS_ITERATION_BLOCK)<sp/>?<sp/>timeout_milliseconds<sp/>:<sp/>0))</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(pending<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)<sp/>&amp;&amp;<sp/><ref refid="group__DBusPendingCallInternals_1ga37bef4359b3c29629a57f5fe480690a1" kindref="member" tooltip="Checks whether the pending call has received a reply yet, or not.">_dbus_pending_call_get_completed_unlocked</ref>(pending))</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;pending<sp/>call<sp/>completed<sp/>while<sp/>acquiring<sp/>I/O<sp/>path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(pending<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_peek_for_reply_unlocked<sp/>(connection,</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" kindref="member" tooltip="Gets the reply&amp;#39;s serial number.">_dbus_pending_call_get_reply_serial_unlocked</ref><sp/>(pending)))</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;pending<sp/>call<sp/>completed<sp/>while<sp/>acquiring<sp/>I/O<sp/>path<sp/>(reply<sp/>found<sp/>in<sp/>queue)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTransport_1gac5e6d7a01debcf852b8d5a2fbc666fde" kindref="member" tooltip="Performs a single poll()/select() on the transport&amp;#39;s file descriptors and then reads/writes data as a...">_dbus_transport_do_iteration</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags,<sp/>timeout_milliseconds);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_release_io_path<sp/>(connection);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref>*</highlight></codeline>
<codeline lineno="1237" refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" kindref="member" tooltip="Creates a new connection for the given transport.">_dbus_connection_new_for_transport</ref><sp/>(<ref refid="structDBusTransport" kindref="compound" tooltip="Object representing a transport such as a socket.">DBusTransport</ref><sp/>*transport)</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><ref refid="structDBusWatchList" kindref="compound" tooltip="DBusWatchList implementation details.">DBusWatchList</ref><sp/>*watch_list;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><ref refid="structDBusTimeoutList" kindref="compound" tooltip="DBusTimeoutList implementation details.">DBusTimeoutList</ref><sp/>*timeout_list;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><ref refid="structDBusHashTable" kindref="compound" tooltip="Internals of DBusHashTable.">DBusHashTable</ref><sp/>*pending_replies;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*disconnect_link;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*disconnect_message;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><ref refid="structDBusCounter" kindref="compound" tooltip="Internals of DBusCounter.">DBusCounter</ref><sp/>*outgoing_counter;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><ref refid="structDBusObjectTree" kindref="compound" tooltip="Internals of DBusObjectTree.">DBusObjectTree</ref><sp/>*objects;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>watch_list<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>pending_replies<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>timeout_list<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>disconnect_link<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>disconnect_message<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>outgoing_counter<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>objects<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>watch_list<sp/>=<sp/><ref refid="group__DBusWatchInternals_1ga5d9db5d0af5916a5ec890eb38d5741eb" kindref="member" tooltip="Creates a new watch list.">_dbus_watch_list_new</ref><sp/>();</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(watch_list<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>timeout_list<sp/>=<sp/><ref refid="group__DBusTimeoutInternals_1ga5b122b35cdb3926b7dc2d084ddff9d62" kindref="member" tooltip="Creates a new timeout list.">_dbus_timeout_list_new</ref><sp/>();</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout_list<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;<sp/><sp/></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>pending_replies<sp/>=</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusHashTable_1gac8e434348a354b9606d4c50c127a5eb4" kindref="member" tooltip="Constructs a new hash table.">_dbus_hash_table_new</ref><sp/>(<ref refid="group__DBusHashTable_1ggab0ab9767ffa5b6720a13b3d741630852a26446bd9fbb15c6c381b35a810207141" kindref="member" tooltip="Hash keys are integers.">DBUS_HASH_INT</ref>,</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref>)free_pending_call_on_hash_removal);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending_replies<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" kindref="member" tooltip="Safe macro for using dbus_malloc0().">dbus_new0</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" kindref="member" tooltip="This does the same thing as _dbus_mutex_new.">_dbus_mutex_new_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1ab5726e8d3ff6b08910899b7fe6d7293e" kindref="member" tooltip="Lock on the entire DBusConnection.">mutex</ref>);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1ab5726e8d3ff6b08910899b7fe6d7293e" kindref="member" tooltip="Lock on the entire DBusConnection.">mutex</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" kindref="member" tooltip="This does the same thing as _dbus_mutex_new.">_dbus_mutex_new_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" kindref="member" tooltip="This does the same thing as _dbus_mutex_new.">_dbus_mutex_new_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" kindref="member" tooltip="This does the same thing as _dbus_condvar_new.">_dbus_condvar_new_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" kindref="member" tooltip="Notify when dispatch_acquired is available.">dispatch_cond</ref>);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" kindref="member" tooltip="Notify when dispatch_acquired is available.">dispatch_cond</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" kindref="member" tooltip="This does the same thing as _dbus_condvar_new.">_dbus_condvar_new_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" kindref="member" tooltip="Notify when io_path_acquired is available.">io_path_cond</ref>);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" kindref="member" tooltip="Notify when io_path_acquired is available.">io_path_cond</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga5b22688470ddee6e7b9c9b6eb751fa2e" kindref="member" tooltip="This does the same thing as _dbus_mutex_new.">_dbus_mutex_new_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1ad85b04cfea8a6a8efc5489f85b31122f" kindref="member" tooltip="Lock on slot_list so overall connection lock need not be taken.">slot_mutex</ref>);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad85b04cfea8a6a8efc5489f85b31122f" kindref="member" tooltip="Lock on slot_list so overall connection lock need not be taken.">slot_mutex</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>disconnect_message<sp/>=<sp/><ref refid="group__DBusMessage_1ga48c2b872165f96dec91c14c9b8dd8830" kindref="member" tooltip="Constructs a new message representing a signal emission.">dbus_message_new_signal</ref><sp/>(<ref refid="group__DBusShared_1ga850990a54a46142ee7c5f8174cc932c1" kindref="member" tooltip="The object path used in local/in-process-generated messages.">DBUS_PATH_LOCAL</ref>,</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusShared_1ga9ef6478aae637449ec0c5de1679f75ce" kindref="member" tooltip="This is a special interface whose methods can only be invoked by the local implementation (messages f...">DBUS_INTERFACE_LOCAL</ref>,</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Disconnected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disconnect_message<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>disconnect_link<sp/>=<sp/><ref refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" kindref="member" tooltip="Allocates a linked list node.">_dbus_list_alloc_link</ref><sp/>(disconnect_message);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disconnect_link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>outgoing_counter<sp/>=<sp/><ref refid="group__DBusResources_1ga9911dd8fa020299a2b517251ea0be399" kindref="member" tooltip="Creates a new DBusCounter.">_dbus_counter_new</ref><sp/>();</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outgoing_counter<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>objects<sp/>=<sp/><ref refid="group__DBusObjectTree_1ga5920f14b487122f13a3d439952d5ed2e" kindref="member" tooltip="Creates a new object tree, representing a mapping from paths to handler vtables.">_dbus_object_tree_new</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objects<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_modify_sigpipe)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1ga6890d4cde3afec0bf274ca2af8c9e204" kindref="member" tooltip="signal (SIGPIPE, SIG_IGN);">_dbus_disable_sigpipe</ref><sp/>();</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialized<sp/>to<sp/>0:<sp/>use<sp/>atomic<sp/>op<sp/>to<sp/>avoid<sp/>mixing<sp/>atomic<sp/>and<sp/>non-atomic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" kindref="member" tooltip="Reference count.">refcount</ref>);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref><sp/>=<sp/>transport;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" kindref="member" tooltip="Stores active watches.">watches</ref><sp/>=<sp/>watch_list;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" kindref="member" tooltip="Stores active timeouts.">timeouts</ref><sp/>=<sp/>timeout_list;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref><sp/>=<sp/>pending_replies;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" kindref="member" tooltip="Counts size of outgoing messages.">outgoing_counter</ref><sp/>=<sp/>outgoing_counter;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1af3bbd2ecba171ebb8e952eaa030971d7" kindref="member" tooltip="The last dispatch status we reported to the application.">last_dispatch_status</ref><sp/>=<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member" tooltip="All currently available data has been processed.">DBUS_DISPATCH_COMPLETE</ref>;<sp/></highlight><highlight class="comment">/*<sp/>so<sp/>we&apos;re<sp/>notified<sp/>first<sp/>time<sp/>there&apos;s<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref><sp/>=<sp/>objects;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" kindref="member" tooltip="If TRUE, exit after handling disconnect signal.">exit_on_disconnect</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" kindref="member" tooltip="TRUE if libdbus owns a reference to the connection and can return it from dbus_connection_open() more...">shareable</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" kindref="member" tooltip="If TRUE, if org.freedesktop.DBus.Peer messages have a bus name, don&amp;#39;t handle them automatically...">route_peer_messages</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a48d141d4311211e921571043bdbaeefb" kindref="member" tooltip="We popped or are dispatching the disconnected message.">disconnected_message_arrived</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a3b2707b9d10d0643f91a8e027ae118b5" kindref="member" tooltip="We did our default handling of the disconnected message, such as closing the connection.">disconnected_message_processed</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DBUS_DISABLE_CHECKS</highlight></codeline>
<codeline lineno="1339"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" kindref="member" tooltip="_dbus_current_generation that should correspond to this connection">generation</ref><sp/>=<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1341"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><ref refid="group__DBusDataSlot_1ga6de49b3a1210202215d40a5a19806992" kindref="member" tooltip="Initializes a slot list.">_dbus_data_slot_list_init</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" kindref="member" tooltip="Data stored by allocated integer ID.">slot_list</ref>);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a43d0bb9401103383e13ed3c99baf0daa" kindref="member" tooltip="Client serial.">client_serial</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref><sp/>=<sp/>disconnect_link;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1ga9aaa3f8bf429c94d4ed180dff36c503c" kindref="member" tooltip="Sets the connection using this transport.">_dbus_transport_set_connection</ref><sp/>(transport,<sp/>connection))</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1ga31d6dbc864c9ea643d72521bbb1b7c56" kindref="member" tooltip="Increments the reference count for the transport.">_dbus_transport_ref</ref><sp/>(transport);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connection;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/>error:</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disconnect_message<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(disconnect_message);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disconnect_link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(disconnect_link);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" kindref="member" tooltip="Frees a conditional variable and removes it from the uninitialized_condvar_list; does nothing if pass...">_dbus_condvar_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" kindref="member" tooltip="Notify when io_path_acquired is available.">io_path_cond</ref>);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" kindref="member" tooltip="Frees a conditional variable and removes it from the uninitialized_condvar_list; does nothing if pass...">_dbus_condvar_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" kindref="member" tooltip="Notify when dispatch_acquired is available.">dispatch_cond</ref>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" kindref="member" tooltip="Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a NULL pointer...">_dbus_mutex_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1ab5726e8d3ff6b08910899b7fe6d7293e" kindref="member" tooltip="Lock on the entire DBusConnection.">mutex</ref>);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" kindref="member" tooltip="Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a NULL pointer...">_dbus_mutex_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" kindref="member" tooltip="Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a NULL pointer...">_dbus_mutex_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" kindref="member" tooltip="Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a NULL pointer...">_dbus_mutex_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1ad85b04cfea8a6a8efc5489f85b31122f" kindref="member" tooltip="Lock on slot_list so overall connection lock need not be taken.">slot_mutex</ref>);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending_replies)</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" kindref="member" tooltip="Decrements the reference count for a hash table, freeing the hash table if the count reaches zero...">_dbus_hash_table_unref</ref><sp/>(pending_replies);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(watch_list)</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusWatchInternals_1gac3f75c0da2c8c51e8708f45dd27f9e2d" kindref="member" tooltip="Frees a DBusWatchList.">_dbus_watch_list_free</ref><sp/>(watch_list);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout_list)</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusTimeoutInternals_1ga1b399ef2d7f128e59bb32dbb5b590e1b" kindref="member" tooltip="Frees a DBusTimeoutList.">_dbus_timeout_list_free</ref><sp/>(timeout_list);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outgoing_counter)</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" kindref="member" tooltip="Decrements refcount of the counter and possibly finalizes the counter.">_dbus_counter_unref</ref><sp/>(outgoing_counter);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(objects)</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusObjectTree_1ga7639e273ab160c422a7cef0cda60ded5" kindref="member" tooltip="Decrement the reference count.">_dbus_object_tree_unref</ref><sp/>(objects);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*</highlight></codeline>
<codeline lineno="1406" refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" kindref="member" tooltip="Increments the reference count of a DBusConnection.">_dbus_connection_ref_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" kindref="member" tooltip="_dbus_current_generation that should correspond to this connection">generation</ref><sp/>==<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" kindref="member" tooltip="Reference count.">refcount</ref>);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connection;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425" refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" kindref="member" tooltip="Decrements the reference count of a DBusConnection.">_dbus_connection_unref_unlocked</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>last_unref;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>last_unref<sp/>=<sp/>(<ref refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" kindref="member" tooltip="Atomically decrement an integer.">_dbus_atomic_dec</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" kindref="member" tooltip="Reference count.">refcount</ref>)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_unref)</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_connection_last_unref<sp/>(connection);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>dbus_uint32_t</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">_dbus_connection_get_next_client_serial<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>dbus_uint32_t<sp/>serial;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>serial<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a43d0bb9401103383e13ed3c99baf0daa" kindref="member" tooltip="Client serial.">client_serial</ref>++;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a43d0bb9401103383e13ed3c99baf0daa" kindref="member" tooltip="Client serial.">client_serial</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a43d0bb9401103383e13ed3c99baf0daa" kindref="member" tooltip="Client serial.">client_serial</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>serial;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1466" refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" kindref="member" tooltip="A callback for use with dbus_watch_new() to create a DBusWatch.">_dbus_connection_handle_watch</ref><sp/>(<ref refid="structDBusWatch" kindref="compound" tooltip="Implementation of DBusWatch.">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch,</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>condition,</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;start\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_dbus_connection_acquire_io_path<sp/>(connection,<sp/>1))</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>another<sp/>thread<sp/>is<sp/>handling<sp/>the<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusTransport_1ga4a010098fe079eb6f201ff034d15fdff" kindref="member" tooltip="Handles a watch by reading data, writing data, or disconnecting the transport, as appropriate for the...">_dbus_transport_handle_watch</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>watch,<sp/>condition);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>_dbus_connection_release_io_path<sp/>(connection);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;middle\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>calls<sp/>out<sp/>to<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal">_DBUS_DEFINE_GLOBAL_LOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusHashTable" kindref="compound" tooltip="Internals of DBusHashTable.">DBusHashTable</ref><sp/>*shared_connections<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*shared_connections_no_guid<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal">close_connection_on_shutdown<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*message;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" kindref="member" tooltip="Increments the reference count of a DBusConnection.">dbus_connection_ref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1gadc46f7abfe925f9860fc8c64aeb29ad2" kindref="member" tooltip="Closes a shared OR private connection, while dbus_connection_close() can only be used on private conn...">_dbus_connection_close_possibly_shared</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Churn<sp/>through<sp/>to<sp/>the<sp/>Disconnected<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((message<sp/>=<sp/><ref refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" kindref="member" tooltip="Returns the first-received message from the incoming message queue, removing it from the queue...">dbus_connection_pop_message</ref><sp/>(connection)))</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(message);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member" tooltip="Decrements the reference count of a DBusConnection, and finalizes it if the count reaches zero...">dbus_connection_unref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal">shared_connections_shutdown<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="1529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_entries;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>_DBUS_LOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>little<sp/>bit<sp/>unpleasant...<sp/>better<sp/>ideas?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n_entries<sp/>=<sp/><ref refid="group__DBusHashTable_1gad48297fc27442c19a7c4bd4d1ef9ef77" kindref="member" tooltip="Gets the number of hash entries in a hash table.">_dbus_hash_table_get_n_entries</ref><sp/>(shared_connections))<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusHashIter" kindref="compound" tooltip="Hash iterator object.">DBusHashIter</ref><sp/>iter;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusHashTable_1ga1b0e6df8a8617ef0f8f25adfba3acc4c" kindref="member" tooltip="Initializes a hash table iterator.">_dbus_hash_iter_init</ref><sp/>(shared_connections,<sp/>&amp;iter);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusHashTable_1ga723e61fcc91ca673e90ff872c07ea19c" kindref="member" tooltip="Move the hash iterator forward one step, to the next hash entry.">_dbus_hash_iter_next</ref><sp/>(&amp;iter);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusHashTable_1ga34bf277ee37f919bd00516b5ae4e12b5" kindref="member" tooltip="Gets the value of the current entry.">_dbus_hash_iter_get_value</ref><sp/>(&amp;iter);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close_connection_on_shutdown<sp/>(connection);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_LOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>connection<sp/>should<sp/>now<sp/>be<sp/>dead<sp/>and<sp/>not<sp/>in<sp/>our<sp/>hash<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(<ref refid="group__DBusHashTable_1gad48297fc27442c19a7c4bd4d1ef9ef77" kindref="member" tooltip="Gets the number of hash entries in a hash table.">_dbus_hash_table_get_n_entries</ref><sp/>(shared_connections)<sp/>&lt;<sp/>n_entries);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(<ref refid="group__DBusHashTable_1gad48297fc27442c19a7c4bd4d1ef9ef77" kindref="member" tooltip="Gets the number of hash entries in a hash table.">_dbus_hash_table_get_n_entries</ref><sp/>(shared_connections)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><ref refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" kindref="member" tooltip="Decrements the reference count for a hash table, freeing the hash table if the count reaches zero...">_dbus_hash_table_unref</ref><sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>shared_connections<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shared_connections_no_guid<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" kindref="member" tooltip="Removes the first value in the list and returns it.">_dbus_list_pop_first</ref><sp/>(&amp;shared_connections_no_guid);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close_connection_on_shutdown<sp/>(connection);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_LOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" kindref="member" tooltip="Removes the first value in the list and returns it.">_dbus_list_pop_first</ref><sp/>(&amp;shared_connections_no_guid);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>shared_connections_no_guid<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1577"><highlight class="normal">connection_lookup_shared<sp/>(<ref refid="structDBusAddressEntry" kindref="compound" tooltip="Internals of DBusAddressEntry.">DBusAddressEntry</ref><sp/><sp/>*entry,</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/>**result)</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;checking<sp/>for<sp/>existing<sp/>connection\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>*result<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>_DBUS_LOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shared_connections<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;creating<sp/>shared_connections<sp/>hash<sp/>table\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared_connections<sp/>=<sp/><ref refid="group__DBusHashTable_1gac8e434348a354b9606d4c50c127a5eb4" kindref="member" tooltip="Constructs a new hash table.">_dbus_hash_table_new</ref><sp/>(<ref refid="group__DBusHashTable_1ggab0ab9767ffa5b6720a13b3d741630852a481fd0166d28da725b3e97f15192434e" kindref="member" tooltip="Hash keys are strings.">DBUS_HASH_STRING</ref>,</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref>,</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shared_connections<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusMemoryInternals_1ga8dc6d5dd0a0e7901ab793da7403ee734" kindref="member" tooltip="Register a cleanup function to be called exactly once the next time dbus_shutdown() is called...">_dbus_register_shutdown_func</ref><sp/>(shared_connections_shutdown,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" kindref="member" tooltip="Decrements the reference count for a hash table, freeing the hash table if the count reaches zero...">_dbus_hash_table_unref</ref><sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_connections<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>successfully<sp/>created<sp/>shared_connections\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>point<sp/>looking<sp/>up<sp/>in<sp/>the<sp/>hash<sp/>we<sp/>just<sp/>made<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*guid;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guid<sp/>=<sp/><ref refid="group__DBusAddress_1gae6f014689b49099e835b1f97d032034e" kindref="member" tooltip="Returns a value from a key of an entry.">dbus_address_entry_get_value</ref><sp/>(entry,<sp/></highlight><highlight class="stringliteral">&quot;guid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guid<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusHashTable_1gad51eb3fe682721dd4f6a920ca87cb730" kindref="member" tooltip="Looks up the value for a given string in a hash table of type DBUS_HASH_STRING.">_dbus_hash_table_lookup_string</ref><sp/>(shared_connections,</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guid);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection)</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>DBusConnection<sp/>can&apos;t<sp/>be<sp/>finalized<sp/>without<sp/>taking</highlight></codeline>
<codeline lineno="1628"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>shared_connections<sp/>lock<sp/>to<sp/>remove<sp/>it<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="1629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>hash.<sp/><sp/>So<sp/>it&apos;s<sp/>safe<sp/>to<sp/>ref<sp/>the<sp/>connection<sp/>here.</highlight></codeline>
<codeline lineno="1630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>However,<sp/>it<sp/>may<sp/>be<sp/>disconnected<sp/>if<sp/>the<sp/>Disconnected</highlight></codeline>
<codeline lineno="1631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>message<sp/>hasn&apos;t<sp/>been<sp/>processed<sp/>yet,<sp/>in<sp/>which<sp/>case<sp/>we</highlight></codeline>
<codeline lineno="1632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>want<sp/>to<sp/>pretend<sp/>it<sp/>isn&apos;t<sp/>in<sp/>the<sp/>hash<sp/>and<sp/>avoid</highlight></codeline>
<codeline lineno="1633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>returning<sp/>it.</highlight></codeline>
<codeline lineno="1634"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>idea<sp/>is<sp/>to<sp/>avoid<sp/>ever<sp/>returning<sp/>a<sp/>disconnected<sp/>connection</highlight></codeline>
<codeline lineno="1636"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>from<sp/>dbus_connection_open().<sp/>We<sp/>could<sp/>just<sp/>synchronously</highlight></codeline>
<codeline lineno="1637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>drop<sp/>our<sp/>shared<sp/>ref<sp/>to<sp/>the<sp/>connection<sp/>on<sp/>connection<sp/>disconnect,</highlight></codeline>
<codeline lineno="1638"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>then<sp/>assert<sp/>here<sp/>that<sp/>the<sp/>connection<sp/>is<sp/>connected,<sp/>but</highlight></codeline>
<codeline lineno="1639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>causes<sp/>reentrancy<sp/>headaches.</highlight></codeline>
<codeline lineno="1640"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_connection_get_is_connected_unlocked<sp/>(connection))</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" kindref="member" tooltip="Increments the reference count of a DBusConnection.">_dbus_connection_ref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*result<sp/>=<sp/>connection;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;looked<sp/>up<sp/>existing<sp/>connection<sp/>to<sp/>server<sp/>guid<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guid);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;looked<sp/>up<sp/>existing<sp/>connection<sp/>to<sp/>server<sp/>guid<sp/>%s<sp/>but<sp/>it<sp/>was<sp/>disconnected<sp/>so<sp/>ignoring<sp/>it\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guid);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1664"><highlight class="normal">connection_record_shared_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*guid)</highlight></codeline>
<codeline lineno="1666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*guid_key;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*guid_in_connection;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" kindref="member" tooltip="TRUE if libdbus owns a reference to the connection and can return it from dbus_connection_open() more...">shareable</ref>);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>a<sp/>hard<sp/>ref<sp/>on<sp/>this<sp/>connection,<sp/>even<sp/>if</highlight></codeline>
<codeline lineno="1675"><highlight class="comment"><sp/><sp/><sp/>*<sp/>we<sp/>won&apos;t<sp/>in<sp/>fact<sp/>store<sp/>it<sp/>in<sp/>the<sp/>hash,<sp/>we<sp/>still</highlight></codeline>
<codeline lineno="1676"><highlight class="comment"><sp/><sp/><sp/>*<sp/>need<sp/>to<sp/>hold<sp/>a<sp/>ref<sp/>on<sp/>it<sp/>until<sp/>it&apos;s<sp/>disconnected.</highlight></codeline>
<codeline lineno="1677"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" kindref="member" tooltip="Increments the reference count of a DBusConnection.">_dbus_connection_ref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guid<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_LOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" kindref="member" tooltip="Prepends a value to the list.">_dbus_list_prepend</ref><sp/>(&amp;shared_connections_no_guid,<sp/>connection))</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;<sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>store<sp/>in<sp/>the<sp/>hash<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>separate<sp/>copy<sp/>of<sp/>the<sp/>key<sp/>is<sp/>required<sp/>in<sp/>the<sp/>hash<sp/>table,<sp/>because</highlight></codeline>
<codeline lineno="1695"><highlight class="comment"><sp/><sp/><sp/>*<sp/>we<sp/>don&apos;t<sp/>have<sp/>a<sp/>lock<sp/>on<sp/>the<sp/>connection<sp/>when<sp/>we<sp/>are<sp/>doing<sp/>a<sp/>hash</highlight></codeline>
<codeline lineno="1696"><highlight class="comment"><sp/><sp/><sp/>*<sp/>lookup.</highlight></codeline>
<codeline lineno="1697"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>guid_key<sp/>=<sp/><ref refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" kindref="member" tooltip="Duplicates a string.">_dbus_strdup</ref><sp/>(guid);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guid_key<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/>guid_in_connection<sp/>=<sp/><ref refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" kindref="member" tooltip="Duplicates a string.">_dbus_strdup</ref><sp/>(guid);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guid_in_connection<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(guid_key);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>_DBUS_LOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(shared_connections<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusHashTable_1ga43e98a91a11952824c544330e19f6c22" kindref="member" tooltip="Creates a hash entry with the given key and value.">_dbus_hash_table_insert_string</ref><sp/>(shared_connections,</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guid_key,<sp/>connection))</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(guid_key);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(guid_in_connection);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref><sp/>=<sp/>guid_in_connection;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;stored<sp/>connection<sp/>to<sp/>%s<sp/>to<sp/>be<sp/>shared\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref>);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal">connection_forget_shared_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="1736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!connection-&gt;<ref refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" kindref="member" tooltip="TRUE if libdbus owns a reference to the connection and can return it from dbus_connection_open() more...">shareable</ref>)</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/>_DBUS_LOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dropping<sp/>connection<sp/>to<sp/>%s<sp/>out<sp/>of<sp/>the<sp/>shared<sp/>table\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref>);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusHashTable_1ga388d50ce1a07bf0790b9f2ecdb08a396" kindref="member" tooltip="Removes the hash entry for the given key.">_dbus_hash_table_remove_string</ref><sp/>(shared_connections,</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref>))</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;connection<sp/>was<sp/>not<sp/>in<sp/>the<sp/>shared<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref>);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" kindref="member" tooltip="Removes a value from the list.">_dbus_list_remove</ref><sp/>(&amp;shared_connections_no_guid,<sp/>connection);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>_DBUS_UNLOCK<sp/>(shared_connections);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>our<sp/>reference<sp/>held<sp/>on<sp/>all<sp/>shareable<sp/>connections<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" kindref="member" tooltip="Decrements the reference count of a DBusConnection.">_dbus_connection_unref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref>*</highlight></codeline>
<codeline lineno="1768"><highlight class="normal">connection_try_from_address_entry<sp/>(<ref refid="structDBusAddressEntry" kindref="compound" tooltip="Internals of DBusAddressEntry.">DBusAddressEntry</ref><sp/>*entry,</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error)</highlight></codeline>
<codeline lineno="1770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><ref refid="structDBusTransport" kindref="compound" tooltip="Object representing a transport such as a socket.">DBusTransport</ref><sp/>*transport;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>transport<sp/>=<sp/><ref refid="group__DBusTransport_1ga0893897223056c89f33b2641a7b21cf8" kindref="member" tooltip="Try to open a new transport for the given address entry.">_dbus_transport_open</ref><sp/>(entry,<sp/>error);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transport<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_ASSERT_ERROR_IS_SET<sp/>(error);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" kindref="member" tooltip="Creates a new connection for the given transport.">_dbus_connection_new_for_transport</ref><sp/>(transport);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1gab7c53c32a2320c81aae8ce4345762e73" kindref="member" tooltip="Decrements the reference count for the transport.">_dbus_transport_unref</ref><sp/>(transport);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_SET_OOM<sp/>(error);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DBUS_DISABLE_CHECKS</highlight></codeline>
<codeline lineno="1793"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(!connection-&gt;<ref refid="structDBusConnection_1a336a7953a4a28e55f6e6a07acfa11df3" kindref="member" tooltip="Used to check locking.">have_connection_lock</ref>);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1795"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connection;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1799"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>shared<sp/>parameter<sp/>is<sp/>true,<sp/>then<sp/>any<sp/>existing<sp/>connection<sp/>will</highlight></codeline>
<codeline lineno="1800"><highlight class="comment"><sp/>*<sp/>be<sp/>used<sp/>(and<sp/>if<sp/>a<sp/>new<sp/>connection<sp/>is<sp/>created,<sp/>it<sp/>will<sp/>be<sp/>available</highlight></codeline>
<codeline lineno="1801"><highlight class="comment"><sp/>*<sp/>for<sp/>use<sp/>by<sp/>others).<sp/>If<sp/>the<sp/>shared<sp/>parameter<sp/>is<sp/>false,<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="1802"><highlight class="comment"><sp/>*<sp/>connection<sp/>will<sp/>always<sp/>be<sp/>created,<sp/>and<sp/>the<sp/>new<sp/>connection<sp/>will</highlight></codeline>
<codeline lineno="1803"><highlight class="comment"><sp/>*<sp/>never<sp/>be<sp/>returned<sp/>to<sp/>other<sp/>callers.</highlight></codeline>
<codeline lineno="1804"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/>*<sp/>@param<sp/>address<sp/>the<sp/>address</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/>*<sp/>@param<sp/>shared<sp/>whether<sp/>the<sp/>connection<sp/>is<sp/>shared<sp/>or<sp/>private</highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/>*<sp/>@param<sp/>error<sp/>error<sp/>return</highlight></codeline>
<codeline lineno="1808"><highlight class="comment"><sp/>*<sp/>@returns<sp/>the<sp/>connection<sp/>or<sp/>#NULL<sp/>on<sp/>error</highlight></codeline>
<codeline lineno="1809"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref>*</highlight></codeline>
<codeline lineno="1811"><highlight class="normal">_dbus_connection_open_internal<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*address,</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/>shared,</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/>*error)</highlight></codeline>
<codeline lineno="1814"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><ref refid="structDBusAddressEntry" kindref="compound" tooltip="Internals of DBusAddressEntry.">DBusAddressEntry</ref><sp/>**entries;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/>tmp_error<sp/>=<sp/><ref refid="group__DBusErrorInternals_1ga961cc70e3891282a65205c4c8418d88e" kindref="member" tooltip="Expands to a suitable initializer for a DBusError on the stack.">DBUS_ERROR_INIT</ref>;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/>first_error<sp/>=<sp/><ref refid="group__DBusErrorInternals_1ga961cc70e3891282a65205c4c8418d88e" kindref="member" tooltip="Expands to a suitable initializer for a DBusError on the stack.">DBUS_ERROR_INIT</ref>;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>i;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>_DBUS_ASSERT_ERROR_IS_CLEAR<sp/>(error);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;opening<sp/>%s<sp/>connection<sp/>to:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;shared&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;private&quot;</highlight><highlight class="normal">,<sp/>address);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" kindref="member" tooltip="Parses an address string of the form:">dbus_parse_address</ref><sp/>(address,<sp/>&amp;entries,<sp/>&amp;len,<sp/>error))</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>_DBUS_ASSERT_ERROR_IS_CLEAR<sp/>(error);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shared)</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!connection_lookup_shared<sp/>(entries[i],<sp/>&amp;connection))</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_SET_OOM<sp/>(&amp;tmp_error);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection<sp/>=<sp/>connection_try_from_address_entry<sp/>(entries[i],</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;tmp_error);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref><sp/>&amp;&amp;<sp/>shared)</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*guid;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" kindref="member" tooltip="TRUE if libdbus owns a reference to the connection and can return it from dbus_connection_open() more...">shareable</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>guid<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guid<sp/>=<sp/><ref refid="group__DBusAddress_1gae6f014689b49099e835b1f97d032034e" kindref="member" tooltip="Returns a value from a key of an entry.">dbus_address_entry_get_value</ref><sp/>(entries[i],<sp/></highlight><highlight class="stringliteral">&quot;guid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!connection_record_shared_unlocked<sp/>(connection,<sp/>guid))</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_SET_OOM<sp/>(&amp;tmp_error);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_close_possibly_shared_and_unlock<sp/>(connection);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member" tooltip="Decrements the reference count of a DBusConnection, and finalizes it if the count reaches zero...">dbus_connection_unref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection)</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_ASSERT_ERROR_IS_SET<sp/>(&amp;tmp_error);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusErrors_1ga0a27fb9f1af0c2bfd105d7e8622b93f4" kindref="member" tooltip="Moves an error src into dest, freeing src and overwriting dest.">dbus_move_error</ref><sp/>(&amp;tmp_error,<sp/>&amp;first_error);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" kindref="member" tooltip="Frees an error that&amp;#39;s been set (or just initialized), then reinitializes the error as in dbus_error_i...">dbus_error_free</ref><sp/>(&amp;tmp_error);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/>_DBUS_ASSERT_ERROR_IS_CLEAR<sp/>(error);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/>_DBUS_ASSERT_ERROR_IS_CLEAR<sp/>(&amp;tmp_error);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_ASSERT_ERROR_IS_SET<sp/>(&amp;first_error);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusErrors_1ga0a27fb9f1af0c2bfd105d7e8622b93f4" kindref="member" tooltip="Moves an error src into dest, freeing src and overwriting dest.">dbus_move_error</ref><sp/>(&amp;first_error,<sp/>error);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" kindref="member" tooltip="Frees an error that&amp;#39;s been set (or just initialized), then reinitializes the error as in dbus_error_i...">dbus_error_free</ref><sp/>(&amp;first_error);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><ref refid="group__DBusAddress_1ga37a7009b07cf991ff07f3e86d71bf352" kindref="member" tooltip="Frees a NULL-terminated array of address entries.">dbus_address_entries_free</ref><sp/>(entries);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connection;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904" refid="group__DBusConnectionInternals_1gadc46f7abfe925f9860fc8c64aeb29ad2" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1gadc46f7abfe925f9860fc8c64aeb29ad2" kindref="member" tooltip="Closes a shared OR private connection, while dbus_connection_close() can only be used on private conn...">_dbus_connection_close_possibly_shared</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" kindref="member" tooltip="_dbus_current_generation that should correspond to this connection">generation</ref><sp/>==<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/>_dbus_connection_close_possibly_shared_and_unlock<sp/>(connection);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref>*</highlight></codeline>
<codeline lineno="1914"><highlight class="normal">_dbus_connection_preallocate_send_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="1915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref><sp/>*preallocated;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/>preallocated<sp/>=<sp/><ref refid="group__DBusMemory_1ga54ccb556e7964112a825a7f46c156ca0" kindref="member" tooltip="Safe macro for using dbus_malloc().">dbus_new</ref><sp/>(<ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preallocated<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" kindref="member" tooltip="A cache of linked list links to prevent contention for the global linked list mempool lock...">link_cache</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" kindref="member" tooltip="Preallocated link in the queue.">queue_link</ref><sp/>=</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" kindref="member" tooltip="Removes the first link in the list and returns it.">_dbus_list_pop_first_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" kindref="member" tooltip="A cache of linked list links to prevent contention for the global linked list mempool lock...">link_cache</ref>);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" kindref="member" tooltip="Preallocated link in the queue.">queue_link</ref>-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" kindref="member" tooltip="Preallocated link in the queue.">queue_link</ref><sp/>=<sp/><ref refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" kindref="member" tooltip="Allocates a linked list node.">_dbus_list_alloc_link</ref><sp/>(<ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preallocated-&gt;<ref refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" kindref="member" tooltip="Preallocated link in the queue.">queue_link</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>failed_0;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" kindref="member" tooltip="A cache of linked list links to prevent contention for the global linked list mempool lock...">link_cache</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" kindref="member" tooltip="Preallocated link in the resource counter.">counter_link</ref><sp/>=</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" kindref="member" tooltip="Removes the first link in the list and returns it.">_dbus_list_pop_first_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" kindref="member" tooltip="A cache of linked list links to prevent contention for the global linked list mempool lock...">link_cache</ref>);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" kindref="member" tooltip="Preallocated link in the resource counter.">counter_link</ref>-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref><sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" kindref="member" tooltip="Counts size of outgoing messages.">outgoing_counter</ref>;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" kindref="member" tooltip="Preallocated link in the resource counter.">counter_link</ref><sp/>=<sp/><ref refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" kindref="member" tooltip="Allocates a linked list node.">_dbus_list_alloc_link</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" kindref="member" tooltip="Counts size of outgoing messages.">outgoing_counter</ref>);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preallocated-&gt;<ref refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" kindref="member" tooltip="Preallocated link in the resource counter.">counter_link</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>failed_1;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><ref refid="group__DBusResources_1gae93240c77bfb66642453518c9bb90bc4" kindref="member" tooltip="Increments refcount of the counter.">_dbus_counter_ref</ref><sp/>(preallocated-&gt;<ref refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" kindref="member" tooltip="Preallocated link in the resource counter.">counter_link</ref>-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" kindref="member" tooltip="Connection we&amp;#39;d send the message to.">connection</ref><sp/>=<sp/>connection;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>preallocated;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/>failed_1:</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(preallocated-&gt;<ref refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" kindref="member" tooltip="Preallocated link in the queue.">queue_link</ref>);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/>failed_0:</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(preallocated);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Called<sp/>with<sp/>lock<sp/>held,<sp/>does<sp/>not<sp/>update<sp/>dispatch<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal">_dbus_connection_send_preallocated_unlocked_no_update<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref><sp/>*preallocated,</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*client_serial)</highlight></codeline>
<codeline lineno="1972"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>dbus_uint32_t<sp/>serial;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" kindref="member" tooltip="Preallocated link in the queue.">queue_link</ref>-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref><sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" kindref="member" tooltip="Prepends a link to the list.">_dbus_list_prepend_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" kindref="member" tooltip="Queue of messages we need to send, send the end of the list first.">outgoing_messages</ref>,</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" kindref="member" tooltip="Preallocated link in the queue.">queue_link</ref>);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMessageInternals_1gafaed2adc00b2ec54b2827ecb778bbe7e" kindref="member" tooltip="Adds a counter to be incremented immediately with the size/unix fds of this message, and decremented by the size/unix fds of this message when this message if finalized.">_dbus_message_add_counter_link</ref><sp/>(message,</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" kindref="member" tooltip="Preallocated link in the resource counter.">counter_link</ref>);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(preallocated);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>preallocated<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMessage_1ga834035e4817acd64adc8ca584bdf3982" kindref="member" tooltip="Increments the reference count of a DBusMessage.">dbus_message_ref</ref><sp/>(message);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Message<sp/>%p<sp/>(%s<sp/>%s<sp/>%s<sp/>%s<sp/>&apos;%s&apos;)<sp/>for<sp/>%s<sp/>added<sp/>to<sp/>outgoing<sp/>queue<sp/>%p,<sp/>%d<sp/>pending<sp/>to<sp/>send\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" kindref="member" tooltip="Utility function to convert a D-Bus message type into a machine-readable string (not translated)...">dbus_message_type_to_string</ref><sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message)),</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" kindref="member" tooltip="Gets the object path this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitt...">dbus_message_get_path</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" kindref="member" tooltip="Gets the object path this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitt...">dbus_message_get_path</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>path&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>interface&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>member&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" kindref="member" tooltip="Gets the type signature of the message, i.e.">dbus_message_get_signature</ref><sp/>(message),</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaac65c926e6253e49aa689b4f032fad45" kindref="member" tooltip="Gets the destination of a message or NULL if there is none set.">dbus_message_get_destination</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaac65c926e6253e49aa689b4f032fad45" kindref="member" tooltip="Gets the destination of a message or NULL if there is none set.">dbus_message_get_destination</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection,</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref>);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" kindref="member" tooltip="Returns the serial of a message or 0 if none has been specified.">dbus_message_get_serial</ref><sp/>(message)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>serial<sp/>=<sp/>_dbus_connection_get_next_client_serial<sp/>(connection);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga3dd30a62c63eb9972cc0c564f2a89c3b" kindref="member" tooltip="Sets the serial number of a message.">dbus_message_set_serial</ref><sp/>(message,<sp/>serial);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(client_serial)</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*client_serial<sp/>=<sp/>serial;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(client_serial)</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*client_serial<sp/>=<sp/><ref refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" kindref="member" tooltip="Returns the serial of a message or 0 if none has been specified.">dbus_message_get_serial</ref><sp/>(message);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Message<sp/>%p<sp/>serial<sp/>is<sp/>%u\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,<sp/><ref refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" kindref="member" tooltip="Returns the serial of a message or 0 if none has been specified.">dbus_message_get_serial</ref><sp/>(message));</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMessageInternals_1ga3ecc9c24381af05289161f477ad6a578" kindref="member" tooltip="Locks a message.">dbus_message_lock</ref><sp/>(message);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>we<sp/>need<sp/>to<sp/>run<sp/>an<sp/>iteration<sp/>to<sp/>hopefully<sp/>just<sp/>write<sp/>the<sp/>messages</highlight></codeline>
<codeline lineno="2027"><highlight class="comment"><sp/><sp/><sp/>*<sp/>out<sp/>immediately,<sp/>and<sp/>otherwise<sp/>get<sp/>them<sp/>queued<sp/>up</highlight></codeline>
<codeline lineno="2028"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" kindref="member" tooltip="Queues incoming messages and sends outgoing messages for this connection, optionally blocking in the ...">_dbus_connection_do_iteration_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_DO_WRITING,</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>stuff<sp/>is<sp/>still<sp/>queued<sp/>up,<sp/>be<sp/>sure<sp/>we<sp/>wake<sp/>up<sp/>the<sp/>main<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_connection_wakeup_mainloop<sp/>(connection);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal">_dbus_connection_send_preallocated_and_unlock<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref><sp/>*preallocated,</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*client_serial)</highlight></codeline>
<codeline lineno="2044"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/>_dbus_connection_send_preallocated_unlocked_no_update<sp/>(connection,</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preallocated,</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,<sp/>client_serial);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;middle\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>calls<sp/>out<sp/>to<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2070" refid="group__DBusConnectionInternals_1ga2974eb1c261305fafc635e14fc575d03" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga2974eb1c261305fafc635e14fc575d03" kindref="member" tooltip="Like dbus_connection_send(), but assumes the connection is already locked on function entry...">_dbus_connection_send_and_unlock</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/><sp/>*client_serial)</highlight></codeline>
<codeline lineno="2073"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref><sp/>*preallocated;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(message<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>preallocated<sp/>=<sp/>_dbus_connection_preallocate_send_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preallocated<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/>_dbus_connection_send_preallocated_and_unlock<sp/>(connection,</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preallocated,</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client_serial);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118" refid="group__DBusConnectionInternals_1ga9f9665902c763bd1ddf9d9bc57d7a7ba" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1ga9f9665902c763bd1ddf9d9bc57d7a7ba" kindref="member" tooltip="Used internally to handle the semantics of dbus_server_set_new_connection_function().">_dbus_connection_close_if_only_one_ref</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>dbus_int32_t<sp/>refcount;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/>refcount<sp/>=<sp/><ref refid="group__DBusSysdeps_1ga626c810359ba0e362367ce2ec6691aca" kindref="member" tooltip="Atomically get the value of an integer.">_dbus_atomic_get</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" kindref="member" tooltip="Reference count.">refcount</ref>);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>caller<sp/>should<sp/>have<sp/>at<sp/>least<sp/>one<sp/>ref<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(refcount<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refcount<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_connection_close_possibly_shared_and_unlock<sp/>(connection);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal">_dbus_memory_pause_based_on_timeout<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout_milliseconds)</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout_milliseconds<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1ga1153b4669819148af6b3f6f2b7c9183a" kindref="member" tooltip="Sleeps the given number of milliseconds.">_dbus_sleep_milliseconds</ref><sp/>(1000);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout_milliseconds<sp/>&lt;<sp/>100)</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/></highlight><highlight class="comment">/*<sp/>just<sp/>busy<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout_milliseconds<sp/>&lt;=<sp/>1000)</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1ga1153b4669819148af6b3f6f2b7c9183a" kindref="member" tooltip="Sleeps the given number of milliseconds.">_dbus_sleep_milliseconds</ref><sp/>(timeout_milliseconds<sp/>/<sp/>3);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1ga1153b4669819148af6b3f6f2b7c9183a" kindref="member" tooltip="Sleeps the given number of milliseconds.">_dbus_sleep_milliseconds</ref><sp/>(1000);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*</highlight></codeline>
<codeline lineno="2158"><highlight class="normal">generate_local_error_message<sp/>(dbus_uint32_t<sp/>serial,<sp/></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error_name,<sp/></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error_msg)</highlight></codeline>
<codeline lineno="2161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*message;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/>message<sp/>=<sp/><ref refid="group__DBusMessage_1gab9e5bf8d87a95c5ca7026a791148ebd4" kindref="member" tooltip="Constructs a new message of the given message type.">dbus_message_new</ref><sp/>(<ref refid="group__DBusProtocol_1ga2b9423d95066313d73eeea8eeaf86812" kindref="member" tooltip="Message type of an error reply message, see dbus_message_get_type()">DBUS_MESSAGE_TYPE_ERROR</ref>);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!message)</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusMessage_1ga892f9857707371c2a53cec6b54c843c7" kindref="member" tooltip="Sets the name of the error (DBUS_MESSAGE_TYPE_ERROR).">dbus_message_set_error_name</ref><sp/>(message,<sp/>error_name))</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(message);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;<sp/></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMessage_1ga0e86aeb2dc6831ccc9a21fcbf8cc16f7" kindref="member" tooltip="Sets a flag indicating that the message does not want a reply; if this flag is set, the other end of the connection may (but is not required to) optimize by not sending method return or error replies.">dbus_message_set_no_reply</ref><sp/>(message,<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>);<sp/></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusMessage_1gaec08603ff3d49bbcded67d25188a23f1" kindref="member" tooltip="Sets the reply serial of a message (the serial of the message this is a reply to).">dbus_message_set_reply_serial</ref><sp/>(message,</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serial))</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(message);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error_msg<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessageIter" kindref="compound" tooltip="DBusMessageIter struct; contains no public fields.">DBusMessageIter</ref><sp/>iter;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf733047c467ce21f4a53b65a388f1e9d" kindref="member" tooltip="Initializes a DBusMessageIter for appending arguments to the end of a message.">dbus_message_iter_init_append</ref><sp/>(message,<sp/>&amp;iter);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusMessage_1ga17491f3b75b3203f6fc47dcc2e3b221b" kindref="member" tooltip="Appends a basic-typed value to the message.">dbus_message_iter_append_basic</ref><sp/>(&amp;iter,</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusProtocol_1ga7eb77066dadf5415896b44c56d93acce" kindref="member" tooltip="Type code marking a UTF-8 encoded, nul-terminated Unicode string.">DBUS_TYPE_STRING</ref>,</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;error_msg))</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(message);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/>out:</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2204"><highlight class="comment"><sp/>*<sp/>Peek<sp/>the<sp/>incoming<sp/>queue<sp/>to<sp/>see<sp/>if<sp/>we<sp/>got<sp/>reply<sp/>for<sp/>a<sp/>specific<sp/>serial</highlight></codeline>
<codeline lineno="2205"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2207"><highlight class="normal">_dbus_connection_peek_for_reply_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/><sp/><sp/>client_serial)</highlight></codeline>
<codeline lineno="2209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*reply<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" kindref="member" tooltip="Returns the serial that the message is a reply to or 0 if none.">dbus_message_get_reply_serial</ref><sp/>(reply)<sp/>==<sp/>client_serial)</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;%s<sp/>reply<sp/>to<sp/>%d<sp/>found<sp/>in<sp/>queue\n&quot;</highlight><highlight class="normal">,<sp/>_DBUS_FUNCTION_NAME,<sp/>client_serial);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>slightly<sp/>strange<sp/>since<sp/>we<sp/>can<sp/>pop<sp/>a<sp/>message<sp/>here<sp/>without</highlight></codeline>
<codeline lineno="2231"><highlight class="comment"><sp/>*<sp/>the<sp/>dispatch<sp/>lock.</highlight></codeline>
<codeline lineno="2232"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref>*</highlight></codeline>
<codeline lineno="2234"><highlight class="normal">check_for_reply_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/><sp/><sp/>client_serial)</highlight></codeline>
<codeline lineno="2236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*reply<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" kindref="member" tooltip="Returns the serial that the message is a reply to or 0 if none.">dbus_message_get_reply_serial</ref><sp/>(reply)<sp/>==<sp/>client_serial)</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reply;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal">connection_timeout_and_complete_all_pending_calls_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>can&apos;t<sp/>iterate<sp/>over<sp/>the<sp/>hash<sp/>in<sp/>the<sp/>normal<sp/>way<sp/>since<sp/>we&apos;ll<sp/>be</highlight></codeline>
<codeline lineno="2263"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>dropping<sp/>the<sp/>lock<sp/>for<sp/>each<sp/>item.<sp/>So<sp/>we<sp/>restart<sp/>the</highlight></codeline>
<codeline lineno="2264"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>iter<sp/>each<sp/>time<sp/>as<sp/>we<sp/>drain<sp/>the<sp/>hash<sp/>table.</highlight></codeline>
<codeline lineno="2265"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusHashTable_1gad48297fc27442c19a7c4bd4d1ef9ef77" kindref="member" tooltip="Gets the number of hash entries in a hash table.">_dbus_hash_table_get_n_entries</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusHashIter" kindref="compound" tooltip="Hash iterator object.">DBusHashIter</ref><sp/>iter;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusHashTable_1ga1b0e6df8a8617ef0f8f25adfba3acc4c" kindref="member" tooltip="Initializes a hash table iterator.">_dbus_hash_iter_init</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>,<sp/>&amp;iter);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusHashTable_1ga723e61fcc91ca673e90ff872c07ea19c" kindref="member" tooltip="Move the hash iterator forward one step, to the next hash entry.">_dbus_hash_iter_next</ref><sp/>(&amp;iter);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pending<sp/>=<sp/><ref refid="group__DBusHashTable_1ga34bf277ee37f919bd00516b5ae4e12b5" kindref="member" tooltip="Gets the value of the current entry.">_dbus_hash_iter_get_value</ref><sp/>(&amp;iter);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" kindref="member" tooltip="Increments the reference count on a pending call, while the lock on its connection is already held...">_dbus_pending_call_ref_unlocked</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga1bc4de7652108d0629522a4e3adffcab" kindref="member" tooltip="If the pending call hasn&amp;#39;t been timed out, add its timeout error reply to the connection&amp;#39;s incoming m...">_dbus_pending_call_queue_timeout_error_unlocked</ref><sp/>(pending,<sp/></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusPendingCallInternals_1gaf1e630b966722af540502329ed028254" kindref="member" tooltip="Checks to see if a timeout has been added.">_dbus_pending_call_is_timeout_added_unlocked</ref><sp/>(pending))</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" kindref="member" tooltip="Removes a timeout using the connection&amp;#39;s DBusRemoveTimeoutFunction if available.">_dbus_connection_remove_timeout_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" kindref="member" tooltip="Retrives the timeout.">_dbus_pending_call_get_timeout_unlocked</ref><sp/>(pending));</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" kindref="member" tooltip="Sets wether the timeout has been added.">_dbus_pending_call_set_timeout_added_unlocked</ref><sp/>(pending,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusHashTable_1ga0ef12d773a546f070cff91cbf1e8d16e" kindref="member" tooltip="Removes the current entry from the hash table.">_dbus_hash_iter_remove_entry</ref><sp/>(&amp;iter);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga26f09beed0dd6323cca0452abf344567" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">_dbus_pending_call_unref_and_unlock</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal">complete_pending_call_and_unlock<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending,</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/>*message)</highlight></codeline>
<codeline lineno="2297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga4b8cc560549160aecd924037a872009d" kindref="member" tooltip="Sets the reply of a pending call with the given message, or if the message is NULL, by timing out the pending call.">_dbus_pending_call_set_reply_unlocked</ref><sp/>(pending,<sp/>message);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" kindref="member" tooltip="Increments the reference count on a pending call, while the lock on its connection is already held...">_dbus_pending_call_ref_unlocked</ref><sp/>(pending);<sp/></highlight><highlight class="comment">/*<sp/>in<sp/>case<sp/>there&apos;s<sp/>no<sp/>app<sp/>with<sp/>a<sp/>ref<sp/>held<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/>_dbus_connection_detach_pending_call_and_unlock<sp/>(connection,<sp/>pending);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>be<sp/>called<sp/>unlocked<sp/>since<sp/>it<sp/>invokes<sp/>app<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga6b10d157242e540fd18bd3db733dab5c" kindref="member" tooltip="Calls notifier function for the pending call and sets the call to completed.">_dbus_pending_call_complete</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">dbus_pending_call_unref</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2308"><highlight class="normal">check_for_reply_and_update_dispatch_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending)</highlight></codeline>
<codeline lineno="2310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*reply;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>reply<sp/>=<sp/>check_for_reply_unlocked<sp/>(connection,<sp/></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" kindref="member" tooltip="Gets the reply&amp;#39;s serial number.">_dbus_pending_call_get_reply_serial_unlocked</ref><sp/>(pending));</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reply<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;checked<sp/>for<sp/>reply\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dbus_connection_send_with_reply_and_block():<sp/>got<sp/>reply\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complete_pending_call_and_unlock<sp/>(connection,<sp/>pending,<sp/>reply);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(reply);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">dbus_pending_call_unref</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351" refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" refkind="member"><highlight class="normal"><ref refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" kindref="member" tooltip="Blocks until a pending call times out or gets a reply.">_dbus_connection_block_pending_call</ref><sp/>(<ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending)</highlight></codeline>
<codeline lineno="2352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>start_tv_sec,<sp/>start_tv_usec;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tv_sec,<sp/>tv_usec;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/>dbus_uint32_t<sp/>client_serial;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><ref refid="structDBusTimeout" kindref="compound" tooltip="Internals of DBusTimeout.">DBusTimeout</ref><sp/>*timeout;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout_milliseconds,<sp/>elapsed_milliseconds;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(pending<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusPendingCall_1gacbf33ae8a1cc125628f9ea44d175c159" kindref="member" tooltip="Checks whether the pending call has received a reply yet, or not.">dbus_pending_call_get_completed</ref><sp/>(pending))</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCall_1ga334f6c6621583e15fdaf1a3f93dd2221" kindref="member" tooltip="Increments the reference count on a pending call.">dbus_pending_call_ref</ref><sp/>(pending);<sp/></highlight><highlight class="comment">/*<sp/>necessary<sp/>because<sp/>the<sp/>call<sp/>could<sp/>be<sp/>canceled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusPendingCallInternals_1ga68e5ff616e6a6563d83966c3d88b9b32" kindref="member" tooltip="Gets the connection associated with this pending call.">_dbus_pending_call_get_connection_and_lock</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flush<sp/>message<sp/>queue<sp/>-<sp/>note,<sp/>can<sp/>affect<sp/>dispatch<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>_dbus_connection_flush_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>client_serial<sp/>=<sp/><ref refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" kindref="member" tooltip="Gets the reply&amp;#39;s serial number.">_dbus_pending_call_get_reply_serial_unlocked</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>note<sp/>that<sp/>timeout_milliseconds<sp/>is<sp/>limited<sp/>to<sp/>a<sp/>smallish<sp/>value</highlight></codeline>
<codeline lineno="2376"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>_dbus_pending_call_new()<sp/>so<sp/>overflows<sp/>aren&apos;t<sp/>possible</highlight></codeline>
<codeline lineno="2377"><highlight class="comment"><sp/><sp/><sp/>*<sp/>below</highlight></codeline>
<codeline lineno="2378"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/>timeout<sp/>=<sp/><ref refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" kindref="member" tooltip="Retrives the timeout.">_dbus_pending_call_get_timeout_unlocked</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><ref refid="group__DBusSysdeps_1ga4e3cbe529fc3e7984ed6553672e085f8" kindref="member" tooltip="Get current time, as in gettimeofday().">_dbus_get_current_time</ref><sp/>(&amp;start_tv_sec,<sp/>&amp;start_tv_usec);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout)</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds<sp/>=<sp/><ref refid="group__DBusTimeout_1ga67ba21b6189438875c6007ee79da5e37" kindref="member" tooltip="Gets the timeout interval.">dbus_timeout_get_interval</ref><sp/>(timeout);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dbus_connection_send_with_reply_and_block():<sp/>will<sp/>block<sp/>%d<sp/>milliseconds<sp/>for<sp/>reply<sp/>serial<sp/>%u<sp/>from<sp/>%ld<sp/>sec<sp/>%ld<sp/>usec\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds,</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client_serial,</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_tv_sec,<sp/>start_tv_usec);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dbus_connection_send_with_reply_and_block():<sp/>will<sp/>block<sp/>for<sp/>reply<sp/>serial<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>client_serial);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>to<sp/>see<sp/>if<sp/>we<sp/>already<sp/>got<sp/>the<sp/>data<sp/>off<sp/>the<sp/>socket<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>from<sp/>another<sp/>blocked<sp/>pending<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check_for_reply_and_update_dispatch_unlocked<sp/>(connection,<sp/>pending))</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>we<sp/>wait...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>always<sp/>block<sp/>at<sp/>least<sp/>once<sp/>as<sp/>we<sp/>know<sp/>we<sp/>don&apos;t<sp/>have<sp/>the<sp/>reply<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" kindref="member" tooltip="Queues incoming messages and sends outgoing messages for this connection, optionally blocking in the ...">_dbus_connection_do_iteration_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pending,</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_DO_READING<sp/>|</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_BLOCK,</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/>recheck_status:</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;top<sp/>of<sp/>recheck\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>queue<sp/>messages<sp/>and<sp/>get<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>get_completed()<sp/>is<sp/>in<sp/>case<sp/>a<sp/>dispatch()<sp/>while<sp/>we<sp/>were<sp/>blocking</highlight></codeline>
<codeline lineno="2421"><highlight class="comment"><sp/><sp/><sp/>*<sp/>got<sp/>the<sp/>reply<sp/>instead<sp/>of<sp/>us.</highlight></codeline>
<codeline lineno="2422"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusPendingCallInternals_1ga37bef4359b3c29629a57f5fe480690a1" kindref="member" tooltip="Checks whether the pending call has received a reply yet, or not.">_dbus_pending_call_get_completed_unlocked</ref><sp/>(pending))</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Pending<sp/>call<sp/>completed<sp/>by<sp/>dispatch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">dbus_pending_call_unref</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member" tooltip="There is more data to potentially convert to messages.">DBUS_DISPATCH_DATA_REMAINS</ref>)</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check_for_reply_and_update_dispatch_unlocked<sp/>(connection,<sp/>pending))</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><ref refid="group__DBusSysdeps_1ga4e3cbe529fc3e7984ed6553672e085f8" kindref="member" tooltip="Get current time, as in gettimeofday().">_dbus_get_current_time</ref><sp/>(&amp;tv_sec,<sp/>&amp;tv_usec);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/>elapsed_milliseconds<sp/>=<sp/>(tv_sec<sp/>-<sp/>start_tv_sec)<sp/>*<sp/>1000<sp/>+</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tv_usec<sp/>-<sp/>start_tv_usec)<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_dbus_connection_get_is_connected_unlocked<sp/>(connection))</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*error_msg;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/>generate_local_error_message<sp/>(client_serial,</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusProtocol_1gaef6443e0bd8cdcc1606d985a775d07a7" kindref="member" tooltip="The connection is disconnected and you&amp;#39;re trying to use it.">DBUS_ERROR_DISCONNECTED</ref>,<sp/></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Connection<sp/>was<sp/>disconnected<sp/>before<sp/>a<sp/>reply<sp/>was<sp/>received&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>on<sp/>OOM<sp/>error_msg<sp/>is<sp/>set<sp/>to<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complete_pending_call_and_unlock<sp/>(connection,<sp/>pending,<sp/>error_msg);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">dbus_pending_call_unref</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dbus_connection_send_with_reply_and_block():<sp/>disconnected\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member" tooltip="More memory is needed to continue.">DBUS_DISPATCH_NEED_MEMORY</ref>)</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>sleeping<sp/>a<sp/>bit,<sp/>as<sp/>we<sp/>aren&apos;t<sp/>sure<sp/>we<sp/>need<sp/>to<sp/>block<sp/>for<sp/>reading,</highlight></codeline>
<codeline lineno="2461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>may<sp/>already<sp/>have<sp/>a<sp/>reply<sp/>in<sp/>the<sp/>buffer<sp/>and<sp/>just<sp/>can&apos;t<sp/>process</highlight></codeline>
<codeline lineno="2462"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>it.</highlight></codeline>
<codeline lineno="2463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dbus_connection_send_with_reply_and_block()<sp/>waiting<sp/>for<sp/>more<sp/>memory\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_memory_pause_based_on_timeout<sp/>(timeout_milliseconds<sp/>-<sp/>elapsed_milliseconds);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>block<sp/>again,<sp/>we<sp/>don&apos;t<sp/>have<sp/>the<sp/>reply<sp/>buffered<sp/>yet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" kindref="member" tooltip="Queues incoming messages and sends outgoing messages for this connection, optionally blocking in the ...">_dbus_connection_do_iteration_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pending,</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_DO_READING<sp/>|</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_BLOCK,</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds<sp/>-<sp/>elapsed_milliseconds);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>recheck_status;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tv_sec<sp/>&lt;<sp/>start_tv_sec)</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dbus_connection_send_with_reply_and_block():<sp/>clock<sp/>set<sp/>backward\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elapsed_milliseconds<sp/>&lt;<sp/>timeout_milliseconds)</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dbus_connection_send_with_reply_and_block():<sp/>%d<sp/>milliseconds<sp/>remain\n&quot;</highlight><highlight class="normal">,<sp/>timeout_milliseconds<sp/>-<sp/>elapsed_milliseconds);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member" tooltip="More memory is needed to continue.">DBUS_DISPATCH_NEED_MEMORY</ref>)</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>sleeping<sp/>a<sp/>bit,<sp/>as<sp/>we<sp/>aren&apos;t<sp/>sure<sp/>we<sp/>need<sp/>to<sp/>block<sp/>for<sp/>reading,</highlight></codeline>
<codeline lineno="2489"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>may<sp/>already<sp/>have<sp/>a<sp/>reply<sp/>in<sp/>the<sp/>buffer<sp/>and<sp/>just<sp/>can&apos;t<sp/>process</highlight></codeline>
<codeline lineno="2490"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>it.</highlight></codeline>
<codeline lineno="2491"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dbus_connection_send_with_reply_and_block()<sp/>waiting<sp/>for<sp/>more<sp/>memory\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_memory_pause_based_on_timeout<sp/>(timeout_milliseconds<sp/>-<sp/>elapsed_milliseconds);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>block<sp/>again,<sp/>we<sp/>don&apos;t<sp/>have<sp/>the<sp/>reply<sp/>buffered<sp/>yet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" kindref="member" tooltip="Queues incoming messages and sends outgoing messages for this connection, optionally blocking in the ...">_dbus_connection_do_iteration_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_DO_READING<sp/>|</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_BLOCK,</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds<sp/>-<sp/>elapsed_milliseconds);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>recheck_status;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dbus_connection_send_with_reply_and_block():<sp/>Waited<sp/>%d<sp/>milliseconds<sp/>and<sp/>got<sp/>no<sp/>reply\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elapsed_milliseconds);</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(!<ref refid="group__DBusPendingCallInternals_1ga37bef4359b3c29629a57f5fe480690a1" kindref="member" tooltip="Checks whether the pending call has received a reply yet, or not.">_dbus_pending_call_get_completed_unlocked</ref><sp/>(pending));</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>unlock<sp/>and<sp/>call<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/>complete_pending_call_and_unlock<sp/>(connection,<sp/>pending,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>user<sp/>code<sp/>on<sp/>dispatch<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">dbus_pending_call_unref</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="2522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref>*</highlight></codeline>
<codeline lineno="2561" refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member" tooltip="Gets a connection to a remote address.">dbus_connection_open</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*address,</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/>*error)</highlight></codeline>
<codeline lineno="2563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(address<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_error_is_set<sp/>(error,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/>_dbus_connection_open_internal<sp/>(address,</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>,</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connection;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref>*</highlight></codeline>
<codeline lineno="2604" refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member" tooltip="Opens a new, dedicated connection to a remote address.">dbus_connection_open_private</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*address,</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/>*error)</highlight></codeline>
<codeline lineno="2606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(address<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_error_is_set<sp/>(error,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/>_dbus_connection_open_internal<sp/>(address,</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>,</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connection;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*</highlight></codeline>
<codeline lineno="2626" refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" kindref="member" tooltip="Increments the reference count of a DBusConnection.">dbus_connection_ref</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection-&gt;<ref refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" kindref="member" tooltip="_dbus_current_generation that should correspond to this connection">generation</ref><sp/>==<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" kindref="member" tooltip="Reference count.">refcount</ref>);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connection;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal">free_outgoing_message<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*element,</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="2639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*message<sp/>=<sp/>element;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMessageInternals_1ga339e5ead12e353a66fb93f1c1d441c3a" kindref="member" tooltip="Removes a counter tracking the size/unix fds of this message, and decrements the counter by the size/...">_dbus_message_remove_counter</ref><sp/>(message,</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" kindref="member" tooltip="Counts size of outgoing messages.">outgoing_counter</ref>,</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(message);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>run<sp/>without<sp/>the<sp/>mutex<sp/>held,<sp/>but<sp/>after<sp/>the<sp/>last<sp/>reference</highlight></codeline>
<codeline lineno="2650"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>connection<sp/>has<sp/>been<sp/>dropped<sp/>we<sp/>should<sp/>have<sp/>no<sp/>thread-related</highlight></codeline>
<codeline lineno="2651"><highlight class="comment"><sp/>*<sp/>problems</highlight></codeline>
<codeline lineno="2652"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal">_dbus_connection_last_unref<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Finalizing<sp/>connection<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>connection);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(<ref refid="group__DBusSysdeps_1ga626c810359ba0e362367ce2ec6691aca" kindref="member" tooltip="Atomically get the value of an integer.">_dbus_atomic_get</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" kindref="member" tooltip="Reference count.">refcount</ref>)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>You<sp/>have<sp/>to<sp/>disconnect<sp/>the<sp/>connection<sp/>before<sp/>unref:ing<sp/>it.<sp/>Otherwise</highlight></codeline>
<codeline lineno="2663"><highlight class="comment"><sp/><sp/><sp/>*<sp/>you<sp/>won&apos;t<sp/>get<sp/>the<sp/>disconnected<sp/>message.</highlight></codeline>
<codeline lineno="2664"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(!<ref refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" kindref="member" tooltip="Returns TRUE if the transport has not been disconnected.">_dbus_transport_get_is_connected</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>));</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" kindref="member" tooltip="GUID of server if we are in shared_connections, NULL if server GUID is unknown or connection is priva...">server_guid</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>----<sp/>We&apos;re<sp/>going<sp/>to<sp/>call<sp/>various<sp/>application<sp/>callbacks<sp/>here,<sp/>hope<sp/>it<sp/>doesn&apos;t<sp/>break<sp/>anything...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><ref refid="group__DBusObjectTree_1ga1c51e43233ce0f3855c128f2555317eb" kindref="member" tooltip="Free all the handlers in the tree.">_dbus_object_tree_free_all_unlocked</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>);</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" kindref="member" tooltip="Set a function to be invoked when the dispatch status changes.">dbus_connection_set_dispatch_status_function</ref><sp/>(connection,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga2b1df13251c7ec348bcba39c0924e881" kindref="member" tooltip="Sets the mainloop wakeup function for the connection.">dbus_connection_set_wakeup_main_function</ref><sp/>(connection,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" kindref="member" tooltip="Sets a predicate function used to determine whether a given user ID is allowed to connect...">dbus_connection_set_unix_user_function</ref><sp/>(connection,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><ref refid="group__DBusWatchInternals_1gac3f75c0da2c8c51e8708f45dd27f9e2d" kindref="member" tooltip="Frees a DBusWatchList.">_dbus_watch_list_free</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" kindref="member" tooltip="Stores active watches.">watches</ref>);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" kindref="member" tooltip="Stores active watches.">watches</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTimeoutInternals_1ga1b399ef2d7f128e59bb32dbb5b590e1b" kindref="member" tooltip="Frees a DBusTimeoutList.">_dbus_timeout_list_free</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" kindref="member" tooltip="Stores active timeouts.">timeouts</ref>);</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" kindref="member" tooltip="Stores active timeouts.">timeouts</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><ref refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" kindref="member" tooltip="Frees the data slot list and all data slots contained in it, calling application-provided free functi...">_dbus_data_slot_list_free</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" kindref="member" tooltip="Data stored by allocated integer ID.">slot_list</ref>);</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>);</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref><sp/>*filter<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*next<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" kindref="member" tooltip="Function to call to filter.">function</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_message_filter_unref<sp/>(filter);<sp/></highlight><highlight class="comment">/*<sp/>calls<sp/>app<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>);</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>----<sp/>Done<sp/>with<sp/>stuff<sp/>that<sp/>invokes<sp/>application<sp/>callbacks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><ref refid="group__DBusObjectTree_1ga7639e273ab160c422a7cef0cda60ded5" kindref="member" tooltip="Decrement the reference count.">_dbus_object_tree_unref</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><ref refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" kindref="member" tooltip="Decrements the reference count for a hash table, freeing the hash table if the count reaches zero...">_dbus_hash_table_unref</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>);</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" kindref="member" tooltip="Calls the given function for each element in the list.">_dbus_list_foreach</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" kindref="member" tooltip="Queue of messages we need to send, send the end of the list first.">outgoing_messages</ref>,</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_outgoing_message,</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection);</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" kindref="member" tooltip="Queue of messages we need to send, send the end of the list first.">outgoing_messages</ref>);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" kindref="member" tooltip="Calls the given function for each element in the list.">_dbus_list_foreach</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>,</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DBusForeachFunction)<sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref>,</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><ref refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" kindref="member" tooltip="Decrements refcount of the counter and possibly finalizes the counter.">_dbus_counter_unref</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" kindref="member" tooltip="Counts size of outgoing messages.">outgoing_counter</ref>);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1gab7c53c32a2320c81aae8ce4345762e73" kindref="member" tooltip="Decrements the reference count for the transport.">_dbus_transport_unref</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref>)</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*message<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref>-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(message);</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref>);</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1acecb9b77a9f7f234f41aa87c96cc49f9" kindref="member" tooltip="A cache of linked list links to prevent contention for the global linked list mempool lock...">link_cache</ref>);</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" kindref="member" tooltip="Frees a conditional variable and removes it from the uninitialized_condvar_list; does nothing if pass...">_dbus_condvar_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" kindref="member" tooltip="Notify when dispatch_acquired is available.">dispatch_cond</ref>);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" kindref="member" tooltip="Frees a conditional variable and removes it from the uninitialized_condvar_list; does nothing if pass...">_dbus_condvar_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" kindref="member" tooltip="Notify when io_path_acquired is available.">io_path_cond</ref>);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" kindref="member" tooltip="Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a NULL pointer...">_dbus_mutex_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a0dfeaf376073e91b370742869762c353" kindref="member" tooltip="Protects io_path_acquired.">io_path_mutex</ref>);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" kindref="member" tooltip="Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a NULL pointer...">_dbus_mutex_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>);</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" kindref="member" tooltip="Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a NULL pointer...">_dbus_mutex_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1ad85b04cfea8a6a8efc5489f85b31122f" kindref="member" tooltip="Lock on slot_list so overall connection lock need not be taken.">slot_mutex</ref>);</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1gafd7f94bf0c265660749ffa690e76248a" kindref="member" tooltip="Frees a mutex and removes it from the uninitialized_mutex_list; does nothing if passed a NULL pointer...">_dbus_mutex_free_at_location</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1ab5726e8d3ff6b08910899b7fe6d7293e" kindref="member" tooltip="Lock on the entire DBusConnection.">mutex</ref>);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762" refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member" tooltip="Decrements the reference count of a DBusConnection, and finalizes it if the count reaches zero...">dbus_connection_unref</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2763"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>last_unref;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection-&gt;<ref refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" kindref="member" tooltip="_dbus_current_generation that should correspond to this connection">generation</ref><sp/>==<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/>last_unref<sp/>=<sp/>(<ref refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" kindref="member" tooltip="Atomically decrement an integer.">_dbus_atomic_dec</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" kindref="member" tooltip="Reference count.">refcount</ref>)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_unref)</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DBUS_DISABLE_CHECKS</highlight></codeline>
<codeline lineno="2774"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" kindref="member" tooltip="Returns TRUE if the transport has not been disconnected.">_dbus_transport_get_is_connected</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>))</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" kindref="member" tooltip="Prints a &amp;quot;critical&amp;quot; warning to stderr when an assertion fails; differs from _dbus_warn primarily in t...">_dbus_warn_check_failed</ref><sp/>(</highlight><highlight class="stringliteral">&quot;The<sp/>last<sp/>reference<sp/>on<sp/>a<sp/>connection<sp/>was<sp/>dropped<sp/>without<sp/>closing<sp/>the<sp/>connection.<sp/>This<sp/>is<sp/>a<sp/>bug<sp/>in<sp/>an<sp/>application.<sp/>See<sp/>dbus_connection_unref()<sp/>documentation<sp/>for<sp/>details.\n%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" kindref="member" tooltip="TRUE if libdbus owns a reference to the connection and can return it from dbus_connection_open() more...">shareable</ref><sp/>?</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Most<sp/>likely,<sp/>the<sp/>application<sp/>called<sp/>unref()<sp/>too<sp/>many<sp/>times<sp/>and<sp/>removed<sp/>a<sp/>reference<sp/>belonging<sp/>to<sp/>libdbus,<sp/>since<sp/>this<sp/>is<sp/>a<sp/>shared<sp/>connection.\n&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Most<sp/>likely,<sp/>the<sp/>application<sp/>was<sp/>supposed<sp/>to<sp/>call<sp/>dbus_connection_close(),<sp/>since<sp/>this<sp/>is<sp/>a<sp/>private<sp/>connection.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2783"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_last_unref<sp/>(connection);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2788"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>the<sp/>transport<sp/>can<sp/>disconnect<sp/>itself<sp/>(other<sp/>end<sp/>drops<sp/>us)</highlight></codeline>
<codeline lineno="2789"><highlight class="comment"><sp/>*<sp/>and<sp/>in<sp/>that<sp/>case<sp/>this<sp/>function<sp/>never<sp/>runs.<sp/>So<sp/>this<sp/>function<sp/>must</highlight></codeline>
<codeline lineno="2790"><highlight class="comment"><sp/>*<sp/>not<sp/>do<sp/>anything<sp/>more<sp/>than<sp/>disconnect<sp/>the<sp/>transport<sp/>and<sp/>update<sp/>the</highlight></codeline>
<codeline lineno="2791"><highlight class="comment"><sp/>*<sp/>dispatch<sp/>status.</highlight></codeline>
<codeline lineno="2792"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2793"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>transport<sp/>self-disconnects,<sp/>then<sp/>we<sp/>assume<sp/>someone<sp/>will</highlight></codeline>
<codeline lineno="2794"><highlight class="comment"><sp/>*<sp/>dispatch<sp/>the<sp/>connection<sp/>to<sp/>cause<sp/>the<sp/>dispatch<sp/>status<sp/>update.</highlight></codeline>
<codeline lineno="2795"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal">_dbus_connection_close_possibly_shared_and_unlock<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Disconnecting<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>connection);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>ref<sp/>because<sp/>update_dispatch_status_and_unlock<sp/>will<sp/>unref</highlight></codeline>
<codeline lineno="2806"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>connection<sp/>if<sp/>it<sp/>was<sp/>shared<sp/>and<sp/>libdbus<sp/>was<sp/>the<sp/>only<sp/>remaining</highlight></codeline>
<codeline lineno="2807"><highlight class="comment"><sp/><sp/><sp/>*<sp/>refcount<sp/>holder.</highlight></codeline>
<codeline lineno="2808"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" kindref="member" tooltip="Increments the reference count of a DBusConnection.">_dbus_connection_ref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1ga78444dd8f6c6d6b429433ad81c3e318a" kindref="member" tooltip="Closes our end of the connection to a remote application.">_dbus_transport_disconnect</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>has<sp/>the<sp/>side<sp/>effect<sp/>of<sp/>queuing<sp/>the<sp/>disconnect<sp/>message<sp/>link</highlight></codeline>
<codeline lineno="2814"><highlight class="comment"><sp/><sp/><sp/>*<sp/>(unless<sp/>we<sp/>don&apos;t<sp/>have<sp/>enough<sp/>memory,<sp/>possibly,<sp/>so<sp/>don&apos;t<sp/>assert<sp/>it).</highlight></codeline>
<codeline lineno="2815"><highlight class="comment"><sp/><sp/><sp/>*<sp/>After<sp/>the<sp/>disconnect<sp/>message<sp/>link<sp/>is<sp/>queued,<sp/>dbus_bus_get/dbus_connection_open</highlight></codeline>
<codeline lineno="2816"><highlight class="comment"><sp/><sp/><sp/>*<sp/>should<sp/>never<sp/>again<sp/>return<sp/>the<sp/>newly-disconnected<sp/>connection.</highlight></codeline>
<codeline lineno="2817"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2818"><highlight class="comment"><sp/><sp/><sp/>*<sp/>However,<sp/>we<sp/>only<sp/>unref<sp/>the<sp/>shared<sp/>connection<sp/>and<sp/>exit_on_disconnect<sp/>when</highlight></codeline>
<codeline lineno="2819"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>disconnect<sp/>message<sp/>reaches<sp/>the<sp/>head<sp/>of<sp/>the<sp/>message<sp/>queue,</highlight></codeline>
<codeline lineno="2820"><highlight class="comment"><sp/><sp/><sp/>*<sp/>NOT<sp/>when<sp/>it&apos;s<sp/>first<sp/>queued.</highlight></codeline>
<codeline lineno="2821"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>calls<sp/>out<sp/>to<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Could<sp/>also<sp/>call<sp/>out<sp/>to<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member" tooltip="Decrements the reference count of a DBusConnection, and finalizes it if the count reaches zero...">dbus_connection_unref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2874" refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member" tooltip="Closes a private connection, so no further data can be sent or received.">dbus_connection_close</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection-&gt;<ref refid="structDBusConnection_1a49516d636e8a63e1e05e2ab2ba5adcb8" kindref="member" tooltip="_dbus_current_generation that should correspond to this connection">generation</ref><sp/>==<sp/><ref refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" kindref="member" tooltip="_dbus_current_generation is used to track each time that dbus_shutdown() is called, so we can reinit things after it&amp;#39;s been called.">_dbus_current_generation</ref>);</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DBUS_DISABLE_CHECKS</highlight></codeline>
<codeline lineno="2882"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" kindref="member" tooltip="TRUE if libdbus owns a reference to the connection and can return it from dbus_connection_open() more...">shareable</ref>)</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" kindref="member" tooltip="Prints a &amp;quot;critical&amp;quot; warning to stderr when an assertion fails; differs from _dbus_warn primarily in t...">_dbus_warn_check_failed</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Applications<sp/>must<sp/>not<sp/>close<sp/>shared<sp/>connections<sp/>-<sp/>see<sp/>dbus_connection_close()<sp/>docs.<sp/>This<sp/>is<sp/>a<sp/>bug<sp/>in<sp/>the<sp/>application.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2890"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/>_dbus_connection_close_possibly_shared_and_unlock<sp/>(connection);</highlight></codeline>
<codeline lineno="2892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2895"><highlight class="normal">_dbus_connection_get_is_connected_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2896"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" kindref="member" tooltip="Returns TRUE if the transport has not been disconnected.">_dbus_transport_get_is_connected</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="2899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2915" refid="group__DBusConnection_1ga611ae94556af36fe30bfb547366ca4e1" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga611ae94556af36fe30bfb547366ca4e1" kindref="member" tooltip="Gets whether the connection is currently open.">dbus_connection_get_is_connected</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2916"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>res;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>_dbus_connection_get_is_connected_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2937" refid="group__DBusConnection_1ga2f1fa02c9897b6f07f4d33c862de4a1d" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga2f1fa02c9897b6f07f4d33c862de4a1d" kindref="member" tooltip="Gets whether the connection was authenticated.">dbus_connection_get_is_authenticated</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>res;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/><ref refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" kindref="member" tooltip="Returns TRUE if we have been authenticated.">_dbus_transport_get_is_authenticated</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2971" refid="group__DBusConnection_1gaa6c5d523e16d8a5b9316c92d9ff1ac17" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gaa6c5d523e16d8a5b9316c92d9ff1ac17" kindref="member" tooltip="Gets whether the connection is not authenticated as a specific user.">dbus_connection_get_is_anonymous</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="2972"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>res;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/><ref refid="group__DBusTransport_1gaf0588dd4a6d1c556dd885d4c67622399" kindref="member" tooltip="See dbus_connection_get_is_anonymous().">_dbus_transport_get_is_anonymous</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="3016" refid="group__DBusConnection_1gae6c19e146a37f9de6a06c1617874bed9" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gae6c19e146a37f9de6a06c1617874bed9" kindref="member" tooltip="Gets the ID of the server address we are authenticated to, if this connection is on the client side...">dbus_connection_get_server_id</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="3017"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*id;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" kindref="member" tooltip="Duplicates a string.">_dbus_strdup</ref><sp/>(<ref refid="group__DBusTransport_1ga920abde00e77a970330fa3fc552fe7ea" kindref="member" tooltip="Gets the id of the server we are connected to (see dbus_server_get_id()).">_dbus_transport_get_server_id</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>));</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="3047" refid="group__DBusConnection_1ga3e41509b3afdbc22872bacc5754e85c2" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga3e41509b3afdbc22872bacc5754e85c2" kindref="member" tooltip="Tests whether a certain type can be send via the connection.">dbus_connection_can_send_type</ref>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="3049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusMarshal_1gaa1bf18d3c95d4d4632fbdfe3a1d22bed" kindref="member" tooltip="Return TRUE if the typecode is a valid typecode.">_dbus_type_is_valid</ref>(type))</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/><ref refid="group__DBusProtocol_1ga59f8acaeb207b182982dfb97174b7f16" kindref="member" tooltip="Type code marking a unix file descriptor.">DBUS_TYPE_UNIX_FD</ref>)</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_UNIX_FD_PASSING</highlight></codeline>
<codeline lineno="3059"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>b;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref>(connection);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/><ref refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" kindref="member" tooltip="Returns TRUE if the transport supports sending unix fds.">_dbus_transport_can_pass_unix_fd</ref>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref>(connection);</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3069"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087" refid="group__DBusConnection_1ga19091beb74f1504b0e862a7ad10e71cd" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga19091beb74f1504b0e862a7ad10e71cd" kindref="member" tooltip="Set whether _exit() should be called when the connection receives a disconnect signal.">dbus_connection_set_exit_on_disconnect</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/>exit_on_disconnect)</highlight></codeline>
<codeline lineno="3089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" kindref="member" tooltip="If TRUE, exit after handling disconnect signal.">exit_on_disconnect</ref><sp/>=<sp/>exit_on_disconnect<sp/>!=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref>*</highlight></codeline>
<codeline lineno="3107" refid="group__DBusConnection_1ga6136968eba30e8313e668a622fcfb08d" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga6136968eba30e8313e668a622fcfb08d" kindref="member" tooltip="Preallocates resources needed to send a message, allowing the message to be sent without the possibil...">dbus_connection_preallocate_send</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="3108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref><sp/>*preallocated;</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/>preallocated<sp/>=</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_connection_preallocate_send_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>preallocated;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3133" refid="group__DBusConnection_1gad0ea06307b418616711131ea7bdae8ac" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gad0ea06307b418616711131ea7bdae8ac" kindref="member" tooltip="Frees preallocated message-sending resources from dbus_connection_preallocate_send().">dbus_connection_free_preallocated_send</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref><sp/>*preallocated)</highlight></codeline>
<codeline lineno="3135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(preallocated<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>==<sp/>preallocated-&gt;<ref refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" kindref="member" tooltip="Connection we&amp;#39;d send the message to.">connection</ref>);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(preallocated-&gt;<ref refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" kindref="member" tooltip="Preallocated link in the queue.">queue_link</ref>);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><ref refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" kindref="member" tooltip="Decrements refcount of the counter and possibly finalizes the counter.">_dbus_counter_unref</ref><sp/>(preallocated-&gt;<ref refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" kindref="member" tooltip="Preallocated link in the resource counter.">counter_link</ref>-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(preallocated-&gt;<ref refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" kindref="member" tooltip="Preallocated link in the resource counter.">counter_link</ref>);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(preallocated);</highlight></codeline>
<codeline lineno="3144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3159" refid="group__DBusConnection_1ga2fea5f972d1bfe7bcde8c0ec65ca9e90" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga2fea5f972d1bfe7bcde8c0ec65ca9e90" kindref="member" tooltip="Sends a message using preallocated resources.">dbus_connection_send_preallocated</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref><sp/>*preallocated,</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*client_serial)</highlight></codeline>
<codeline lineno="3163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(preallocated<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(message<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(preallocated-&gt;<ref refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" kindref="member" tooltip="Connection we&amp;#39;d send the message to.">connection</ref><sp/>==<sp/>connection);</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message)<sp/>!=<sp/><ref refid="group__DBusProtocol_1ga09416afd76b65139eddd31e1085d9ebf" kindref="member" tooltip="Message type of a method call message, see dbus_message_get_type()">DBUS_MESSAGE_TYPE_METHOD_CALL</ref><sp/>||</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message)<sp/>!=<sp/><ref refid="group__DBusProtocol_1ga728d893ff0c00e126517ba39835220a5" kindref="member" tooltip="Message type of a signal message, see dbus_message_get_type()">DBUS_MESSAGE_TYPE_SIGNAL</ref><sp/>||</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>));</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_UNIX_FD_PASSING</highlight></codeline>
<codeline lineno="3177"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" kindref="member" tooltip="Returns TRUE if the transport supports sending unix fds.">_dbus_transport_can_pass_unix_fd</ref>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;n_unix_fds<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Refuse<sp/>to<sp/>send<sp/>fds<sp/>on<sp/>a<sp/>connection<sp/>that<sp/>cannot<sp/>handle</highlight></codeline>
<codeline lineno="3182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>them.<sp/>Unfortunately<sp/>we<sp/>cannot<sp/>return<sp/>a<sp/>proper<sp/>error<sp/>here,<sp/>so</highlight></codeline>
<codeline lineno="3183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>best<sp/>we<sp/>can<sp/>is<sp/>just<sp/>return.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3189"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/>_dbus_connection_send_preallocated_and_unlock<sp/>(connection,</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preallocated,</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,<sp/>client_serial);</highlight></codeline>
<codeline lineno="3193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="3196"><highlight class="normal">_dbus_connection_send_unlocked_no_update<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/><sp/>*client_serial)</highlight></codeline>
<codeline lineno="3199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref><sp/>*preallocated;</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(message<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/>preallocated<sp/>=<sp/>_dbus_connection_preallocate_send_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preallocated<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/>_dbus_connection_send_preallocated_unlocked_no_update<sp/>(connection,</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preallocated,</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client_serial);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="3244" refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member" tooltip="Adds a message to the outgoing message queue.">dbus_connection_send</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_uint32_t<sp/><sp/>*serial)</highlight></codeline>
<codeline lineno="3247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(message<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_UNIX_FD_PASSING</highlight></codeline>
<codeline lineno="3254"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" kindref="member" tooltip="Returns TRUE if the transport supports sending unix fds.">_dbus_transport_can_pass_unix_fd</ref>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;n_unix_fds<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Refuse<sp/>to<sp/>send<sp/>fds<sp/>on<sp/>a<sp/>connection<sp/>that<sp/>cannot<sp/>handle</highlight></codeline>
<codeline lineno="3259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>them.<sp/>Unfortunately<sp/>we<sp/>cannot<sp/>return<sp/>a<sp/>proper<sp/>error<sp/>here,<sp/>so</highlight></codeline>
<codeline lineno="3260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>best<sp/>we<sp/>can<sp/>is<sp/>just<sp/>return.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3266"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnectionInternals_1ga2974eb1c261305fafc635e14fc575d03" kindref="member" tooltip="Like dbus_connection_send(), but assumes the connection is already locked on function entry...">_dbus_connection_send_and_unlock</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serial);</highlight></codeline>
<codeline lineno="3270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="3273"><highlight class="normal">reply_handler_timeout<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="3274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/>connection<sp/>=<sp/><ref refid="group__DBusPendingCallInternals_1ga68e5ff616e6a6563d83966c3d88b9b32" kindref="member" tooltip="Gets the connection associated with this pending call.">_dbus_pending_call_get_connection_and_lock</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga1bc4de7652108d0629522a4e3adffcab" kindref="member" tooltip="If the pending call hasn&amp;#39;t been timed out, add its timeout error reply to the connection&amp;#39;s incoming m...">_dbus_pending_call_queue_timeout_error_unlocked</ref><sp/>(pending,<sp/></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection);</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" kindref="member" tooltip="Removes a timeout using the connection&amp;#39;s DBusRemoveTimeoutFunction if available.">_dbus_connection_remove_timeout_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" kindref="member" tooltip="Retrives the timeout.">_dbus_pending_call_get_timeout_unlocked</ref><sp/>(pending));</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" kindref="member" tooltip="Sets wether the timeout has been added.">_dbus_pending_call_set_timeout_added_unlocked</ref><sp/>(pending,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;middle\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unlocks,<sp/>and<sp/>calls<sp/>out<sp/>to<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="3339" refid="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" kindref="member" tooltip="Queues a message to send, as with dbus_connection_send(), but also returns a DBusPendingCall used to ...">dbus_connection_send_with_reply</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/><sp/><sp/>**pending_return,</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds)</highlight></codeline>
<codeline lineno="3343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending;</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/>dbus_int32_t<sp/>serial<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(message<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(timeout_milliseconds<sp/>&gt;=<sp/>0<sp/>||<sp/>timeout_milliseconds<sp/>==<sp/>-1,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending_return)</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/>*pending_return<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_UNIX_FD_PASSING</highlight></codeline>
<codeline lineno="3358"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" kindref="member" tooltip="Returns TRUE if the transport supports sending unix fds.">_dbus_transport_can_pass_unix_fd</ref>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;n_unix_fds<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Refuse<sp/>to<sp/>send<sp/>fds<sp/>on<sp/>a<sp/>connection<sp/>that<sp/>cannot<sp/>handle</highlight></codeline>
<codeline lineno="3363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>them.<sp/>Unfortunately<sp/>we<sp/>cannot<sp/>return<sp/>a<sp/>proper<sp/>error<sp/>here,<sp/>so</highlight></codeline>
<codeline lineno="3364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>best<sp/>we<sp/>can<sp/>do<sp/>is<sp/>return<sp/>TRUE<sp/>but<sp/>leave<sp/>*pending_return</highlight></codeline>
<codeline lineno="3365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3371"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_dbus_connection_get_is_connected_unlocked<sp/>(connection))</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/>pending<sp/>=<sp/><ref refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" kindref="member" tooltip="Creates a new pending reply object.">_dbus_pending_call_new_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds,</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply_handler_timeout);</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assign<sp/>a<sp/>serial<sp/>to<sp/>the<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/>serial<sp/>=<sp/><ref refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" kindref="member" tooltip="Returns the serial of a message or 0 if none has been specified.">dbus_message_get_serial</ref><sp/>(message);</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(serial<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>serial<sp/>=<sp/>_dbus_connection_get_next_client_serial<sp/>(connection);</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga3dd30a62c63eb9972cc0c564f2a89c3b" kindref="member" tooltip="Sets the serial number of a message.">dbus_message_set_serial</ref><sp/>(message,<sp/>serial);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusPendingCallInternals_1ga9901fc4c5fd2db9bf1ce2dcc9abf55fc" kindref="member" tooltip="Sets the reply message associated with the pending call to a timeout error.">_dbus_pending_call_set_timeout_error_unlocked</ref><sp/>(pending,<sp/>message,<sp/>serial))</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>serial<sp/>in<sp/>the<sp/>pending<sp/>replies<sp/>hash;</highlight></codeline>
<codeline lineno="3401"><highlight class="comment"><sp/><sp/><sp/>*<sp/>hash<sp/>takes<sp/>a<sp/>refcount<sp/>on<sp/>DBusPendingCall.</highlight></codeline>
<codeline lineno="3402"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Also,<sp/>add<sp/>the<sp/>timeout.</highlight></codeline>
<codeline lineno="3403"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_dbus_connection_attach_pending_call_unlocked<sp/>(connection,</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pending))</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_dbus_connection_send_unlocked_no_update<sp/>(connection,<sp/>message,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_detach_pending_call_and_unlock<sp/>(connection,</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pending);</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_unlocked;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending_return)</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/>*pending_return<sp/>=<sp/>pending;<sp/></highlight><highlight class="comment">/*<sp/>hand<sp/>off<sp/>refcount<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_detach_pending_call_unlocked<sp/>(connection,<sp/>pending);</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>still<sp/>have<sp/>a<sp/>ref<sp/>to<sp/>the<sp/>pending<sp/>call<sp/>in<sp/>this<sp/>case,<sp/>we<sp/>unref</highlight></codeline>
<codeline lineno="3421"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>after<sp/>unlocking,<sp/>below</highlight></codeline>
<codeline lineno="3422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>calls<sp/>out<sp/>to<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending_return<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">dbus_pending_call_unref</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/>error:</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/>error_unlocked:</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">dbus_pending_call_unref</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref>*</highlight></codeline>
<codeline lineno="3475" refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" kindref="member" tooltip="Sends a message and blocks a certain time period while waiting for a reply.">dbus_connection_send_with_reply_and_block</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds,</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error)</highlight></codeline>
<codeline lineno="3479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*reply;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(message<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(timeout_milliseconds<sp/>&gt;=<sp/>0<sp/>||<sp/>timeout_milliseconds<sp/>==<sp/>-1,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_error_is_set<sp/>(error,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_UNIX_FD_PASSING</highlight></codeline>
<codeline lineno="3489"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" kindref="member" tooltip="Returns TRUE if the transport supports sending unix fds.">_dbus_transport_can_pass_unix_fd</ref>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message-&gt;n_unix_fds<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" kindref="member" tooltip="Assigns an error name and message to a DBusError.">dbus_set_error</ref>(error,<sp/><ref refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" kindref="member" tooltip="A generic error; &amp;quot;something went wrong&amp;quot; - see the error message for more.">DBUS_ERROR_FAILED</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>send<sp/>file<sp/>descriptors<sp/>on<sp/>this<sp/>connection.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3501"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" kindref="member" tooltip="Queues a message to send, as with dbus_connection_send(), but also returns a DBusPendingCall used to ...">dbus_connection_send_with_reply</ref><sp/>(connection,<sp/>message,</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pending,<sp/>timeout_milliseconds))</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_SET_OOM<sp/>(error);</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" kindref="member" tooltip="Assigns an error name and message to a DBusError.">dbus_set_error</ref><sp/>(error,<sp/><ref refid="group__DBusProtocol_1gaef6443e0bd8cdcc1606d985a775d07a7" kindref="member" tooltip="The connection is disconnected and you&amp;#39;re trying to use it.">DBUS_ERROR_DISCONNECTED</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Connection<sp/>is<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCall_1ga67b99f749a7f477c7b5d70f2acee5452" kindref="member" tooltip="Block until the pending call is completed.">dbus_pending_call_block</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/>reply<sp/>=<sp/><ref refid="group__DBusPendingCall_1ga5a738928c2369fef093ce00658903d06" kindref="member" tooltip="Gets the reply, or returns NULL if none has been received yet.">dbus_pending_call_steal_reply</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" kindref="member" tooltip="Decrements the reference count on a pending call, freeing it if the count reaches 0...">dbus_pending_call_unref</ref><sp/>(pending);</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>call_complete_and_unlock()<sp/>called<sp/>from<sp/>pending_call_block()<sp/>should</highlight></codeline>
<codeline lineno="3521"><highlight class="comment"><sp/><sp/><sp/>*<sp/>always<sp/>fill<sp/>this<sp/>in.</highlight></codeline>
<codeline lineno="3522"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(reply<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMessage_1gaba5e49e956e6bbd1f857ffd21c289276" kindref="member" tooltip="Sets a DBusError based on the contents of the given message.">dbus_set_error_from_message</ref><sp/>(error,<sp/>reply))</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(reply);</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reply;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref></highlight></codeline>
<codeline lineno="3543"><highlight class="normal">_dbus_connection_flush_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="3544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>have<sp/>to<sp/>specify<sp/>DBUS_ITERATION_DO_READING<sp/>here<sp/>because</highlight></codeline>
<codeline lineno="3546"><highlight class="comment"><sp/><sp/><sp/>*<sp/>otherwise<sp/>we<sp/>could<sp/>have<sp/>two<sp/>apps<sp/>deadlock<sp/>if<sp/>they<sp/>are<sp/>both<sp/>doing</highlight></codeline>
<codeline lineno="3547"><highlight class="comment"><sp/><sp/><sp/>*<sp/>a<sp/>flush(),<sp/>and<sp/>the<sp/>kernel<sp/>buffers<sp/>fill<sp/>up.<sp/>This<sp/>could<sp/>change<sp/>the</highlight></codeline>
<codeline lineno="3548"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dispatch<sp/>status.</highlight></codeline>
<codeline lineno="3549"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_get_is_connected_unlocked<sp/>(connection))</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;doing<sp/>iteration<sp/>in\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" kindref="member" tooltip="Queues incoming messages and sends outgoing messages for this connection, optionally blocking in the ...">_dbus_connection_do_iteration_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_DO_READING<sp/>|</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_DO_WRITING<sp/>|</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_BLOCK,</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;middle\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="3573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3581" refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member" tooltip="Blocks until the outgoing message queue is empty.">dbus_connection_flush</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="3582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>have<sp/>to<sp/>specify<sp/>DBUS_ITERATION_DO_READING<sp/>here<sp/>because</highlight></codeline>
<codeline lineno="3584"><highlight class="comment"><sp/><sp/><sp/>*<sp/>otherwise<sp/>we<sp/>could<sp/>have<sp/>two<sp/>apps<sp/>deadlock<sp/>if<sp/>they<sp/>are<sp/>both<sp/>doing</highlight></codeline>
<codeline lineno="3585"><highlight class="comment"><sp/><sp/><sp/>*<sp/>a<sp/>flush(),<sp/>and<sp/>the<sp/>kernel<sp/>buffers<sp/>fill<sp/>up.<sp/>This<sp/>could<sp/>change<sp/>the</highlight></codeline>
<codeline lineno="3586"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dispatch<sp/>status.</highlight></codeline>
<codeline lineno="3587"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_flush_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unlocks<sp/>and<sp/>calls<sp/>out<sp/>to<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;end\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="3614"><highlight class="normal">_dbus_connection_read_write_dispatch<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds,<sp/></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/>dispatch)</highlight></codeline>
<codeline lineno="3617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>dstatus;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>progress_possible;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Need<sp/>to<sp/>grab<sp/>a<sp/>ref<sp/>here<sp/>in<sp/>case<sp/>we&apos;re<sp/>a<sp/>private<sp/>connection<sp/>and</highlight></codeline>
<codeline lineno="3622"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>user<sp/>drops<sp/>the<sp/>last<sp/>ref<sp/>in<sp/>a<sp/>handler<sp/>we<sp/>call;<sp/>see<sp/>bug<sp/></highlight></codeline>
<codeline lineno="3623"><highlight class="comment"><sp/><sp/><sp/>*<sp/>https://bugs.freedesktop.org/show_bug.cgi?id=15635</highlight></codeline>
<codeline lineno="3624"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" kindref="member" tooltip="Increments the reference count of a DBusConnection.">dbus_connection_ref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/>dstatus<sp/>=<sp/><ref refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" kindref="member" tooltip="Gets the current state of the incoming message queue.">dbus_connection_get_dispatch_status</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dispatch<sp/>&amp;&amp;<sp/>dstatus<sp/>==<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member" tooltip="There is more data to potentially convert to messages.">DBUS_DISPATCH_DATA_REMAINS</ref>)</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;doing<sp/>dispatch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member" tooltip="Processes any incoming data.">dbus_connection_dispatch</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstatus<sp/>==<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member" tooltip="More memory is needed to continue.">DBUS_DISPATCH_NEED_MEMORY</ref>)</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;pausing<sp/>for<sp/>memory\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_memory_pause_based_on_timeout<sp/>(timeout_milliseconds);</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_connection_get_is_connected_unlocked<sp/>(connection))</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;doing<sp/>iteration\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" kindref="member" tooltip="Queues incoming messages and sends outgoing messages for this connection, optionally blocking in the ...">_dbus_connection_do_iteration_unlocked</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_DO_READING<sp/>|</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_DO_WRITING<sp/>|</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBUS_ITERATION_BLOCK,</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds);</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>can<sp/>dispatch,<sp/>we<sp/>can<sp/>make<sp/>progress<sp/>until<sp/>the<sp/>Disconnected<sp/>message</highlight></codeline>
<codeline lineno="3657"><highlight class="comment"><sp/><sp/><sp/>*<sp/>has<sp/>been<sp/>processed;<sp/>if<sp/>we<sp/>can<sp/>only<sp/>read/write,<sp/>we<sp/>can<sp/>make<sp/>progress</highlight></codeline>
<codeline lineno="3658"><highlight class="comment"><sp/><sp/><sp/>*<sp/>as<sp/>long<sp/>as<sp/>the<sp/>transport<sp/>is<sp/>open.</highlight></codeline>
<codeline lineno="3659"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dispatch)</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/>progress_possible<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>!=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>progress_possible<sp/>=<sp/>_dbus_connection_get_is_connected_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member" tooltip="Decrements the reference count of a DBusConnection, and finalizes it if the count reaches zero...">dbus_connection_unref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>progress_possible;<sp/></highlight><highlight class="comment">/*<sp/>TRUE<sp/>if<sp/>we<sp/>can<sp/>make<sp/>more<sp/>progress<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="3709" refid="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" kindref="member" tooltip="This function is intended for use with applications that don&amp;#39;t want to write a main loop and deal wit...">dbus_connection_read_write_dispatch</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds)</highlight></codeline>
<codeline lineno="3711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(timeout_milliseconds<sp/>&gt;=<sp/>0<sp/>||<sp/>timeout_milliseconds<sp/>==<sp/>-1,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_dbus_connection_read_write_dispatch(connection,<sp/>timeout_milliseconds,<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>);</highlight></codeline>
<codeline lineno="3715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/></highlight></codeline>
<codeline lineno="3741" refid="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" kindref="member" tooltip="This function is intended for use with applications that don&amp;#39;t want to write a main loop and deal wit...">dbus_connection_read_write</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,<sp/></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds)<sp/></highlight></codeline>
<codeline lineno="3743"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(timeout_milliseconds<sp/>&gt;=<sp/>0<sp/>||<sp/>timeout_milliseconds<sp/>==<sp/>-1,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_dbus_connection_read_write_dispatch(connection,<sp/>timeout_milliseconds,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="3747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>call<sp/>this<sp/>anytime<sp/>we<sp/>pop<sp/>the<sp/>head<sp/>of<sp/>the<sp/>queue,<sp/>and<sp/>then</highlight></codeline>
<codeline lineno="3750"><highlight class="comment"><sp/>*<sp/>update_dispatch_status_and_unlock<sp/>needs<sp/>to<sp/>be<sp/>called<sp/>afterward</highlight></codeline>
<codeline lineno="3751"><highlight class="comment"><sp/>*<sp/>which<sp/>will<sp/>&quot;process&quot;<sp/>the<sp/>disconnected<sp/>message<sp/>and<sp/>set</highlight></codeline>
<codeline lineno="3752"><highlight class="comment"><sp/>*<sp/>disconnected_message_processed.</highlight></codeline>
<codeline lineno="3753"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3755"><highlight class="normal">check_disconnected_message_arrived_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*head_of_queue)</highlight></codeline>
<codeline lineno="3757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>checking<sp/>that<sp/>the<sp/>link<sp/>is<sp/>NULL<sp/>is<sp/>an<sp/>optimization<sp/>to<sp/>avoid<sp/>the<sp/>is_signal<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga4326c8394d84d71d6f6dd3af4f7af2c6" kindref="member" tooltip="Checks whether the message is a signal with the given interface and member fields.">dbus_message_is_signal</ref><sp/>(head_of_queue,</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusShared_1ga9ef6478aae637449ec0c5de1679f75ce" kindref="member" tooltip="This is a special interface whose methods can only be invoked by the local implementation (messages f...">DBUS_INTERFACE_LOCAL</ref>,</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Disconnected&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a48d141d4311211e921571043bdbaeefb" kindref="member" tooltip="We popped or are dispatching the disconnected message.">disconnected_message_arrived</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref>*</highlight></codeline>
<codeline lineno="3790" refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member" tooltip="Returns the first-received message from the incoming message queue, leaving it in the queue...">dbus_connection_borrow_message</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="3791"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*message;</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;start\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>called<sp/>for<sp/>the<sp/>side<sp/>effect<sp/>that<sp/>it<sp/>queues</highlight></codeline>
<codeline lineno="3800"><highlight class="comment"><sp/><sp/><sp/>*<sp/>up<sp/>any<sp/>messages<sp/>from<sp/>the<sp/>transport</highlight></codeline>
<codeline lineno="3801"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/><ref refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" kindref="member" tooltip="Gets the current state of the incoming message queue.">dbus_connection_get_dispatch_status</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member" tooltip="There is more data to potentially convert to messages.">DBUS_DISPATCH_DATA_REMAINS</ref>)</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/>_dbus_connection_acquire_dispatch<sp/>(connection);</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>While<sp/>a<sp/>message<sp/>is<sp/>outstanding,<sp/>the<sp/>dispatch<sp/>lock<sp/>is<sp/>held<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref><sp/>=<sp/><ref refid="group__DBusList_1ga254e18f698f5fc518bde031e723e67c6" kindref="member" tooltip="Gets the first data in the list.">_dbus_list_get_first</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>);</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/>message<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref>;</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/>check_disconnected_message_arrived_unlocked<sp/>(connection,<sp/>message);</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>that<sp/>we<sp/>KEEP<sp/>the<sp/>dispatch<sp/>lock<sp/>until<sp/>the<sp/>message<sp/>is<sp/>returned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>_dbus_connection_release_dispatch<sp/>(connection);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>don&apos;t<sp/>update<sp/>dispatch<sp/>status<sp/>until<sp/>it&apos;s<sp/>returned<sp/>or<sp/>stolen<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3839" refid="group__DBusConnection_1ga0586da03a01c9c6f332fbea900ef55e3" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga0586da03a01c9c6f332fbea900ef55e3" kindref="member" tooltip="Used to return a message after peeking at it using dbus_connection_borrow_message().">dbus_connection_return_message</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*message)</highlight></codeline>
<codeline lineno="3841"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(message<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(message<sp/>==<sp/>connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref>);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection-&gt;<ref refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" kindref="member" tooltip="Someone has dispatch path (can drain incoming queue)">dispatch_acquired</ref>);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(message<sp/>==<sp/>connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref>);</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/>_dbus_connection_release_dispatch<sp/>(connection);<sp/></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="3859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3871" refid="group__DBusConnection_1ga7125d747575b2f596aceaf7be53eae68" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga7125d747575b2f596aceaf7be53eae68" kindref="member" tooltip="Used to keep a message after peeking at it using dbus_connection_borrow_message().">dbus_connection_steal_borrowed_message</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*message)</highlight></codeline>
<codeline lineno="3873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*pop_message;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(message<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(message<sp/>==<sp/>connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref>);</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection-&gt;<ref refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" kindref="member" tooltip="Someone has dispatch path (can drain incoming queue)">dispatch_acquired</ref>);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(message<sp/>==<sp/>connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref>);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/>pop_message<sp/>=<sp/><ref refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" kindref="member" tooltip="Removes the first value in the list and returns it.">_dbus_list_pop_first</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>);</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(message<sp/>==<sp/>pop_message);</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Incoming<sp/>message<sp/>%p<sp/>stolen<sp/>from<sp/>queue,<sp/>%d<sp/>incoming\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,<sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref>);</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/>_dbus_connection_release_dispatch<sp/>(connection);</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="3900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>See<sp/>dbus_connection_pop_message,<sp/>but<sp/>requires<sp/>the<sp/>caller<sp/>to<sp/>own</highlight></codeline>
<codeline lineno="3903"><highlight class="comment"><sp/>*<sp/>the<sp/>lock<sp/>before<sp/>calling.<sp/>May<sp/>drop<sp/>the<sp/>lock<sp/>while<sp/>running.</highlight></codeline>
<codeline lineno="3904"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref>*</highlight></codeline>
<codeline lineno="3906"><highlight class="normal">_dbus_connection_pop_message_link_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="3907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" kindref="member" tooltip="Removes the first link in the list and returns it.">_dbus_list_pop_first_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>);</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Message<sp/>%p<sp/>(%s<sp/>%s<sp/>%s<sp/>%s<sp/>&apos;%s&apos;)<sp/>removed<sp/>from<sp/>incoming<sp/>queue<sp/>%p,<sp/>%d<sp/>incoming\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>,</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" kindref="member" tooltip="Utility function to convert a D-Bus message type into a machine-readable string (not translated)...">dbus_message_type_to_string</ref><sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)),</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" kindref="member" tooltip="Gets the object path this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitt...">dbus_message_get_path</ref><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>?</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" kindref="member" tooltip="Gets the object path this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitt...">dbus_message_get_path</ref><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>:</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>path&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>?</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>:</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>interface&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>?</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>:</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>member&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" kindref="member" tooltip="Gets the type signature of the message, i.e.">dbus_message_get_signature</ref><sp/>(link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>),</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection,<sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref>);</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_disconnected_message_arrived_unlocked<sp/>(connection,<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>);</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>See<sp/>dbus_connection_pop_message,<sp/>but<sp/>requires<sp/>the<sp/>caller<sp/>to<sp/>own</highlight></codeline>
<codeline lineno="3943"><highlight class="comment"><sp/>*<sp/>the<sp/>lock<sp/>before<sp/>calling.<sp/>May<sp/>drop<sp/>the<sp/>lock<sp/>while<sp/>running.</highlight></codeline>
<codeline lineno="3944"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref>*</highlight></codeline>
<codeline lineno="3946"><highlight class="normal">_dbus_connection_pop_message_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="3947"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/>_dbus_connection_pop_message_link_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*message;</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(link);</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="3966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal">_dbus_connection_putback_message_link_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message_link)</highlight></codeline>
<codeline lineno="3971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(message_link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>You<sp/>can&apos;t<sp/>borrow<sp/>a<sp/>message<sp/>while<sp/>a<sp/>link<sp/>is<sp/>outstanding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" kindref="member" tooltip="Filled in if the first incoming message has been borrowed; dispatch_acquired will be set by the borro...">message_borrowed</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>had<sp/>to<sp/>have<sp/>the<sp/>dispatch<sp/>lock<sp/>across<sp/>the<sp/>pop/putback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" kindref="member" tooltip="Someone has dispatch path (can drain incoming queue)">dispatch_acquired</ref>);</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" kindref="member" tooltip="Prepends a link to the list.">_dbus_list_prepend_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>,</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message_link);</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Message<sp/>%p<sp/>(%s<sp/>%s<sp/>%s<sp/>&apos;%s&apos;)<sp/>put<sp/>back<sp/>into<sp/>queue<sp/>%p,<sp/>%d<sp/>incoming\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message_link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>,</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" kindref="member" tooltip="Utility function to convert a D-Bus message type into a machine-readable string (not translated)...">dbus_message_type_to_string</ref><sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message_link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)),</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message_link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>?</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message_link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>:</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>interface&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message_link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>?</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message_link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>)<sp/>:</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>member&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" kindref="member" tooltip="Gets the type signature of the message, i.e.">dbus_message_get_signature</ref><sp/>(message_link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>),</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection,<sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref>);</highlight></codeline>
<codeline lineno="3995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref>*</highlight></codeline>
<codeline lineno="4017" refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" kindref="member" tooltip="Returns the first-received message from the incoming message queue, removing it from the queue...">dbus_connection_pop_message</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="4018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*message;</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;start\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>called<sp/>for<sp/>the<sp/>side<sp/>effect<sp/>that<sp/>it<sp/>queues</highlight></codeline>
<codeline lineno="4025"><highlight class="comment"><sp/><sp/><sp/>*<sp/>up<sp/>any<sp/>messages<sp/>from<sp/>the<sp/>transport</highlight></codeline>
<codeline lineno="4026"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/><ref refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" kindref="member" tooltip="Gets the current state of the incoming message queue.">dbus_connection_get_dispatch_status</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member" tooltip="There is more data to potentially convert to messages.">DBUS_DISPATCH_DATA_REMAINS</ref>)</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/>_dbus_connection_acquire_dispatch<sp/>(connection);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/>message<sp/>=<sp/>_dbus_connection_pop_message_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Returning<sp/>popped<sp/>message<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>message);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/>_dbus_connection_release_dispatch<sp/>(connection);</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="4045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal">_dbus_connection_acquire_dispatch<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="4056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" kindref="member" tooltip="Increments the reference count of a DBusConnection.">_dbus_connection_ref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;locking<sp/>dispatch_mutex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1gae6eafe138e9c317bfb25971d1d8bef2d" kindref="member" tooltip="Locks a mutex.">_dbus_mutex_lock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>);</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" kindref="member" tooltip="Someone has dispatch path (can drain incoming queue)">dispatch_acquired</ref>)</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;waiting<sp/>for<sp/>dispatch<sp/>to<sp/>be<sp/>acquirable\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga393c0cfdec998dc5abe49480ac21ea51" kindref="member" tooltip="Atomically unlocks the mutex and waits for the conditions variable to be signalled.">_dbus_condvar_wait</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" kindref="member" tooltip="Notify when dispatch_acquired is available.">dispatch_cond</ref>,<sp/></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>);</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(!connection-&gt;<ref refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" kindref="member" tooltip="Someone has dispatch path (can drain incoming queue)">dispatch_acquired</ref>);</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" kindref="member" tooltip="Someone has dispatch path (can drain incoming queue)">dispatch_acquired</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;unlocking<sp/>dispatch_mutex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga94dcc555488e5d677f10bd3898d61c00" kindref="member" tooltip="Unlocks a mutex.">_dbus_mutex_unlock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>);</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" kindref="member" tooltip="Decrements the reference count of a DBusConnection.">_dbus_connection_unref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal">_dbus_connection_release_dispatch<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="4092"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;locking<sp/>dispatch_mutex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1gae6eafe138e9c317bfb25971d1d8bef2d" kindref="member" tooltip="Locks a mutex.">_dbus_mutex_lock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>);</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(connection-&gt;<ref refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" kindref="member" tooltip="Someone has dispatch path (can drain incoming queue)">dispatch_acquired</ref>);</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" kindref="member" tooltip="Someone has dispatch path (can drain incoming queue)">dispatch_acquired</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga8af2fd84773022e7e7ce1f21f0126203" kindref="member" tooltip="If there are threads waiting on the condition variable, wake up exactly one.">_dbus_condvar_wake_one</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" kindref="member" tooltip="Notify when dispatch_acquired is available.">dispatch_cond</ref>);</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;unlocking<sp/>dispatch_mutex\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><ref refid="group__DBusThreadsInternals_1ga94dcc555488e5d677f10bd3898d61c00" kindref="member" tooltip="Unlocks a mutex.">_dbus_mutex_unlock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a11da240f65887a91f39770c9c2b28685" kindref="member" tooltip="Protects dispatch_acquired.">dispatch_mutex</ref>);</highlight></codeline>
<codeline lineno="4105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal">_dbus_connection_failed_pop<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message_link)</highlight></codeline>
<codeline lineno="4110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" kindref="member" tooltip="Prepends a link to the list.">_dbus_list_prepend_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" kindref="member" tooltip="Queue of messages we have received, end of the list received most recently.">incoming_messages</ref>,</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message_link);</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>this<sp/>may<sp/>be<sp/>called<sp/>multiple<sp/>times<sp/>since<sp/>we<sp/>don&apos;t<sp/>track<sp/>whether<sp/>we<sp/>already<sp/>did<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal">notify_disconnected_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="4119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"></highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>weakref<sp/>in<sp/>dbus-bus.c<sp/>to<sp/>NULL,<sp/>so<sp/>nobody<sp/>will<sp/>get<sp/>a<sp/>disconnected</highlight></codeline>
<codeline lineno="4123"><highlight class="comment"><sp/><sp/><sp/>*<sp/>connection<sp/>from<sp/>dbus_bus_get().<sp/>We<sp/>make<sp/>the<sp/>same<sp/>guarantee<sp/>for</highlight></codeline>
<codeline lineno="4124"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dbus_connection_open()<sp/>but<sp/>in<sp/>a<sp/>different<sp/>way<sp/>since<sp/>we<sp/>don&apos;t<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="4125"><highlight class="comment"><sp/><sp/><sp/>*<sp/>unref<sp/>right<sp/>here;<sp/>we<sp/>instead<sp/>check<sp/>for<sp/>connectedness<sp/>before<sp/>returning</highlight></codeline>
<codeline lineno="4126"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>connection<sp/>from<sp/>the<sp/>hash.</highlight></codeline>
<codeline lineno="4127"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><ref refid="group__DBusBusInternals_1ga0e7fe5d0dcaca7ecb4b5a7ace23d6286" kindref="member" tooltip="Internal function that checks to see if this is a shared connection owned by the bus and if it is unr...">_dbus_bus_notify_shared_connection_disconnected_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Dump<sp/>the<sp/>outgoing<sp/>queue,<sp/>we<sp/>aren&apos;t<sp/>going<sp/>to<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline lineno="4131"><highlight class="comment"><sp/><sp/><sp/>*<sp/>send<sp/>it<sp/>now,<sp/>and<sp/>we&apos;d<sp/>like<sp/>accessors<sp/>like</highlight></codeline>
<codeline lineno="4132"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dbus_connection_get_outgoing_size()<sp/>to<sp/>be<sp/>accurate.</highlight></codeline>
<codeline lineno="4133"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Dropping<sp/>%d<sp/>outgoing<sp/>messages<sp/>since<sp/>we&apos;re<sp/>disconnected\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" kindref="member" tooltip="Length of outgoing queue.">n_outgoing</ref>);</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((link<sp/>=<sp/><ref refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" kindref="member" tooltip="Gets the last link in the list.">_dbus_list_get_last_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" kindref="member" tooltip="Queue of messages we need to send, send the end of the list first.">outgoing_messages</ref>)))</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga2d04df24d0f54a4e2dcfbede4ef50f09" kindref="member" tooltip="Notifies the connection that a message has been sent, so the message can be removed from the outgoing...">_dbus_connection_message_sent</ref><sp/>(connection,<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>);</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="4146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>this<sp/>may<sp/>be<sp/>called<sp/>multiple<sp/>times<sp/>since<sp/>we<sp/>don&apos;t<sp/>track<sp/>whether<sp/>we<sp/>already<sp/>did<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref></highlight></codeline>
<codeline lineno="4150"><highlight class="normal">notify_disconnected_and_dispatch_complete_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="4151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Sending<sp/>disconnect<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>have<sp/>pending<sp/>calls,<sp/>queue<sp/>their<sp/>timeouts<sp/>-<sp/>we<sp/>want<sp/>the<sp/>Disconnected</highlight></codeline>
<codeline lineno="4159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>be<sp/>the<sp/>last<sp/>message,<sp/>after<sp/>these<sp/>timeouts.</highlight></codeline>
<codeline lineno="4160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection_timeout_and_complete_all_pending_calls_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>haven&apos;t<sp/>sent<sp/>the<sp/>disconnect<sp/>message<sp/>already,</highlight></codeline>
<codeline lineno="4164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>all<sp/>real<sp/>messages<sp/>have<sp/>been<sp/>queued<sp/>up.</highlight></codeline>
<codeline lineno="4165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnectionInternals_1gadb7a525dc6b566b575ee4f9b20028b04" kindref="member" tooltip="Adds a link + message to the incoming message queue.">_dbus_connection_queue_synthesized_message_link</ref><sp/>(connection,</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref>);</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" kindref="member" tooltip="Preallocated list node for queueing the disconnection message.">disconnect_message_link</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member" tooltip="There is more data to potentially convert to messages.">DBUS_DISPATCH_DATA_REMAINS</ref>;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member" tooltip="All currently available data has been processed.">DBUS_DISPATCH_COMPLETE</ref>;</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref></highlight></codeline>
<codeline lineno="4177"><highlight class="normal">_dbus_connection_get_dispatch_status_unlocked<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="4178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member" tooltip="There is more data to potentially convert to messages.">DBUS_DISPATCH_DATA_REMAINS</ref>;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1ga4046f36ecbdb75219f2b667f92e75a2b" kindref="member" tooltip="Processes data we&amp;#39;ve read while handling a watch, potentially converting some of it to messages and q...">_dbus_transport_queue_messages</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>))</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member" tooltip="More memory is needed to continue.">DBUS_DISPATCH_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>is_connected;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="group__DBusTransport_1ga32153a834758b5a88d7bde8f7a205c71" kindref="member" tooltip="Reports our current dispatch status (whether there&amp;#39;s buffered data to be queued as messages...">_dbus_transport_get_dispatch_status</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_connected<sp/>=<sp/><ref refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" kindref="member" tooltip="Returns TRUE if the transport has not been disconnected.">_dbus_transport_get_is_connected</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;dispatch<sp/>status<sp/>=<sp/>%s<sp/>is_connected<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DISPATCH_STATUS_NAME<sp/>(status),<sp/>is_connected);</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_connected)</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It&apos;s<sp/>possible<sp/>this<sp/>would<sp/>be<sp/>better<sp/>done<sp/>by<sp/>having<sp/>an<sp/>explicit</highlight></codeline>
<codeline lineno="4199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>notification<sp/>from<sp/>_dbus_transport_disconnect()<sp/>that<sp/>would</highlight></codeline>
<codeline lineno="4200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>synchronously<sp/>do<sp/>this,<sp/>instead<sp/>of<sp/>waiting<sp/>for<sp/>the<sp/>next<sp/>dispatch</highlight></codeline>
<codeline lineno="4201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>status<sp/>check.<sp/>However,<sp/>probably<sp/>not<sp/>good<sp/>to<sp/>change<sp/>until<sp/>it<sp/>causes</highlight></codeline>
<codeline lineno="4202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>problem.</highlight></codeline>
<codeline lineno="4203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notify_disconnected_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"></highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>I&apos;m<sp/>not<sp/>sure<sp/>this<sp/>is<sp/>needed;<sp/>the<sp/>idea<sp/>is<sp/>that<sp/>we<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="4207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>queue<sp/>the<sp/>Disconnected<sp/>only<sp/>after<sp/>we&apos;ve<sp/>read<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="4208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>messages,<sp/>but<sp/>if<sp/>we&apos;re<sp/>disconnected<sp/>maybe<sp/>we<sp/>are<sp/>guaranteed</highlight></codeline>
<codeline lineno="4209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>have<sp/>read<sp/>them<sp/>all<sp/>?</highlight></codeline>
<codeline lineno="4210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member" tooltip="All currently available data has been processed.">DBUS_DISPATCH_COMPLETE</ref>)</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>notify_disconnected_and_dispatch_complete_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member" tooltip="All currently available data has been processed.">DBUS_DISPATCH_COMPLETE</ref>)</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" kindref="member" tooltip="Length of incoming queue.">n_incoming</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member" tooltip="There is more data to potentially convert to messages.">DBUS_DISPATCH_DATA_REMAINS</ref>;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member" tooltip="All currently available data has been processed.">DBUS_DISPATCH_COMPLETE</ref>;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal">_dbus_connection_update_dispatch_status_and_unlock<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>new_status)</highlight></codeline>
<codeline lineno="4227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>changed;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gaad6e12a5d298ef30a99d8c667abad58a" kindref="member" tooltip="Called when the return value of dbus_connection_get_dispatch_status() may have changed.">DBusDispatchStatusFunction</ref><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" kindref="member" tooltip="Increments the reference count of a DBusConnection.">_dbus_connection_ref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/>changed<sp/>=<sp/>new_status<sp/>!=<sp/>connection-&gt;<ref refid="structDBusConnection_1af3bbd2ecba171ebb8e952eaa030971d7" kindref="member" tooltip="The last dispatch status we reported to the application.">last_dispatch_status</ref>;</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1af3bbd2ecba171ebb8e952eaa030971d7" kindref="member" tooltip="The last dispatch status we reported to the application.">last_dispatch_status</ref><sp/>=<sp/>new_status;</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1af6cbafdf80cd474c654fc226581900a2" kindref="member" tooltip="Function on dispatch status changes.">dispatch_status_function</ref>;</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/>data<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a0225f7934d1bd118ae2eeacf8a1c6f19" kindref="member" tooltip="Application data for dispatch_status_function.">dispatch_status_data</ref>;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a48d141d4311211e921571043bdbaeefb" kindref="member" tooltip="We popped or are dispatching the disconnected message.">disconnected_message_arrived</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!connection-&gt;<ref refid="structDBusConnection_1a3b2707b9d10d0643f91a8e027ae118b5" kindref="member" tooltip="We did our default handling of the disconnected message, such as closing the connection.">disconnected_message_processed</ref>)</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a3b2707b9d10d0643f91a8e027ae118b5" kindref="member" tooltip="We did our default handling of the disconnected message, such as closing the connection.">disconnected_message_processed</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>does<sp/>an<sp/>unref,<sp/>but<sp/>we<sp/>have<sp/>a<sp/>ref</highlight></codeline>
<codeline lineno="4249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>we<sp/>should<sp/>not<sp/>run<sp/>the<sp/>finalizer<sp/>here</highlight></codeline>
<codeline lineno="4250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>inside<sp/>the<sp/>lock.</highlight></codeline>
<codeline lineno="4251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connection_forget_shared_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" kindref="member" tooltip="If TRUE, exit after handling disconnect signal.">exit_on_disconnect</ref>)</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Exiting<sp/>on<sp/>Disconnected<sp/>signal\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusSysdeps_1ga203e3257b50597a8fe7757c920474a20" kindref="member" tooltip="Exit the process, returning the given value.">_dbus_exit</ref><sp/>(1);</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;Call<sp/>to<sp/>exit()<sp/>returned&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>drop<sp/>the<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(changed<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Notifying<sp/>of<sp/>change<sp/>to<sp/>dispatch<sp/>status<sp/>of<sp/>%p<sp/>now<sp/>%d<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection,<sp/>new_status,</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DISPATCH_STATUS_NAME<sp/>(new_status));</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>function)<sp/>(connection,<sp/>new_status,<sp/>data);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member" tooltip="Decrements the reference count of a DBusConnection, and finalizes it if the count reaches zero...">dbus_connection_unref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref></highlight></codeline>
<codeline lineno="4304" refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" kindref="member" tooltip="Gets the current state of the incoming message queue.">dbus_connection_get_dispatch_status</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="4305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member" tooltip="All currently available data has been processed.">DBUS_DISPATCH_COMPLETE</ref>);</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;start\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="4319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"></highlight></codeline>
<codeline lineno="4324"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1ga8244b29230187624c24986c24edab1de" kindref="member" tooltip="Results that a message handler can return.">DBusHandlerResult</ref></highlight></codeline>
<codeline lineno="4325"><highlight class="normal">_dbus_connection_peer_filter_unlocked_no_update<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*message)</highlight></codeline>
<codeline lineno="4327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connection-&gt;<ref refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" kindref="member" tooltip="If TRUE, if org.freedesktop.DBus.Peer messages have a bus name, don&amp;#39;t handle them automatically...">route_peer_messages</ref><sp/>&amp;&amp;<sp/><ref refid="group__DBusMessage_1gaac65c926e6253e49aa689b4f032fad45" kindref="member" tooltip="Gets the destination of a message or NULL if there is none set.">dbus_message_get_destination</ref><sp/>(message)<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>means<sp/>we&apos;re<sp/>letting<sp/>the<sp/>bus<sp/>route<sp/>this<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deacb84b64c92055f2585fe9c29f1e5df68" kindref="member" tooltip="Message has not had any effect - see if other handlers want it.">DBUS_HANDLER_RESULT_NOT_YET_HANDLED</ref>;</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMessage_1ga9287d997d0d3f0f1622457fcaceee196" kindref="member" tooltip="Checks whether the message is a method call with the given interface and member fields.">dbus_message_is_method_call</ref><sp/>(message,</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusShared_1gaacbd4e8ccdef18c75edd0785fbcc70ef" kindref="member" tooltip="The interface supported by most dbus peers.">DBUS_INTERFACE_PEER</ref>,</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ping&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*ret;</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>sent;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__DBusMessage_1ga95142bd8288f397194ee0eefb1d27125" kindref="member" tooltip="Constructs a message that is a reply to a method call.">dbus_message_new_method_return</ref><sp/>(message);</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sent<sp/>=<sp/>_dbus_connection_send_unlocked_no_update<sp/>(connection,<sp/>ret,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(ret);</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sent)</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" kindref="member" tooltip="Message has had its effect - no need to run more handlers.">DBUS_HANDLER_RESULT_HANDLED</ref>;</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMessage_1ga9287d997d0d3f0f1622457fcaceee196" kindref="member" tooltip="Checks whether the message is a method call with the given interface and member fields.">dbus_message_is_method_call</ref><sp/>(message,</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusShared_1gaacbd4e8ccdef18c75edd0785fbcc70ef" kindref="member" tooltip="The interface supported by most dbus peers.">DBUS_INTERFACE_PEER</ref>,</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;GetMachineId&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*ret;</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>sent;</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>uuid;</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__DBusMessage_1ga95142bd8288f397194ee0eefb1d27125" kindref="member" tooltip="Constructs a message that is a reply to a method call.">dbus_message_new_method_return</ref><sp/>(message);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sent<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" kindref="member" tooltip="Initializes a string.">_dbus_string_init</ref><sp/>(&amp;uuid);</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusInternalsUtils_1ga49ba67405d677af6cde9329ed87ea91f" kindref="member" tooltip="Gets the hex-encoded UUID of the machine this function is executed on.">_dbus_get_local_machine_uuid_encoded</ref><sp/>(&amp;uuid))</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*v_STRING<sp/>=<sp/>_dbus_string_get_const_data<sp/>(&amp;uuid);</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMessage_1ga591f3aab5dd2c87e56e05423c2a671d9" kindref="member" tooltip="Appends fields to a message given a variable argument list.">dbus_message_append_args</ref><sp/>(ret,</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusProtocol_1ga7eb77066dadf5415896b44c56d93acce" kindref="member" tooltip="Type code marking a UTF-8 encoded, nul-terminated Unicode string.">DBUS_TYPE_STRING</ref>,<sp/>&amp;v_STRING,</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusProtocol_1gaa9588da889743b2119dc6664712ae51e" kindref="member" tooltip="Type code that is never equal to a legitimate type code.">DBUS_TYPE_INVALID</ref>))</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent<sp/>=<sp/>_dbus_connection_send_unlocked_no_update<sp/>(connection,<sp/>ret,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;uuid);</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(ret);</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sent)</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" kindref="member" tooltip="Message has had its effect - no need to run more handlers.">DBUS_HANDLER_RESULT_HANDLED</ref>;</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMessage_1gae87fcf9730ced4e1eb12b08b7818eefa" kindref="member" tooltip="Checks if the message has an interface.">dbus_message_has_interface</ref><sp/>(message,<sp/><ref refid="group__DBusShared_1gaacbd4e8ccdef18c75edd0785fbcc70ef" kindref="member" tooltip="The interface supported by most dbus peers.">DBUS_INTERFACE_PEER</ref>))</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>bounce<sp/>anything<sp/>else<sp/>with<sp/>this<sp/>interface,<sp/>otherwise<sp/>apps</highlight></codeline>
<codeline lineno="4389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>could<sp/>start<sp/>extending<sp/>the<sp/>interface<sp/>and<sp/>when<sp/>we<sp/>added<sp/>extensions</highlight></codeline>
<codeline lineno="4390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>here<sp/>to<sp/>DBusConnection<sp/>we&apos;d<sp/>break<sp/>those<sp/>apps.</highlight></codeline>
<codeline lineno="4391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*ret;</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>sent;</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__DBusMessage_1ga2ab896965aec97fb21293affeed36232" kindref="member" tooltip="Creates a new message that is an error reply to another message.">dbus_message_new_error</ref><sp/>(message,</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusProtocol_1ga46c7cbfa1806b0cccb56e9a7ca92f02b" kindref="member" tooltip="Method name you invoked isn&amp;#39;t known by the object you invoked it on.">DBUS_ERROR_UNKNOWN_METHOD</ref>,</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>method<sp/>invoked<sp/>on<sp/>org.freedesktop.DBus.Peer<sp/>interface&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sent<sp/>=<sp/>_dbus_connection_send_unlocked_no_update<sp/>(connection,<sp/>ret,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(ret);</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sent)</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" kindref="member" tooltip="Message has had its effect - no need to run more handlers.">DBUS_HANDLER_RESULT_HANDLED</ref>;</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deacb84b64c92055f2585fe9c29f1e5df68" kindref="member" tooltip="Message has not had any effect - see if other handlers want it.">DBUS_HANDLER_RESULT_NOT_YET_HANDLED</ref>;</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1ga8244b29230187624c24986c24edab1de" kindref="member" tooltip="Results that a message handler can return.">DBusHandlerResult</ref></highlight></codeline>
<codeline lineno="4424"><highlight class="normal">_dbus_connection_run_builtin_filters_unlocked_no_update<sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/><sp/><sp/><sp/>*message)</highlight></codeline>
<codeline lineno="4426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>just<sp/>run<sp/>one<sp/>filter<sp/>for<sp/>now<sp/>but<sp/>have<sp/>the<sp/>option<sp/>to<sp/>run<sp/>more</highlight></codeline>
<codeline lineno="4428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if<sp/>the<sp/>spec<sp/>calls<sp/>for<sp/>it<sp/>in<sp/>the<sp/>future<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_dbus_connection_peer_filter_unlocked_no_update<sp/>(connection,<sp/>message);</highlight></codeline>
<codeline lineno="4431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref></highlight></codeline>
<codeline lineno="4476" refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member" tooltip="Processes any incoming data.">dbus_connection_dispatch</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="4477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*message;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link,<sp/>*filter_list_copy,<sp/>*message_link;</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><ref refid="group__DBusShared_1ga8244b29230187624c24986c24edab1de" kindref="member" tooltip="Results that a message handler can return.">DBusHandlerResult</ref><sp/>result;</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound" tooltip="Implementation details of DBusPendingCall - all fields are private.">DBusPendingCall</ref><sp/>*pending;</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/>dbus_int32_t<sp/>reply_serial;</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member" tooltip="Indicates the status of incoming data on a DBusConnection.">DBusDispatchStatus</ref><sp/>status;</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"></highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member" tooltip="All currently available data has been processed.">DBUS_DISPATCH_COMPLETE</ref>);</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member" tooltip="There is more data to potentially convert to messages.">DBUS_DISPATCH_DATA_REMAINS</ref>)</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unlocks<sp/>and<sp/>calls<sp/>out<sp/>to<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>ref<sp/>the<sp/>connection<sp/>since<sp/>the<sp/>callback<sp/>could<sp/>potentially</highlight></codeline>
<codeline lineno="4499"><highlight class="comment"><sp/><sp/><sp/>*<sp/>drop<sp/>the<sp/>last<sp/>ref<sp/>to<sp/>it</highlight></codeline>
<codeline lineno="4500"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" kindref="member" tooltip="Increments the reference count of a DBusConnection.">_dbus_connection_ref_unlocked</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/>_dbus_connection_acquire_dispatch<sp/>(connection);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"></highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/>message_link<sp/>=<sp/>_dbus_connection_pop_message_link_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message_link<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>another<sp/>thread<sp/>dispatched<sp/>our<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;another<sp/>thread<sp/>dispatched<sp/>message<sp/>(during<sp/>acquire_dispatch<sp/>above)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_release_dispatch<sp/>(connection);</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"></highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member" tooltip="Decrements the reference count of a DBusConnection, and finalizes it if the count reaches zero...">dbus_connection_unref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"></highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/>message<sp/>=<sp/>message_link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>dispatching<sp/>message<sp/>%p<sp/>(%s<sp/>%s<sp/>%s<sp/>&apos;%s&apos;)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" kindref="member" tooltip="Utility function to convert a D-Bus message type into a machine-readable string (not translated)...">dbus_message_type_to_string</ref><sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message)),</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>interface&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>member&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" kindref="member" tooltip="Gets the type signature of the message, i.e.">dbus_message_get_signature</ref><sp/>(message));</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deacb84b64c92055f2585fe9c29f1e5df68" kindref="member" tooltip="Message has not had any effect - see if other handlers want it.">DBUS_HANDLER_RESULT_NOT_YET_HANDLED</ref>;</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pending<sp/>call<sp/>handling<sp/>must<sp/>be<sp/>first,<sp/>because<sp/>if<sp/>you<sp/>do</highlight></codeline>
<codeline lineno="4540"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dbus_connection_send_with_reply_and_block()<sp/>or</highlight></codeline>
<codeline lineno="4541"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dbus_pending_call_block()<sp/>then<sp/>no<sp/>handlers/filters<sp/>will<sp/>be<sp/>run<sp/>on</highlight></codeline>
<codeline lineno="4542"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>reply.<sp/>We<sp/>want<sp/>consistent<sp/>semantics<sp/>in<sp/>the<sp/>case<sp/>where<sp/>we</highlight></codeline>
<codeline lineno="4543"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dbus_connection_dispatch()<sp/>the<sp/>reply.</highlight></codeline>
<codeline lineno="4544"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/>reply_serial<sp/>=<sp/><ref refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" kindref="member" tooltip="Returns the serial that the message is a reply to or 0 if none.">dbus_message_get_reply_serial</ref><sp/>(message);</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/>pending<sp/>=<sp/><ref refid="group__DBusHashTable_1ga36ff49c4c35599e6fcdadc7f6805c49e" kindref="member" tooltip="Looks up the value for a given integer in a hash table of type DBUS_HASH_INT.">_dbus_hash_table_lookup_int</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" kindref="member" tooltip="Hash of message serials to DBusPendingCall.">pending_replies</ref>,</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply_serial);</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pending)</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Dispatching<sp/>a<sp/>pending<sp/>reply\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complete_pending_call_and_unlock<sp/>(connection,<sp/>pending,<sp/>message);</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pending<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;<sp/></highlight><highlight class="comment">/*<sp/>it&apos;s<sp/>probably<sp/>unref&apos;d<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;pending<sp/>call<sp/>completed<sp/>in<sp/>dispatch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" kindref="member" tooltip="Message has had its effect - no need to run more handlers.">DBUS_HANDLER_RESULT_HANDLED</ref>;</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>_dbus_connection_run_builtin_filters_unlocked_no_update<sp/>(connection,<sp/>message);</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deacb84b64c92055f2585fe9c29f1e5df68" kindref="member" tooltip="Message has not had any effect - see if other handlers want it.">DBUS_HANDLER_RESULT_NOT_YET_HANDLED</ref>)</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" kindref="member" tooltip="Copies a list.">_dbus_list_copy</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>,<sp/>&amp;filter_list_copy))</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_release_dispatch<sp/>(connection);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_failed_pop<sp/>(connection,<sp/>message_link);</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unlocks<sp/>and<sp/>calls<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member" tooltip="More memory is needed to continue.">DBUS_DISPATCH_NEED_MEMORY</ref>);</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member" tooltip="Decrements the reference count of a DBusConnection, and finalizes it if the count reaches zero...">dbus_connection_unref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member" tooltip="More memory is needed to continue.">DBUS_DISPATCH_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" kindref="member" tooltip="Calls the given function for each element in the list.">_dbus_list_foreach</ref><sp/>(&amp;filter_list_copy,</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DBusForeachFunction)_dbus_message_filter_ref,</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We&apos;re<sp/>still<sp/>protected<sp/>from<sp/>dispatch()<sp/>reentrancy<sp/>here</highlight></codeline>
<codeline lineno="4585"><highlight class="comment"><sp/><sp/><sp/>*<sp/>since<sp/>we<sp/>acquired<sp/>the<sp/>dispatcher</highlight></codeline>
<codeline lineno="4586"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" kindref="member" tooltip="Gets the first link in the list.">_dbus_list_get_first_link</ref><sp/>(&amp;filter_list_copy);</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref><sp/>*filter<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*next<sp/>=<sp/><ref refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" kindref="member" tooltip="Gets the next link in the list, or NULL if there are no more links.">_dbus_list_get_next_link</ref><sp/>(&amp;filter_list_copy,<sp/>link);</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter-&gt;<ref refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" kindref="member" tooltip="Function to call to filter.">function</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>filter<sp/>was<sp/>removed<sp/>in<sp/>a<sp/>callback<sp/>function\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>running<sp/>filter<sp/>on<sp/>message<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>message);</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(*<sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" kindref="member" tooltip="Function to call to filter.">function</ref>)<sp/>(connection,<sp/>message,<sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" kindref="member" tooltip="User data for the function.">user_data</ref>);</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deacb84b64c92055f2585fe9c29f1e5df68" kindref="member" tooltip="Message has not had any effect - see if other handlers want it.">DBUS_HANDLER_RESULT_NOT_YET_HANDLED</ref>)</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"></highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" kindref="member" tooltip="Calls the given function for each element in the list.">_dbus_list_foreach</ref><sp/>(&amp;filter_list_copy,</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(DBusForeachFunction)_dbus_message_filter_unref,</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><ref refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" kindref="member" tooltip="Frees all links in the list and sets the list head to NULL.">_dbus_list_clear</ref><sp/>(&amp;filter_list_copy);</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>)</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;No<sp/>memory\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" kindref="member" tooltip="Message has had its effect - no need to run more handlers.">DBUS_HANDLER_RESULT_HANDLED</ref>)</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;filter<sp/>handled<sp/>message<sp/>in<sp/>dispatch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"></highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We&apos;re<sp/>still<sp/>protected<sp/>from<sp/>dispatch()<sp/>reentrancy<sp/>here</highlight></codeline>
<codeline lineno="4630"><highlight class="comment"><sp/><sp/><sp/>*<sp/>since<sp/>we<sp/>acquired<sp/>the<sp/>dispatcher</highlight></codeline>
<codeline lineno="4631"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>running<sp/>object<sp/>path<sp/>dispatch<sp/>on<sp/>message<sp/>%p<sp/>(%s<sp/>%s<sp/>%s<sp/>&apos;%s&apos;)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message,</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" kindref="member" tooltip="Utility function to convert a D-Bus message type into a machine-readable string (not translated)...">dbus_message_type_to_string</ref><sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message)),</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>interface&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>member&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" kindref="member" tooltip="Gets the type signature of the message, i.e.">dbus_message_get_signature</ref><sp/>(message));</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusObjectTree_1gab64dcc8febde768db3404cd93b333e1e" kindref="member" tooltip="Tries to dispatch a message by directing it to handler for the object path listed in the message head...">_dbus_object_tree_dispatch_and_unlock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>,</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message);</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deacb84b64c92055f2585fe9c29f1e5df68" kindref="member" tooltip="Message has not had any effect - see if other handlers want it.">DBUS_HANDLER_RESULT_NOT_YET_HANDLED</ref>)</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;object<sp/>tree<sp/>handled<sp/>message<sp/>in<sp/>dispatch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message)<sp/>==<sp/><ref refid="group__DBusProtocol_1ga09416afd76b65139eddd31e1085d9ebf" kindref="member" tooltip="Message type of a method call message, see dbus_message_get_type()">DBUS_MESSAGE_TYPE_METHOD_CALL</ref>)</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound" tooltip="Internals of DBusMessage.">DBusMessage</ref><sp/>*reply;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>str;</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound" tooltip="Internals of DBusPreallocatedSend.">DBusPreallocatedSend</ref><sp/>*preallocated;</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"></highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>sending<sp/>error<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusProtocol_1ga46c7cbfa1806b0cccb56e9a7ca92f02b" kindref="member" tooltip="Method name you invoked isn&amp;#39;t known by the object you invoked it on.">DBUS_ERROR_UNKNOWN_METHOD</ref>);</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" kindref="member" tooltip="Initializes a string.">_dbus_string_init</ref><sp/>(&amp;str))</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>memory<sp/>for<sp/>error<sp/>string<sp/>in<sp/>dispatch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gab0078cf7e0e5bd784ec6d6e0cc3923a2" kindref="member" tooltip="Appends a printf-style formatted string to the DBusString.">_dbus_string_append_printf</ref><sp/>(&amp;str,</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Method<sp/>\&quot;%s\&quot;<sp/>with<sp/>signature<sp/>\&quot;%s\&quot;<sp/>on<sp/>interface<sp/>\&quot;%s\&quot;<sp/>doesn&apos;t<sp/>exist\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message),</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" kindref="member" tooltip="Gets the type signature of the message, i.e.">dbus_message_get_signature</ref><sp/>(message),</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)))</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;str);</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>memory<sp/>for<sp/>error<sp/>string<sp/>in<sp/>dispatch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reply<sp/>=<sp/><ref refid="group__DBusMessage_1ga2ab896965aec97fb21293affeed36232" kindref="member" tooltip="Creates a new message that is an error reply to another message.">dbus_message_new_error</ref><sp/>(message,</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusProtocol_1ga46c7cbfa1806b0cccb56e9a7ca92f02b" kindref="member" tooltip="Method name you invoked isn&amp;#39;t known by the object you invoked it on.">DBUS_ERROR_UNKNOWN_METHOD</ref>,</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_string_get_const_data<sp/>(&amp;str));</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;str);</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reply<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>memory<sp/>for<sp/>error<sp/>reply<sp/>in<sp/>dispatch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>preallocated<sp/>=<sp/>_dbus_connection_preallocate_send_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(preallocated<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(reply);</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>memory<sp/>for<sp/>error<sp/>send<sp/>in<sp/>dispatch\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_send_preallocated_unlocked_no_update<sp/>(connection,<sp/>preallocated,</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(reply);</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" kindref="member" tooltip="Message has had its effect - no need to run more handlers.">DBUS_HANDLER_RESULT_HANDLED</ref>;</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>done<sp/>dispatching<sp/>%p<sp/>(%s<sp/>%s<sp/>%s<sp/>&apos;%s&apos;)<sp/>on<sp/>connection<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>message,</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" kindref="member" tooltip="Utility function to convert a D-Bus message type into a machine-readable string (not translated)...">dbus_message_type_to_string</ref><sp/>(<ref refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" kindref="member" tooltip="Gets the type of a message.">dbus_message_get_type</ref><sp/>(message)),</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" kindref="member" tooltip="Gets the interface this message is being sent to (for DBUS_MESSAGE_TYPE_METHOD_CALL) or being emitted...">dbus_message_get_interface</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>interface&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>?</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" kindref="member" tooltip="Gets the interface member being invoked (DBUS_MESSAGE_TYPE_METHOD_CALL) or emitted (DBUS_MESSAGE_TYPE...">dbus_message_get_member</ref><sp/>(message)<sp/>:</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>member&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" kindref="member" tooltip="Gets the type signature of the message, i.e.">dbus_message_get_signature</ref><sp/>(message),</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connection);</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/>out:</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" kindref="member" tooltip="Need more memory in order to return DBUS_HANDLER_RESULT_HANDLED or DBUS_HANDLER_RESULT_NOT_YET_HANDLE...">DBUS_HANDLER_RESULT_NEED_MEMORY</ref>)</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;out<sp/>of<sp/>memory\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>message<sp/>back,<sp/>and<sp/>we&apos;ll<sp/>start<sp/>over.</highlight></codeline>
<codeline lineno="4730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Yes<sp/>this<sp/>means<sp/>handlers<sp/>must<sp/>be<sp/>idempotent<sp/>if<sp/>they</highlight></codeline>
<codeline lineno="4731"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>don&apos;t<sp/>return<sp/>HANDLED;<sp/>c&apos;est<sp/>la<sp/>vie.</highlight></codeline>
<codeline lineno="4732"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_connection_putback_message_link_unlocked<sp/>(connection,</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message_link);</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>...<sp/>done<sp/>dispatching\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" kindref="member" tooltip="Frees a linked list node allocated with _dbus_list_alloc_link.">_dbus_list_free_link</ref><sp/>(message_link);</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member" tooltip="Decrements the reference count of a DBusMessage, freeing the message if the count reaches 0...">dbus_message_unref</ref><sp/>(message);<sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>want<sp/>the<sp/>message<sp/>to<sp/>count<sp/>in<sp/>max<sp/>message<sp/>limits</highlight></codeline>
<codeline lineno="4742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>computing<sp/>dispatch<sp/>status<sp/>below</highlight></codeline>
<codeline lineno="4743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/>_dbus_connection_release_dispatch<sp/>(connection);</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/>HAVE_LOCK_CHECK<sp/>(connection);</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;before<sp/>final<sp/>status<sp/>update\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>_dbus_connection_get_dispatch_status_unlocked<sp/>(connection);</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>unlocks<sp/>and<sp/>calls<sp/>user<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/>_dbus_connection_update_dispatch_status_and_unlock<sp/>(connection,<sp/>status);</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member" tooltip="Decrements the reference count of a DBusConnection, and finalizes it if the count reaches zero...">dbus_connection_unref</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="4758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"></highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="4822" refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member" tooltip="Sets the watch functions for the connection.">dbus_connection_set_watch_functions</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga9188ca3fd89c957dc269dbe8601b270e" kindref="member" tooltip="Called when libdbus needs a new watch to be monitored by the main loop.">DBusAddWatchFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_function,</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gaaab846a872d938b27503129551ea0c62" kindref="member" tooltip="Called when libdbus no longer needs a watch to be monitored by the main loop.">DBusRemoveWatchFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/>remove_function,</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gace13544ff3075b5fccbce896682ec6ff" kindref="member" tooltip="Called when dbus_watch_get_enabled() may return a different value than it did before.">DBusWatchToggledFunction</ref><sp/><sp/><sp/><sp/><sp/>toggled_function,</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function)</highlight></codeline>
<codeline lineno="4828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"></highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusWatchInternals_1gae9ab8cf14f4191191e94183be9a031d9" kindref="member" tooltip="Sets the watch functions.">_dbus_watch_list_set_functions</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" kindref="member" tooltip="Stores active watches.">watches</ref>,</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_function,<sp/>remove_function,</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toggled_function,</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data,<sp/>free_data_function);</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="4843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="4885" refid="group__DBusConnection_1gab3cbc68eec427e9ce1783b25d44fe93c" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gab3cbc68eec427e9ce1783b25d44fe93c" kindref="member" tooltip="Sets the timeout functions for the connection.">dbus_connection_set_timeout_functions</ref><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga01a45587090d82ee97b5042b49037a08" kindref="member" tooltip="Called when libdbus needs a new timeout to be monitored by the main loop.">DBusAddTimeoutFunction</ref><sp/><sp/><sp/><sp/><sp/>add_function,</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga13aae9d5981de45abca0db1717dc7daf" kindref="member" tooltip="Called when libdbus no longer needs a timeout to be monitored by the main loop.">DBusRemoveTimeoutFunction</ref><sp/><sp/>remove_function,</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga62eea9a2032ae15b6738534b93d18e86" kindref="member" tooltip="Called when dbus_timeout_get_enabled() may return a different value than it did before.">DBusTimeoutToggledFunction</ref><sp/>toggled_function,</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function)</highlight></codeline>
<codeline lineno="4891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"></highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusTimeoutInternals_1ga6760d1963b870b45f855501e38b49fd9" kindref="member" tooltip="Sets the timeout functions.">_dbus_timeout_list_set_functions</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" kindref="member" tooltip="Stores active timeouts.">timeouts</ref>,</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_function,<sp/>remove_function,</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toggled_function,</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data,<sp/>free_data_function);</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="4906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4923" refid="group__DBusConnection_1ga2b1df13251c7ec348bcba39c0924e881" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga2b1df13251c7ec348bcba39c0924e881" kindref="member" tooltip="Sets the mainloop wakeup function for the connection.">dbus_connection_set_wakeup_main_function</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga4bea703ee5b9f8dfe79c4082c347d43d" kindref="member" tooltip="Called when the main loop&amp;#39;s thread should be notified that there&amp;#39;s now work to do.">DBusWakeupMainFunction</ref><sp/><sp/><sp/><sp/><sp/>wakeup_main_function,</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function)</highlight></codeline>
<codeline lineno="4927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_data;</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/>old_free_data;</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/>old_data<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1ac8aff7bafd9ed046d835c5ed80bc218c" kindref="member" tooltip="Application data for wakeup_main_function.">wakeup_main_data</ref>;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/>old_free_data<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a8da896126df262503431acd73638c917" kindref="member" tooltip="free wakeup_main_data">free_wakeup_main_data</ref>;</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"></highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a211104e37f65d45ab8fcb149e4bcc84e" kindref="member" tooltip="Function to wake up the mainloop.">wakeup_main_function</ref><sp/>=<sp/>wakeup_main_function;</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ac8aff7bafd9ed046d835c5ed80bc218c" kindref="member" tooltip="Application data for wakeup_main_function.">wakeup_main_data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a8da896126df262503431acd73638c917" kindref="member" tooltip="free wakeup_main_data">free_wakeup_main_data</ref><sp/>=<sp/>free_data_function;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Callback<sp/>outside<sp/>the<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_free_data)</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/>(*old_free_data)<sp/>(old_data);</highlight></codeline>
<codeline lineno="4946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4969" refid="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" kindref="member" tooltip="Set a function to be invoked when the dispatch status changes.">dbus_connection_set_dispatch_status_function</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gaad6e12a5d298ef30a99d8c667abad58a" kindref="member" tooltip="Called when the return value of dbus_connection_get_dispatch_status() may have changed.">DBusDispatchStatusFunction</ref><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function)</highlight></codeline>
<codeline lineno="4973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_data;</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/>old_free_data;</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/>old_data<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a0225f7934d1bd118ae2eeacf8a1c6f19" kindref="member" tooltip="Application data for dispatch_status_function.">dispatch_status_data</ref>;</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/>old_free_data<sp/>=<sp/>connection-&gt;<ref refid="structDBusConnection_1a71f8b1e2078c4edb98c62de1886dfb2a" kindref="member" tooltip="free dispatch_status_data">free_dispatch_status_data</ref>;</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1af6cbafdf80cd474c654fc226581900a2" kindref="member" tooltip="Function on dispatch status changes.">dispatch_status_function</ref><sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a0225f7934d1bd118ae2eeacf8a1c6f19" kindref="member" tooltip="Application data for dispatch_status_function.">dispatch_status_data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1a71f8b1e2078c4edb98c62de1886dfb2a" kindref="member" tooltip="free dispatch_status_data">free_dispatch_status_data</ref><sp/>=<sp/>free_data_function;</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Callback<sp/>outside<sp/>the<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_free_data)</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/>(*old_free_data)<sp/>(old_data);</highlight></codeline>
<codeline lineno="4992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5014" refid="group__DBusConnection_1ga38297f511f4124accdfa68c321e081cc" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga38297f511f4124accdfa68c321e081cc" kindref="member" tooltip="Get the UNIX file descriptor of the connection, if any.">dbus_connection_get_unix_fd</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fd)</highlight></codeline>
<codeline lineno="5016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"></highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_WIN</highlight></codeline>
<codeline lineno="5021"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME<sp/>do<sp/>this<sp/>on<sp/>a<sp/>lower<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5024"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" kindref="member" tooltip="Gets the underlying Windows or UNIX socket file descriptor of the connection, if any.">dbus_connection_get_socket</ref>(connection,<sp/>fd);</highlight></codeline>
<codeline lineno="5026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"></highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5044" refid="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" kindref="member" tooltip="Gets the underlying Windows or UNIX socket file descriptor of the connection, if any.">dbus_connection_get_socket</ref>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fd)</highlight></codeline>
<codeline lineno="5046"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusTransport_1gac58d38eb19b39774f89271fc6472e087" kindref="member" tooltip="Get the socket file descriptor, if any.">_dbus_transport_get_socket_fd</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd);</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"></highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5086" refid="group__DBusConnection_1gaef670c3a8170ab9c719ec955252459d0" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gaef670c3a8170ab9c719ec955252459d0" kindref="member" tooltip="Gets the UNIX user ID of the connection if known.">dbus_connection_get_unix_user</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>*uid)</highlight></codeline>
<codeline lineno="5088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"></highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(uid<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"></highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" kindref="member" tooltip="Returns TRUE if we have been authenticated.">_dbus_transport_get_is_authenticated</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>))</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusTransport_1gaf3c4a47f73bd584a9fda1e5e7a825da9" kindref="member" tooltip="See dbus_connection_get_unix_user().">_dbus_transport_get_unix_user</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uid);</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_WIN</highlight></codeline>
<codeline lineno="5103"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(!result);</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5105"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"></highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5122" refid="group__DBusConnection_1gaeebeadcafa87e2d30eed4296f26fb73c" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gaeebeadcafa87e2d30eed4296f26fb73c" kindref="member" tooltip="Gets the process ID of the connection if any.">dbus_connection_get_unix_process_id</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>*pid)</highlight></codeline>
<codeline lineno="5124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"></highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(pid<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" kindref="member" tooltip="Returns TRUE if we have been authenticated.">_dbus_transport_get_is_authenticated</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>))</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusTransport_1gae66bc81abe904a4b3ab32d8920c8fe1e" kindref="member" tooltip="See dbus_connection_get_unix_process_id().">_dbus_transport_get_unix_process_id</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid);</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"></highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5154" refid="group__DBusConnection_1ga969b9dafe806c9fe0a54c9d8a565c2e1" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga969b9dafe806c9fe0a54c9d8a565c2e1" kindref="member" tooltip="Gets the ADT audit data of the connection if any.">dbus_connection_get_adt_audit_session_data</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**data,</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_int32_t<sp/><sp/><sp/>*data_size)</highlight></codeline>
<codeline lineno="5157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"></highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(data<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(data_size<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" kindref="member" tooltip="Returns TRUE if we have been authenticated.">_dbus_transport_get_is_authenticated</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>))</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusTransport_1ga36ccd8321491895ca632e744028eea42" kindref="member" tooltip="See dbus_connection_get_adt_audit_session_data().">_dbus_transport_get_adt_audit_session_data</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data,</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_size);</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"></highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5200" refid="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" kindref="member" tooltip="Sets a predicate function used to determine whether a given user ID is allowed to connect...">dbus_connection_set_unix_user_function</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga36419a145848f3b234b3ba5640b0a3d0" kindref="member" tooltip="Called during authentication to check whether the given UNIX user ID is allowed to connect...">DBusAllowUnixUserFunction</ref><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function)</highlight></codeline>
<codeline lineno="5204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_data<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/>old_free_function<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"></highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1ga9f0ab472678a107c2ebe7f1da0754c44" kindref="member" tooltip="See dbus_connection_set_unix_user_function().">_dbus_transport_set_unix_user_function</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>data,<sp/>free_data_function,</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;old_data,<sp/>&amp;old_free_function);</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_free_function<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<sp/>old_free_function)<sp/>(old_data);</highlight></codeline>
<codeline lineno="5218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5252" refid="group__DBusConnection_1ga2b3cb488f1922aeecdeafdcb110e91a8" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga2b3cb488f1922aeecdeafdcb110e91a8" kindref="member" tooltip="Gets the Windows user SID of the connection if known.">dbus_connection_get_windows_user</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**windows_sid_p)</highlight></codeline>
<codeline lineno="5254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(windows_sid_p<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusTransport_1ga251ff6d644e1dc6d46c58705e6dcc787" kindref="member" tooltip="Returns TRUE if we have been authenticated.">_dbus_transport_get_is_authenticated</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>))</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__DBusTransport_1ga3f4f4ce9eaef18567fd21f5c6a1fde99" kindref="member" tooltip="See dbus_connection_get_windows_user().">_dbus_transport_get_windows_user</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windows_sid_p);</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"></highlight></codeline>
<codeline lineno="5268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_UNIX</highlight></codeline>
<codeline lineno="5269"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(!result);</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5271"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"></highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight></codeline>
<codeline lineno="5298"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5299" refid="group__DBusConnection_1gaa35ced9ccd29d3366749ae383b120f9c" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gaa35ced9ccd29d3366749ae383b120f9c" kindref="member" tooltip="Sets a predicate function used to determine whether a given user ID is allowed to connect...">dbus_connection_set_windows_user_function</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga47436366726762688036c600d651bab6" kindref="member" tooltip="Called during authentication to check whether the given Windows user ID is allowed to connect...">DBusAllowWindowsUserFunction</ref><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function)</highlight></codeline>
<codeline lineno="5303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_data<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/>old_free_function<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1gadbf528ef41efde73d0bc386d10b7f5b1" kindref="member" tooltip="See dbus_connection_set_windows_user_function().">_dbus_transport_set_windows_user_function</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>data,<sp/>free_data_function,</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;old_data,<sp/>&amp;old_free_function);</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"></highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_free_function<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<sp/>old_free_function)<sp/>(old_data);</highlight></codeline>
<codeline lineno="5317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5345"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5346" refid="group__DBusConnection_1gade349ff04ed548993a8054250e317c12" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gade349ff04ed548993a8054250e317c12" kindref="member" tooltip="This function must be called on the server side of a connection when the connection is first seen in ...">dbus_connection_set_allow_anonymous</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="5348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1ga5f4bd7eb5621003595b75cb8033463cd" kindref="member" tooltip="See dbus_connection_set_allow_anonymous()">_dbus_transport_set_allow_anonymous</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,<sp/>value);</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5374" refid="group__DBusConnection_1gaf58e8cc7b8717db1581459c0c3d34b08" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gaf58e8cc7b8717db1581459c0c3d34b08" kindref="member" tooltip="Normally DBusConnection automatically handles all messages to the org.freedesktop.DBus.Peer interface.">dbus_connection_set_route_peer_messages</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="5376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/>connection-&gt;<ref refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" kindref="member" tooltip="If TRUE, if org.freedesktop.DBus.Peer messages have a bus name, don&amp;#39;t handle them automatically...">route_peer_messages</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5406" refid="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" kindref="member" tooltip="Adds a message filter.">dbus_connection_add_filter</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga13febac22a058c4fc98a90ce7da69489" kindref="member" tooltip="Called when a message needs to be handled.">DBusHandleMessageFunction</ref><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data,</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function)</highlight></codeline>
<codeline lineno="5410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref><sp/>*filter;</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"></highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/>filter<sp/>=<sp/><ref refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" kindref="member" tooltip="Safe macro for using dbus_malloc0().">dbus_new0</ref><sp/>(<ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><ref refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" kindref="member" tooltip="Atomically increments an integer.">_dbus_atomic_inc</ref><sp/>(&amp;filter-&gt;<ref refid="structDBusMessageFilter_1a2d2debd9a708cb7d4f8447c18f7458b9" kindref="member" tooltip="Reference count.">refcount</ref>);</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"></highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"></highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusList_1gad99045e79db46159babe69718f343053" kindref="member" tooltip="Appends a value to the list.">_dbus_list_append</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>,</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter))</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_message_filter_unref<sp/>(filter);</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>in<sp/>filter<sp/>after<sp/>all<sp/>memory<sp/>allocated,</highlight></codeline>
<codeline lineno="5433"><highlight class="comment"><sp/><sp/><sp/>*<sp/>so<sp/>we<sp/>don&apos;t<sp/>run<sp/>the<sp/>free_user_data_function</highlight></codeline>
<codeline lineno="5434"><highlight class="comment"><sp/><sp/><sp/>*<sp/>if<sp/>the<sp/>add_filter()<sp/>fails</highlight></codeline>
<codeline lineno="5435"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" kindref="member" tooltip="Function to call to filter.">function</ref><sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" kindref="member" tooltip="User data for the function.">user_data</ref><sp/>=<sp/>user_data;</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" kindref="member" tooltip="Function to free the user data.">free_user_data_function</ref><sp/>=<sp/>free_data_function;</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="5443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5458" refid="group__DBusConnection_1ga5e7f1dad410506a8a6f5182c55e7c4fe" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga5e7f1dad410506a8a6f5182c55e7c4fe" kindref="member" tooltip="Removes a previously-added message filter.">dbus_connection_remove_filter</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga13febac22a058c4fc98a90ce7da69489" kindref="member" tooltip="Called when a message needs to be handled.">DBusHandleMessageFunction</ref><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data)</highlight></codeline>
<codeline lineno="5461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><ref refid="structDBusList" kindref="compound" tooltip="A node in a linked list.">DBusList</ref><sp/>*link;</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><ref refid="structDBusMessageFilter" kindref="compound" tooltip="Internal struct representing a message filter function.">DBusMessageFilter</ref><sp/>*filter;</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"></highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/>filter<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" kindref="member" tooltip="Gets the last link in the list.">_dbus_list_get_last_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>);</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(link<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filter<sp/>=<sp/>link-&gt;<ref refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" kindref="member" tooltip="Data stored at this element.">data</ref>;</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"></highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter-&gt;<ref refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" kindref="member" tooltip="Function to call to filter.">function</ref><sp/>==<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" kindref="member" tooltip="User data for the function.">user_data</ref><sp/>==<sp/>user_data)</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" kindref="member" tooltip="Removes a link from the list.">_dbus_list_remove_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" kindref="member" tooltip="Function to call to filter.">function</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/><ref refid="group__DBusList_1ga6637493bf5fc09bddb44ac295c475cae" kindref="member" tooltip="Gets the previous link in the list, or NULL if there are no more links.">_dbus_list_get_prev_link</ref><sp/>(&amp;connection-&gt;<ref refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" kindref="member" tooltip="List of filters.">filter_list</ref>,<sp/>link);</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filter<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight></codeline>
<codeline lineno="5492"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DBUS_DISABLE_CHECKS</highlight></codeline>
<codeline lineno="5493"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" kindref="member" tooltip="Prints a &amp;quot;critical&amp;quot; warning to stderr when an assertion fails; differs from _dbus_warn primarily in t...">_dbus_warn_check_failed</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>remove<sp/>filter<sp/>function<sp/>%p<sp/>user<sp/>data<sp/>%p,<sp/>but<sp/>no<sp/>such<sp/>filter<sp/>has<sp/>been<sp/>added\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>user_data);</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5500"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>application<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter-&gt;<ref refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" kindref="member" tooltip="Function to free the user data.">free_user_data_function</ref>)</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/>(*<sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" kindref="member" tooltip="Function to free the user data.">free_user_data_function</ref>)<sp/>(filter-&gt;<ref refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" kindref="member" tooltip="User data for the function.">user_data</ref>);</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"></highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" kindref="member" tooltip="Function to free the user data.">free_user_data_function</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/>filter-&gt;<ref refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" kindref="member" tooltip="User data for the function.">user_data</ref><sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/>_dbus_message_filter_unref<sp/>(filter);</highlight></codeline>
<codeline lineno="5509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"></highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5524" refid="group__DBusConnection_1ga708b1e108feed18f5775ff404c9dda4b" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga708b1e108feed18f5775ff404c9dda4b" kindref="member" tooltip="Registers a handler for a given path in the object hierarchy.">dbus_connection_try_register_object_path</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusObjectPathVTable" kindref="compound" tooltip="Virtual table that must be implemented to handle a portion of the object path hierarchy.">DBusObjectPathVTable</ref><sp/><sp/>*vtable,</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data,</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error)</highlight></codeline>
<codeline lineno="5529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**decomposed_path;</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(vtable<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"></highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" kindref="member" tooltip="Decompose an object path.">_dbus_decompose_path</ref><sp/>(path,<sp/>strlen<sp/>(path),<sp/>&amp;decomposed_path,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"></highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"></highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" kindref="member" tooltip="Registers a new subtree in the global object tree.">_dbus_object_tree_register</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>,</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>,</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>decomposed_path,<sp/>vtable,</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_data,<sp/>error);</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"></highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"></highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member" tooltip="Frees a NULL-terminated array of strings.">dbus_free_string_array</ref><sp/>(decomposed_path);</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"></highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="5553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"></highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5571" refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" kindref="member" tooltip="Registers a handler for a given path in the object hierarchy.">dbus_connection_register_object_path</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusObjectPathVTable" kindref="compound" tooltip="Virtual table that must be implemented to handle a portion of the object path hierarchy.">DBusObjectPathVTable</ref><sp/><sp/>*vtable,</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data)</highlight></codeline>
<codeline lineno="5575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**decomposed_path;</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/>error<sp/>=<sp/><ref refid="group__DBusErrorInternals_1ga961cc70e3891282a65205c4c8418d88e" kindref="member" tooltip="Expands to a suitable initializer for a DBusError on the stack.">DBUS_ERROR_INIT</ref>;</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"></highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(vtable<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" kindref="member" tooltip="Decompose an object path.">_dbus_decompose_path</ref><sp/>(path,<sp/>strlen<sp/>(path),<sp/>&amp;decomposed_path,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"></highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"></highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" kindref="member" tooltip="Registers a new subtree in the global object tree.">_dbus_object_tree_register</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>,</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>,</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>decomposed_path,<sp/>vtable,</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_data,<sp/>&amp;error);</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member" tooltip="Frees a NULL-terminated array of strings.">dbus_free_string_array</ref><sp/>(decomposed_path);</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"></highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusErrors_1ga48515c580199514026542fe053ef1887" kindref="member" tooltip="Checks whether the error is set and has the given name.">dbus_error_has_name</ref><sp/>(&amp;error,<sp/><ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member" tooltip="There&amp;#39;s already an object with the requested object path.">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>))</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" kindref="member" tooltip="Prints a warning message to stderr.">_dbus_warn</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>error.<ref refid="structDBusError_1afb559175326de5b6b340e26204e92d72" kindref="member" tooltip="public error message field">message</ref>);</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" kindref="member" tooltip="Frees an error that&amp;#39;s been set (or just initialized), then reinitializes the error as in dbus_error_i...">dbus_error_free</ref><sp/>(&amp;error);</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"></highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="5607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"></highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5624" refid="group__DBusConnection_1ga8e9d2d4ff17c3071124e4993d1536ed4" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga8e9d2d4ff17c3071124e4993d1536ed4" kindref="member" tooltip="Registers a fallback handler for a given subsection of the object hierarchy.">dbus_connection_try_register_fallback</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusObjectPathVTable" kindref="compound" tooltip="Virtual table that must be implemented to handle a portion of the object path hierarchy.">DBusObjectPathVTable</ref><sp/><sp/>*vtable,</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data,</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error)</highlight></codeline>
<codeline lineno="5629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**decomposed_path;</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"></highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(vtable<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"></highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" kindref="member" tooltip="Decompose an object path.">_dbus_decompose_path</ref><sp/>(path,<sp/>strlen<sp/>(path),<sp/>&amp;decomposed_path,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"></highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"></highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" kindref="member" tooltip="Registers a new subtree in the global object tree.">_dbus_object_tree_register</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>,</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>,</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>decomposed_path,<sp/>vtable,</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_data,<sp/>error);</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"></highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member" tooltip="Frees a NULL-terminated array of strings.">dbus_free_string_array</ref><sp/>(decomposed_path);</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"></highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="5653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"></highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5673" refid="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" kindref="member" tooltip="Registers a fallback handler for a given subsection of the object hierarchy.">dbus_connection_register_fallback</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusObjectPathVTable" kindref="compound" tooltip="Virtual table that must be implemented to handle a portion of the object path hierarchy.">DBusObjectPathVTable</ref><sp/><sp/>*vtable,</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data)</highlight></codeline>
<codeline lineno="5677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**decomposed_path;</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><ref refid="structDBusError" kindref="compound" tooltip="Object representing an exception.">DBusError</ref><sp/>error<sp/>=<sp/><ref refid="group__DBusErrorInternals_1ga961cc70e3891282a65205c4c8418d88e" kindref="member" tooltip="Expands to a suitable initializer for a DBusError on the stack.">DBUS_ERROR_INIT</ref>;</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"></highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(vtable<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"></highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" kindref="member" tooltip="Decompose an object path.">_dbus_decompose_path</ref><sp/>(path,<sp/>strlen<sp/>(path),<sp/>&amp;decomposed_path,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"></highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"></highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" kindref="member" tooltip="Registers a new subtree in the global object tree.">_dbus_object_tree_register</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>,</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>,</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>decomposed_path,<sp/>vtable,</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_data,<sp/>&amp;error);</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"></highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"></highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member" tooltip="Frees a NULL-terminated array of strings.">dbus_free_string_array</ref><sp/>(decomposed_path);</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"></highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusErrors_1ga48515c580199514026542fe053ef1887" kindref="member" tooltip="Checks whether the error is set and has the given name.">dbus_error_has_name</ref><sp/>(&amp;error,<sp/><ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member" tooltip="There&amp;#39;s already an object with the requested object path.">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>))</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" kindref="member" tooltip="Prints a warning message to stderr.">_dbus_warn</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>error.<ref refid="structDBusError_1afb559175326de5b6b340e26204e92d72" kindref="member" tooltip="public error message field">message</ref>);</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" kindref="member" tooltip="Frees an error that&amp;#39;s been set (or just initialized), then reinitializes the error as in dbus_error_i...">dbus_error_free</ref><sp/>(&amp;error);</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"></highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="5709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"></highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5721" refid="group__DBusConnection_1ga6ae8f005dedf24c5f2df1768795392fb" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga6ae8f005dedf24c5f2df1768795392fb" kindref="member" tooltip="Unregisters the handler registered with exactly the given path.">dbus_connection_unregister_object_path</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path)</highlight></codeline>
<codeline lineno="5723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**decomposed_path;</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"></highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"></highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" kindref="member" tooltip="Decompose an object path.">_dbus_decompose_path</ref><sp/>(path,<sp/>strlen<sp/>(path),<sp/>&amp;decomposed_path,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"></highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"></highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><ref refid="group__DBusObjectTree_1ga3babe73ed342b6963997ef2efd73ef75" kindref="member" tooltip="Unregisters an object subtree that was registered with the same path.">_dbus_object_tree_unregister_and_unlock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>decomposed_path);</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member" tooltip="Frees a NULL-terminated array of strings.">dbus_free_string_array</ref><sp/>(decomposed_path);</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"></highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="5740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"></highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5753" refid="group__DBusConnection_1ga08ee6e70b74c294fe24d0f391f16db24" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga08ee6e70b74c294fe24d0f391f16db24" kindref="member" tooltip="Gets the user data passed to dbus_connection_register_object_path() or dbus_connection_register_fallb...">dbus_connection_get_object_path_data</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**data_p)</highlight></codeline>
<codeline lineno="5756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**decomposed_path;</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"></highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(path<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(data_p<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"></highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/>*data_p<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" kindref="member" tooltip="Decompose an object path.">_dbus_decompose_path</ref><sp/>(path,<sp/>strlen<sp/>(path),<sp/>&amp;decomposed_path,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"></highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/>*data_p<sp/>=<sp/><ref refid="group__DBusObjectTree_1ga4cf5a5f35d2bd18b6fa8aa58ba6b5de4" kindref="member" tooltip="Looks up the data passed to _dbus_object_tree_register() for a handler at the given path...">_dbus_object_tree_get_user_data_unlocked</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>decomposed_path);</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"></highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"></highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member" tooltip="Frees a NULL-terminated array of strings.">dbus_free_string_array</ref><sp/>(decomposed_path);</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"></highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="5777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"></highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5790" refid="group__DBusConnection_1ga3e9de2067d0eed66ef73230fae8d8be2" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga3e9de2067d0eed66ef73230fae8d8be2" kindref="member" tooltip="Lists the registered fallback handlers and object path handlers at the given parent_path.">dbus_connection_list_registered</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*parent_path,</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***child_entries)</highlight></codeline>
<codeline lineno="5793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**decomposed_path;</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(parent_path<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(parent_path[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(child_entries<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"></highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" kindref="member" tooltip="Decompose an object path.">_dbus_decompose_path</ref><sp/>(parent_path,<sp/>strlen<sp/>(parent_path),<sp/>&amp;decomposed_path,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"></highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"></highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusObjectTree_1gaab7040bd1bf037d99e9bbb75d0869a2f" kindref="member" tooltip="Lists the registered fallback handlers and object path handlers at the given parent_path.">_dbus_object_tree_list_registered_and_unlock</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" kindref="member" tooltip="Object path handlers registered with this connection.">objects</ref>,</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>decomposed_path,</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child_entries);</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member" tooltip="Frees a NULL-terminated array of strings.">dbus_free_string_array</ref><sp/>(decomposed_path);</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"></highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="5812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"></highlight></codeline>
<codeline lineno="5814"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDBusDataSlotAllocator" kindref="compound" tooltip="An allocator that tracks a set of slot IDs.">DBusDataSlotAllocator</ref><sp/>slot_allocator;</highlight></codeline>
<codeline lineno="5815"><highlight class="normal">_DBUS_DEFINE_GLOBAL_LOCK<sp/>(connection_slots);</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5832" refid="group__DBusConnection_1ga728b15c71a492ad244e5a480f1156088" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga728b15c71a492ad244e5a480f1156088" kindref="member" tooltip="Allocates an integer ID to be used for storing application-specific data on any DBusConnection.">dbus_connection_allocate_data_slot</ref><sp/>(dbus_int32_t<sp/>*slot_p)</highlight></codeline>
<codeline lineno="5833"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusDataSlot_1ga941a12182e69c185bd27f6efbfbd0f86" kindref="member" tooltip="Allocates an integer ID to be used for storing data in a DBusDataSlotList.">_dbus_data_slot_allocator_alloc</ref><sp/>(&amp;slot_allocator,</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_DBUS_LOCK_NAME<sp/>(connection_slots),</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slot_p);</highlight></codeline>
<codeline lineno="5837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"></highlight></codeline>
<codeline lineno="5850"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5851" refid="group__DBusConnection_1ga7dc8c73d8c3e733f5410d52be84239a0" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga7dc8c73d8c3e733f5410d52be84239a0" kindref="member" tooltip="Deallocates a global ID for connection data slots.">dbus_connection_free_data_slot</ref><sp/>(dbus_int32_t<sp/>*slot_p)</highlight></codeline>
<codeline lineno="5852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(*slot_p<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><ref refid="group__DBusDataSlot_1ga059c50a24cd9fc984e918e6159841633" kindref="member" tooltip="Deallocates an ID previously allocated with _dbus_data_slot_allocator_alloc().">_dbus_data_slot_allocator_free</ref><sp/>(&amp;slot_allocator,<sp/>slot_p);</highlight></codeline>
<codeline lineno="5856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"></highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="5881" refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member" tooltip="Stores a pointer on a DBusConnection, along with an optional function to be used for freeing the data...">dbus_connection_set_data</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_int32_t<sp/><sp/><sp/><sp/><sp/><sp/>slot,</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/><sp/>free_data_func)</highlight></codeline>
<codeline lineno="5885"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member" tooltip="The type of a function which frees a block of memory.">DBusFreeFunction</ref><sp/>old_free_func;</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_data;</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"></highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(slot<sp/>&gt;=<sp/>0,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>);</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/>SLOTS_LOCK<sp/>(connection);</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"></highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusDataSlot_1gad2952f9f686d96e7114fc49ab7452e1a" kindref="member" tooltip="Stores a pointer in the data slot list, along with an optional function to be used for freeing the da...">_dbus_data_slot_list_set</ref><sp/>(&amp;slot_allocator,</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;connection-&gt;<ref refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" kindref="member" tooltip="Data stored by allocated integer ID.">slot_list</ref>,</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slot,<sp/>data,<sp/>free_data_func,</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;old_free_func,<sp/>&amp;old_data);</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/>SLOTS_UNLOCK<sp/>(connection);</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"></highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval)</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>the<sp/>actual<sp/>free<sp/>outside<sp/>the<sp/>connection<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_free_func)</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/>old_free_func)<sp/>(old_data);</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"></highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="5910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"></highlight></codeline>
<codeline lineno="5929"><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="5930" refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member" tooltip="Retrieves data previously set with dbus_connection_set_data().">dbus_connection_get_data</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_int32_t<sp/><sp/><sp/><sp/><sp/><sp/>slot)</highlight></codeline>
<codeline lineno="5932"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*res;</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"></highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/>SLOTS_LOCK<sp/>(connection);</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"></highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/><ref refid="group__DBusDataSlot_1ga43f741229f0c38788442601e2750ec66" kindref="member" tooltip="Retrieves data previously set with _dbus_data_slot_list_set_data().">_dbus_data_slot_list_get</ref><sp/>(&amp;slot_allocator,</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;connection-&gt;<ref refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" kindref="member" tooltip="Data stored by allocated integer ID.">slot_list</ref>,</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slot);</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/>SLOTS_UNLOCK<sp/>(connection);</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"></highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="5946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"></highlight></codeline>
<codeline lineno="5954"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5955" refid="group__DBusConnection_1ga794d0b572e30448fb262618222f76124" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga794d0b572e30448fb262618222f76124" kindref="member" tooltip="This function sets a global flag for whether dbus_connection_new() will set SIGPIPE behavior to SIG_I...">dbus_connection_set_change_sigpipe</ref><sp/>(<ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>will_modify_sigpipe)</highlight></codeline>
<codeline lineno="5956"><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/>_dbus_modify_sigpipe<sp/>=<sp/>will_modify_sigpipe<sp/>!=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="5958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"></highlight></codeline>
<codeline lineno="5968"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5969" refid="group__DBusConnection_1ga0d783462274a6c71d3767f5821c29ce9" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga0d783462274a6c71d3767f5821c29ce9" kindref="member" tooltip="Specifies the maximum size message this connection is allowed to receive.">dbus_connection_set_max_message_size</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size)</highlight></codeline>
<codeline lineno="5971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1ga03ea875260e71f59af708146cabf95ab" kindref="member" tooltip="See dbus_connection_set_max_message_size().">_dbus_transport_set_max_message_size</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"></highlight></codeline>
<codeline lineno="5986"><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5987" refid="group__DBusConnection_1ga7a459e64d7dca7b592136cec0a73422c" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga7a459e64d7dca7b592136cec0a73422c" kindref="member" tooltip="Gets the value set by dbus_connection_set_max_message_size().">dbus_connection_get_max_message_size</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="5988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"></highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/><ref refid="group__DBusTransport_1gae36d2a90bad6ef13c0379fa9864ff68e" kindref="member" tooltip="See dbus_connection_get_max_message_size().">_dbus_transport_get_max_message_size</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="5997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"></highlight></codeline>
<codeline lineno="6007"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6008" refid="group__DBusConnection_1ga2aadce7d15c0e11983363912292b3fcd" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga2aadce7d15c0e11983363912292b3fcd" kindref="member" tooltip="Specifies the maximum number of unix fds a message on this connection is allowed to receive...">dbus_connection_set_max_message_unix_fds</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n)</highlight></codeline>
<codeline lineno="6010"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"></highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1gad005fffd646202e74a789765ae82a40f" kindref="member" tooltip="See dbus_connection_set_max_message_unix_fds().">_dbus_transport_set_max_message_unix_fds</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n);</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"></highlight></codeline>
<codeline lineno="6025"><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6026" refid="group__DBusConnection_1ga18abaca9a512dbb7b6f921c3df6875d9" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga18abaca9a512dbb7b6f921c3df6875d9" kindref="member" tooltip="Gets the value set by dbus_connection_set_max_message_unix_fds().">dbus_connection_get_max_message_unix_fds</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="6027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"></highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"></highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/><ref refid="group__DBusTransport_1gaa28e8edd4d849108b158d95eb7da812d" kindref="member" tooltip="See dbus_connection_get_max_message_unix_fds().">_dbus_transport_get_max_message_unix_fds</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"></highlight></codeline>
<codeline lineno="6063"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6064" refid="group__DBusConnection_1ga6565d75f16e6e803372b2ae3d94d991b" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga6565d75f16e6e803372b2ae3d94d991b" kindref="member" tooltip="Sets the maximum total number of bytes that can be used for all messages received on this connection...">dbus_connection_set_max_received_size</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size)</highlight></codeline>
<codeline lineno="6066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1ga08e0368732df5f4e58a2c838fe4484f6" kindref="member" tooltip="See dbus_connection_set_max_received_size().">_dbus_transport_set_max_received_size</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"></highlight></codeline>
<codeline lineno="6081"><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6082" refid="group__DBusConnection_1ga376529acf41d1d34b4f46c0d9d515c85" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga376529acf41d1d34b4f46c0d9d515c85" kindref="member" tooltip="Gets the value set by dbus_connection_set_max_received_size().">dbus_connection_get_max_received_size</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="6083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"></highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/><ref refid="group__DBusTransport_1ga8992b33d9060a103bd38705462a0ea96" kindref="member" tooltip="See dbus_connection_get_max_received_size().">_dbus_transport_get_max_received_size</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6106" refid="group__DBusConnection_1ga81e63dc6d9298e8a7f92c0d93d0e80b3" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga81e63dc6d9298e8a7f92c0d93d0e80b3" kindref="member" tooltip="Sets the maximum total number of unix fds that can be used for all messages received on this connecti...">dbus_connection_set_max_received_unix_fds</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="6107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n)</highlight></codeline>
<codeline lineno="6108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/>_dbus_return_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTransport_1gaae297c86eb0b79b6cef4a1f7e4b50356" kindref="member" tooltip="See dbus_connection_set_max_received_unix_fds().">_dbus_transport_set_max_received_unix_fds</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>,</highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n);</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"></highlight></codeline>
<codeline lineno="6123"><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6124" refid="group__DBusConnection_1ga219f31132338616f82dc975c070ff418" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga219f31132338616f82dc975c070ff418" kindref="member" tooltip="Gets the value set by dbus_connection_set_max_received_unix_fds().">dbus_connection_get_max_received_unix_fds</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="6125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"></highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"></highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/><ref refid="group__DBusTransport_1gacd0b2e68c65dc3b0c1cfdf3fb8358a44" kindref="member" tooltip="See dbus_connection_set_max_received_unix_fds().">_dbus_transport_get_max_received_unix_fds</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" kindref="member" tooltip="Object that sends/receives messages over network.">transport</ref>);</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"></highlight></codeline>
<codeline lineno="6146"><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6147" refid="group__DBusConnection_1ga47aff801f586e7116f9c54532bb1baf9" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1ga47aff801f586e7116f9c54532bb1baf9" kindref="member" tooltip="Gets the approximate size in bytes of all messages in the outgoing message queue.">dbus_connection_get_outgoing_size</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="6148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"></highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"></highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/><ref refid="group__DBusResources_1ga49de078fb626aff30f273933ad5c8b2a" kindref="member" tooltip="Gets the current value of the size counter.">_dbus_counter_get_size_value</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" kindref="member" tooltip="Counts size of outgoing messages.">outgoing_counter</ref>);</highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"></highlight></codeline>
<codeline lineno="6166"><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6167" refid="group__DBusConnection_1gad218838fdaa8d36c606723c63e96f453" refkind="member"><highlight class="normal"><ref refid="group__DBusConnection_1gad218838fdaa8d36c606723c63e96f453" kindref="member" tooltip="Gets the approximate number of uni fds of all messages in the outgoing message queue.">dbus_connection_get_outgoing_unix_fds</ref><sp/>(<ref refid="structDBusConnection" kindref="compound" tooltip="Implementation details of DBusConnection.">DBusConnection</ref><sp/>*connection)</highlight></codeline>
<codeline lineno="6168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"></highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/>_dbus_return_val_if_fail<sp/>(connection<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"></highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" kindref="member" tooltip="Internals of DBusPendingCall.">CONNECTION_LOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/>res<sp/>=<sp/><ref refid="group__DBusResources_1ga25b2d12b9dc4d3525df2b8401f4ce56d" kindref="member" tooltip="Gets the current value of the unix fd counter.">_dbus_counter_get_unix_fd_value</ref><sp/>(connection-&gt;<ref refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" kindref="member" tooltip="Counts size of outgoing messages.">outgoing_counter</ref>);</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><ref refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" kindref="member" tooltip="shorter and more visible way to write _dbus_connection_unlock()">CONNECTION_UNLOCK</ref><sp/>(connection);</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-connection.c"/>
  </compounddef>
</doxygen>
