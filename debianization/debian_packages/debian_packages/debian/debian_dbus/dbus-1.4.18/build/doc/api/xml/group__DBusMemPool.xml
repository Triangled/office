<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__DBusMemPool" kind="group">
    <compoundname>DBusMemPool</compoundname>
    <title>memory pools</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusMemPool_1gaf1bae02bc5fcb879f77ff2c13ca03ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> *</type>
        <definition>DBusMemPool* _dbus_mem_pool_new</definition>
        <argsstring>(int element_size, dbus_bool_t zero_elements)</argsstring>
        <name>_dbus_mem_pool_new</name>
        <param>
          <type>int</type>
          <declname>element_size</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>zero_elements</declname>
        </param>
        <briefdescription>
<para>Creates a new memory pool, or returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para>        </briefdescription>
        <detaileddescription>
<para>Objects in the pool must be at least sizeof(void*) bytes each, due to the way memory pools work. To avoid creating 64 bit problems, this means at least 8 bytes on all platforms, unless you are 4 bytes on 32-bit and 8 bytes on 64-bit.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of an element allocated from the pool. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_elements</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to zero-initialize elements </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new pool or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.c" line="139" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.c" bodystart="137" bodyend="176"/>
        <references refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" compoundref="dbus-mempool_8c" startline="105">allocated_elements</references>
        <references refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" compoundref="dbus-mempool_8c" startline="100">block_size</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" compoundref="dbus-mempool_8c" startline="99">element_size</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusMemPool_1a2ebffd5d3e0eb209b1d0fa5779609818" compoundref="dbus-mempool_8c" startline="101">zero_elements</references>
        <referencedby refid="group__DBusHashTable_1gac8e434348a354b9606d4c50c127a5eb4" compoundref="dbus-hash_8c" startline="295" endline="353">_dbus_hash_table_new</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_mem_pool_free</definition>
        <argsstring>(DBusMemPool *pool)</argsstring>
        <name>_dbus_mem_pool_free</name>
        <param>
          <type><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Frees a memory pool (and all elements allocated from it). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory pool. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.c" line="185" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.c" bodystart="184" bodyend="199"/>
        <references refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" compoundref="dbus-mempool_8c" startline="104">blocks</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="629" endline="668">dbus_free</references>
        <references refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" compoundref="dbus-mempool_8c" startline="83">DBusMemBlock::next</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" compoundref="dbus-hash_8c" startline="377" endline="426">_dbus_hash_table_unref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _dbus_mem_pool_alloc</definition>
        <argsstring>(DBusMemPool *pool)</argsstring>
        <name>_dbus_mem_pool_alloc</name>
        <param>
          <type><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Allocates an object from the memory pool. </para>        </briefdescription>
        <detaileddescription>
<para>The object must be freed with <ref refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" kindref="member">_dbus_mem_pool_dealloc()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory pool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the allocated object or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if no memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.c" line="210" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.c" bodystart="209" bodyend="326"/>
        <references refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" compoundref="dbus-mempool_8c" startline="105">allocated_elements</references>
        <references refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" compoundref="dbus-mempool_8c" startline="100">block_size</references>
        <references refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" compoundref="dbus-mempool_8c" startline="104">blocks</references>
        <references refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="452" endline="490">dbus_malloc</references>
        <references refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" compoundref="dbus-memory_8c" startline="505" endline="543">dbus_malloc0</references>
        <references refid="group__DBusMemPoolInternals_1ga412163ea9cb4effae42afc1147d8b9b8" compoundref="dbus-mempool_8c" startline="69">ELEMENT_PADDING</references>
        <references refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" compoundref="dbus-mempool_8c" startline="99">element_size</references>
        <references refid="structDBusMemBlock_1af685833ddb17150a20cbe538f23f3113" compoundref="dbus-mempool_8c" startline="91">DBusMemBlock::elements</references>
        <references refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" compoundref="dbus-mempool_8c" startline="103">free_elements</references>
        <references refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" compoundref="dbus-mempool_8c" startline="62">DBusFreedElement::next</references>
        <references refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" compoundref="dbus-mempool_8c" startline="83">DBusMemBlock::next</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" compoundref="dbus-mempool_8c" startline="89">DBusMemBlock::used_so_far</references>
        <references refid="structDBusMemPool_1a2ebffd5d3e0eb209b1d0fa5779609818" compoundref="dbus-mempool_8c" startline="101">zero_elements</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_mem_pool_dealloc</definition>
        <argsstring>(DBusMemPool *pool, void *element)</argsstring>
        <name>_dbus_mem_pool_dealloc</name>
        <param>
          <type><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Deallocates an object previously created with <ref refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" kindref="member">_dbus_mem_pool_alloc()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The previous object must have come from this same pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory pool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>the element earlier allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if there are no remaining allocated elements </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.c" line="339" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.c" bodystart="337" bodyend="391"/>
        <references refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" compoundref="dbus-mempool_8c" startline="105">allocated_elements</references>
        <references refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" compoundref="dbus-mempool_8c" startline="104">blocks</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="629" endline="668">dbus_free</references>
        <references refid="structDBusMemBlock_1af685833ddb17150a20cbe538f23f3113" compoundref="dbus-mempool_8c" startline="91">DBusMemBlock::elements</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" compoundref="dbus-mempool_8c" startline="103">free_elements</references>
        <references refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" compoundref="dbus-mempool_8c" startline="62">DBusFreedElement::next</references>
        <references refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" compoundref="dbus-mempool_8c" startline="83">DBusMemBlock::next</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusHashTable_1ga159dfec03d53e6e2ff485fc83aed2552" compoundref="dbus-hash_8c" startline="1646" endline="1657">_dbus_hash_table_free_preallocated_entry</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusMemPool_1gaadb50c95482bc5d2808e190c5618065c" prot="public" static="no">
        <type>struct <ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref></type>
        <definition>DBusMemPool</definition>
        <argsstring></argsstring>
        <name>DBusMemPool</name>
        <briefdescription>
<para>Opaque object representing a memory pool. </para>        </briefdescription>
        <detaileddescription>
<para>Memory pools allow avoiding per-malloc-block memory overhead when allocating a lot of small objects that are all the same size. They are slightly faster than calling malloc() also. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.h" line="33" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-mempool.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> object. </para>    </briefdescription>
    <detaileddescription>
<para>Types and functions related to <ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref>. A memory pool is used to decrease memory fragmentation/overhead and increase speed for blocks of small uniformly-sized objects. The main point is to avoid the overhead of a malloc block for each small object, speed is secondary. </para>    </detaileddescription>
  </compounddef>
</doxygen>
