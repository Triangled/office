<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="dbus-string_8c" kind="file">
    <compoundname>dbus-string.c</compoundname>
    <includes local="no">config.h</includes>
    <includes refid="dbus-internals_8h" local="yes">dbus-internals.h</includes>
    <includes refid="dbus-string_8h" local="yes">dbus-string.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="dbus-string-private_8h" local="yes">dbus-string-private.h</includes>
    <includes refid="dbus-marshal-basic_8h" local="yes">dbus-marshal-basic.h</includes>
    <includes refid="dbus-sysdeps_8h" local="yes">dbus-sysdeps.h</includes>
    <incdepgraph>
      <node id="2983">
        <label>stdarg.h</label>
      </node>
      <node id="2985">
        <label>dbus/dbus-threads-internal.h</label>
        <link refid="dbus-threads-internal_8h_source"/>
        <childnode refid="2974" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
        <childnode refid="2986" relation="include">
        </childnode>
      </node>
      <node id="2988">
        <label>dbus-string-private.h</label>
        <link refid="dbus-string-private_8h_source"/>
        <childnode refid="2972" relation="include">
        </childnode>
        <childnode refid="2973" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
      </node>
      <node id="2986">
        <label>dbus/dbus-threads.h</label>
        <link refid="dbus-threads_8h_source"/>
        <childnode refid="2974" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
      </node>
      <node id="2978">
        <label>dbus/dbus-errors.h</label>
        <link refid="dbus-errors_8h_source"/>
        <childnode refid="2974" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
        <childnode refid="2979" relation="include">
        </childnode>
      </node>
      <node id="2972">
        <label>dbus-internals.h</label>
        <link refid="dbus-internals_8h_source"/>
        <childnode refid="2973" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
        <childnode refid="2978" relation="include">
        </childnode>
        <childnode refid="2980" relation="include">
        </childnode>
        <childnode refid="2985" relation="include">
        </childnode>
      </node>
      <node id="2975">
        <label>stddef.h</label>
      </node>
      <node id="2981">
        <label>dbus/dbus-file.h</label>
        <link refid="dbus-file_8h_source"/>
        <childnode refid="2982" relation="include">
        </childnode>
        <childnode refid="2978" relation="include">
        </childnode>
      </node>
      <node id="2977">
        <label>dbus/dbus-arch-deps.h</label>
      </node>
      <node id="2974">
        <label>dbus/dbus-macros.h</label>
        <link refid="dbus-macros_8h_source"/>
      </node>
      <node id="2984">
        <label>string.h</label>
      </node>
      <node id="2980">
        <label>dbus/dbus-sysdeps.h</label>
        <link refid="dbus-sysdeps_8h_source"/>
        <childnode refid="2971" relation="include">
        </childnode>
        <childnode refid="2978" relation="include">
        </childnode>
        <childnode refid="2981" relation="include">
        </childnode>
        <childnode refid="2982" relation="include">
        </childnode>
        <childnode refid="2984" relation="include">
        </childnode>
        <childnode refid="2983" relation="include">
        </childnode>
      </node>
      <node id="2989">
        <label>dbus-marshal-basic.h</label>
        <link refid="dbus-marshal-basic_8h_source"/>
        <childnode refid="2979" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
        <childnode refid="2977" relation="include">
        </childnode>
        <childnode refid="2982" relation="include">
        </childnode>
      </node>
      <node id="2976">
        <label>dbus/dbus-types.h</label>
        <link refid="dbus-types_8h_source"/>
        <childnode refid="2975" relation="include">
        </childnode>
        <childnode refid="2977" relation="include">
        </childnode>
      </node>
      <node id="2970">
        <label>dbus-string.c</label>
        <link refid="dbus-string.c"/>
        <childnode refid="2971" relation="include">
        </childnode>
        <childnode refid="2972" relation="include">
        </childnode>
        <childnode refid="2982" relation="include">
        </childnode>
        <childnode refid="2984" relation="include">
        </childnode>
        <childnode refid="2987" relation="include">
        </childnode>
        <childnode refid="2988" relation="include">
        </childnode>
        <childnode refid="2989" relation="include">
        </childnode>
        <childnode refid="2980" relation="include">
        </childnode>
      </node>
      <node id="2982">
        <label>dbus/dbus-string.h</label>
        <link refid="dbus-string_8h_source"/>
        <childnode refid="2974" relation="include">
        </childnode>
        <childnode refid="2976" relation="include">
        </childnode>
        <childnode refid="2973" relation="include">
        </childnode>
        <childnode refid="2983" relation="include">
        </childnode>
      </node>
      <node id="2973">
        <label>dbus/dbus-memory.h</label>
        <link refid="dbus-memory_8h_source"/>
        <childnode refid="2974" relation="include">
        </childnode>
        <childnode refid="2975" relation="include">
        </childnode>
      </node>
      <node id="2979">
        <label>dbus/dbus-protocol.h</label>
        <link refid="dbus-protocol_8h_source"/>
      </node>
      <node id="2971">
        <label>config.h</label>
      </node>
      <node id="2987">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="dbus-string_8c_1a153042cae34a55d65076081cf4633435" prot="public" static="no">
        <name>DBUS_CAN_USE_DBUS_STRING_PRIVATE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="32" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__DBusString_1ga4661e2b10dd3da080564b1191acb7619" prot="public" static="no">
        <name>ASSIGN_2_OCTETS</name>
        <param><defname>p</defname></param>
        <param><defname>octets</defname></param>
        <initializer>*((dbus_uint16_t*)(p)) = *((dbus_uint16_t*)(octets));</initializer>
        <briefdescription>
<para>assign 2 bytes from one string to another </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1056" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1055" bodyend="-1"/>
        <referencedby refid="group__DBusString_1gac33cd9f66e1dc665f92f0478b3170e23" compoundref="dbus-string_8c" startline="1144" endline="1156">_dbus_string_insert_2_aligned</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusString_1gae777c8fb39aef558604506d645af6420" prot="public" static="no">
        <name>ASSIGN_4_OCTETS</name>
        <param><defname>p</defname></param>
        <param><defname>octets</defname></param>
        <initializer>*((dbus_uint32_t*)(p)) = *((dbus_uint32_t*)(octets));</initializer>
        <briefdescription>
<para>assign 4 bytes from one string to another </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1060" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1059" bodyend="-1"/>
        <referencedby refid="group__DBusString_1gadd296cf1e6af18cb5bec438e9d353b4e" compoundref="dbus-string_8c" startline="1168" endline="1180">_dbus_string_insert_4_aligned</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusString_1gad13077c6ef8f8b764611ef5ad23b4b8b" prot="public" static="no">
        <name>ASSIGN_8_OCTETS</name>
        <param><defname>p</defname></param>
        <param><defname>octets</defname></param>
        <initializer>do {                                            \
  unsigned char *b;                             \
                                                \
  b = p;                                        \
                                                \
  *b++ = octets[0];                             \
  *b++ = octets[1];                             \
  *b++ = octets[2];                             \
  *b++ = octets[3];                             \
  *b++ = octets[4];                             \
  *b++ = octets[5];                             \
  *b++ = octets[6];                             \
  *b++ = octets[7];                             \
  _dbus_assert (b == p + 8);                    \
} while (0)</initializer>
        <briefdescription>
<para>assign 8 bytes from one string to another </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1083" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1068" bodyend="-1"/>
        <referencedby refid="group__DBusString_1ga108d7d64fb88fffca31e33181cefa232" compoundref="dbus-string_8c" startline="1192" endline="1206">_dbus_string_insert_8_aligned</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" prot="public" static="no">
        <name>DBUS_STRING_COPY_PREAMBLE</name>
        <param><defname>source</defname></param>
        <param><defname>start</defname></param>
        <param><defname>dest</defname></param>
        <param><defname>insert_at</defname></param>
        <initializer><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *real_source = (<ref refid="structDBusRealString" kindref="compound">DBusRealString</ref>*) source;               \
  <ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *real_dest = (<ref refid="structDBusRealString" kindref="compound">DBusRealString</ref>*) dest;                   \
  _dbus_assert ((source) != (dest));                                    \
  <ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member">DBUS_GENERIC_STRING_PREAMBLE</ref> (real_source);                           \
  <ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member">DBUS_GENERIC_STRING_PREAMBLE</ref> (real_dest);                             \
  _dbus_assert (!real_dest-&gt;constant);                                  \
  _dbus_assert (!real_dest-&gt;locked);                                    \
  _dbus_assert ((start) &gt;= 0);                                          \
  _dbus_assert ((start) &lt;= real_source-&gt;len);                           \
  _dbus_assert ((insert_at) &gt;= 0);                                      \
  _dbus_assert ((insert_at) &lt;= real_dest-&gt;len)</initializer>
        <briefdescription>
<para>Checks assertions for two strings we&apos;re copying a segment between, and declares real_source/real_dest variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the dest string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where the copied segment is inserted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1490" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1479" bodyend="-1"/>
        <referencedby refid="group__DBusString_1ga3c10f0d1bcaa3b450025b9c6a8b901d7" compoundref="dbus-string_8c" startline="1527" endline="1538">_dbus_string_copy</referencedby>
        <referencedby refid="group__DBusString_1gaf5f13bc7ac7a623516930d26ae2589bf" compoundref="dbus-string_8c" startline="1622" endline="1636">_dbus_string_copy_len</referencedby>
        <referencedby refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" compoundref="dbus-string_8c" startline="1555" endline="1608">_dbus_string_move_len</referencedby>
        <referencedby refid="group__DBusString_1gafe7921a92467cdefaa0a7829d6cf260b" compoundref="dbus-string_8c" startline="1660" endline="1682">_dbus_string_replace_len</referencedby>
      </memberdef>
      <memberdef kind="define" id="dbus-string_8c_1acf133da298925340768df22ed00c5920" prot="public" static="no">
        <name>ASSIGN_DATA</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>do {                  \
        (a)-&gt;str = (b)-&gt;str;                    \
        (a)-&gt;len = (b)-&gt;len;                    \
        (a)-&gt;allocated = (b)-&gt;allocated;        \
        (a)-&gt;align_offset = (b)-&gt;align_offset;  \
      } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1586"/>
      </memberdef>
      <memberdef kind="define" id="group__DBusString_1ga30614080229a4fb63460ffdc8ab484fb" prot="public" static="no">
        <name>UTF8_COMPUTE</name>
        <param><defname>Char</defname></param>
        <param><defname>Mask</defname></param>
        <param><defname>Len</defname></param>
        <initializer>if (Char &lt; 128)							      \
    {									      \
      Len = 1;								      \
      Mask = 0x7f;							      \
    }									      \
  else if ((Char &amp; 0xe0) == 0xc0)					      \
    {									      \
      Len = 2;								      \
      Mask = 0x1f;							      \
    }									      \
  else if ((Char &amp; 0xf0) == 0xe0)					      \
    {									      \
      Len = 3;								      \
      Mask = 0x0f;							      \
    }									      \
  else if ((Char &amp; 0xf8) == 0xf0)					      \
    {									      \
      Len = 4;								      \
      Mask = 0x07;							      \
    }									      \
  else if ((Char &amp; 0xfc) == 0xf8)					      \
    {									      \
      Len = 5;								      \
      Mask = 0x03;							      \
    }									      \
  else if ((Char &amp; 0xfe) == 0xfc)					      \
    {									      \
      Len = 6;								      \
      Mask = 0x01;							      \
    }									      \
  else                                                                        \
    {                                                                         \
      Len = 0;                                                               \
      Mask = 0;                                                               \
    }</initializer>
        <briefdescription>
<para>computes length and mask of a unicode character </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Char</parametername>
</parameternamelist>
<parameterdescription>
<para>the char </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Mask</parametername>
</parameternamelist>
<parameterdescription>
<para>the mask variable to assign to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length variable to assign to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1770" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1735" bodyend="-1"/>
        <referencedby refid="group__DBusString_1ga65f0f04b7c9371406fc87343f691e8da" compoundref="dbus-string_8c" startline="2844" endline="2926">_dbus_string_validate_utf8</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusString_1ga9691ff5386e218870299de1d9e77ceea" prot="public" static="no">
        <name>UTF8_LENGTH</name>
        <param><defname>Char</defname></param>
        <initializer>((Char) &lt; 0x80 ? 1 :                 \
   ((Char) &lt; 0x800 ? 2 :               \
    ((Char) &lt; 0x10000 ? 3 :            \
     ((Char) &lt; 0x200000 ? 4 :          \
      ((Char) &lt; 0x4000000 ? 5 : 6)))))</initializer>
        <briefdescription>
<para>computes length of a unicode character in UTF-8 </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Char</parametername>
</parameternamelist>
<parameterdescription>
<para>the char </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1781" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1776" bodyend="-1"/>
        <referencedby refid="group__DBusString_1ga65f0f04b7c9371406fc87343f691e8da" compoundref="dbus-string_8c" startline="2844" endline="2926">_dbus_string_validate_utf8</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusString_1gab5b4b316a69f78611a14e6b1fd091992" prot="public" static="no">
        <name>UTF8_GET</name>
        <param><defname>Result</defname></param>
        <param><defname>Chars</defname></param>
        <param><defname>Count</defname></param>
        <param><defname>Mask</defname></param>
        <param><defname>Len</defname></param>
        <initializer>(Result) = (Chars)[0] &amp; (Mask);					      \
  for ((Count) = 1; (Count) &lt; (Len); ++(Count))				      \
    {									      \
      if (((Chars)[(Count)] &amp; 0xc0) != 0x80)				      \
	{								      \
	  (Result) = -1;						      \
	  break;							      \
	}								      \
      (Result) &lt;&lt;= 6;							      \
      (Result) |= ((Chars)[(Count)] &amp; 0x3f);				      \
    }</initializer>
        <briefdescription>
<para>Gets a UTF-8 value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Result</parametername>
</parameternamelist>
<parameterdescription>
<para>variable for extracted unicode char. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Chars</parametername>
</parameternamelist>
<parameterdescription>
<para>the bytes to decode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Count</parametername>
</parameternamelist>
<parameterdescription>
<para>counter variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Mask</parametername>
</parameternamelist>
<parameterdescription>
<para>mask for this char </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Len</parametername>
</parameternamelist>
<parameterdescription>
<para>length for this char in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1803" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1792" bodyend="-1"/>
        <referencedby refid="group__DBusString_1ga65f0f04b7c9371406fc87343f691e8da" compoundref="dbus-string_8c" startline="2844" endline="2926">_dbus_string_validate_utf8</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusString_1ga25f0a93fc023fa0eec07ac1e32011e89" prot="public" static="no">
        <name>UNICODE_VALID</name>
        <param><defname>Char</defname></param>
        <initializer>((Char) &lt; 0x110000 &amp;&amp;                     \
     (((Char) &amp; 0xFFFFF800) != 0xD800) &amp;&amp;     \
     ((Char) &lt; 0xFDD0 || (Char) &gt; 0xFDEF) &amp;&amp;  \
     ((Char) &amp; 0xFFFE) != 0xFFFE)</initializer>
        <briefdescription>
<para>Check whether a Unicode (5.2) char is in a valid range. </para>        </briefdescription>
        <detaileddescription>
<para>The first check comes from the Unicode guarantee to never encode a point above 0x0010ffff, since UTF-16 couldn&apos;t represent it.</para><para>The second check covers surrogate pairs (category Cs).</para><para>The last two checks cover &quot;Noncharacter&quot;: defined as: "A code point that is permanently reserved for internal use, and that should never be interchanged. In Unicode 3.1, these consist of the values U+nFFFE and U+nFFFF (where n is from 0 to 10_16) and the values U+FDD0..U+FDEF."</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Char</parametername>
</parameternamelist>
<parameterdescription>
<para>the character </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1825" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1821" bodyend="-1"/>
        <referencedby refid="group__DBusString_1ga65f0f04b7c9371406fc87343f691e8da" compoundref="dbus-string_8c" startline="2844" endline="2926">_dbus_string_validate_utf8</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusString_1ga208522646328504b84a7a8c5f1f1ae55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fixup_alignment</definition>
        <argsstring>(DBusRealString *real)</argsstring>
        <name>fixup_alignment</name>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>real</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="80" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="79" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga2ec5d21e4d0fcef2350ae5c1991ba9c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void undo_alignment</definition>
        <argsstring>(DBusRealString *real)</argsstring>
        <name>undo_alignment</name>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>real</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="110" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga569b784beea1b4fa98f05d27e6dd0e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_init_preallocated</definition>
        <argsstring>(DBusString *str, int allocate_size)</argsstring>
        <name>_dbus_string_init_preallocated</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>allocate_size</declname>
        </param>
        <briefdescription>
<para>Initializes a string that can be up to the given allocation size before it has to realloc. </para>        </briefdescription>
        <detaileddescription>
<para>The string starts life with zero length. The string must eventually be freed with <ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member">_dbus_string_free()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>memory to hold the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocate_size</parametername>
</parameternamelist>
<parameterdescription>
<para>amount to preallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="134" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="132" bodyend="166"/>
        <references refid="group__DBusStringInternals_1gaff1c3814294a9db8ea968d159e8fd092" compoundref="dbus-string-private_8h" startline="71">_DBUS_STRING_MAX_MAX_LENGTH</references>
        <references refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" compoundref="dbus-string-private_8h" startline="52">DBusRealString::align_offset</references>
        <references refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" compoundref="dbus-string-private_8h" startline="47">DBusRealString::allocated</references>
        <references refid="structDBusRealString_1a79675cfbe443cc779e3c668fbcb99578" compoundref="dbus-string-private_8h" startline="49">DBusRealString::constant</references>
        <references refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="452" endline="490">dbus_malloc</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1a062f6b092cc6c4baf01f2a820e2ba5ad" compoundref="dbus-string-private_8h" startline="51">DBusRealString::invalid</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1a865d892d7cacedd598b828c15c5815c5" compoundref="dbus-string-private_8h" startline="50">DBusRealString::locked</references>
        <references refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" compoundref="dbus-string-private_8h" startline="48">DBusRealString::max_length</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusMarshal_1ga0d5aad82f8bf5a314dcf3f70930e254b" compoundref="dbus-marshal-header_8c" startline="479" endline="498">_dbus_header_copy</referencedby>
        <referencedby refid="group__DBusMarshal_1gaf939f7ccf175ff3056f76b7673b20ccb" compoundref="dbus-marshal-header_8c" startline="448" endline="457">_dbus_header_init</referencedby>
        <referencedby refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="176" endline="179">_dbus_string_init</referencedby>
        <referencedby refid="group__DBusMessage_1ga4bed3858b3b48ec7c86d9fc56a6ce372" compoundref="dbus-message_8c" startline="1443" endline="1511">dbus_message_copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga348252317f7bb8ac43529972945830ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_init</definition>
        <argsstring>(DBusString *str)</argsstring>
        <name>_dbus_string_init</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Initializes a string. </para>        </briefdescription>
        <detaileddescription>
<para>The string starts life with zero length. The string must eventually be freed with <ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member">_dbus_string_free()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>memory to hold the string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="177" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="176" bodyend="179"/>
        <references refid="group__DBusString_1ga569b784beea1b4fa98f05d27e6dd0e72" compoundref="dbus-string_8c" startline="132" endline="166">_dbus_string_init_preallocated</references>
        <referencedby refid="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" compoundref="dbus-sysdeps-unix_8c" startline="3844" endline="3905">_dbus_append_keyring_directory_for_credentials</referencedby>
        <referencedby refid="group__DBusAuth_1gaee76dbcdada8bcafe131f5a2de151ac3" compoundref="dbus-auth_8c" startline="2293" endline="2322">_dbus_auth_client_new</referencedby>
        <referencedby refid="group__DBusAuth_1ga302e454600ae0e1aa27193d4b0a86385" compoundref="dbus-auth_8c" startline="2247" endline="2283">_dbus_auth_server_new</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3551d425aba3d92e652b8809fdfe9339" compoundref="dbus-sysdeps-util-unix_8c" startline="1102" endline="1166">_dbus_command_for_pid</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaa32f87746e9264b2425736043d02fad4" compoundref="dbus-sysdeps_8c" startline="838" endline="859">_dbus_generate_random_bytes_buffer</referencedby>
        <referencedby refid="group__DBusSysdeps_1gabc4712c0db91f11854cdd933027355af" compoundref="dbus-sysdeps-unix_8c" startline="3355" endline="3432">_dbus_get_autolaunch_address</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga079d34a9d90759e6b3ebebab424c696e" compoundref="dbus-sysdeps-unix_8c" startline="3647" endline="3717">_dbus_get_standard_session_servicedirs</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga5193160c3dc144af34b250cfb5b0a61e" compoundref="dbus-sysdeps-unix_8c" startline="3739" endline="3789">_dbus_get_standard_system_servicedirs</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaa504db352a939909051a494d06c5b607" compoundref="dbus-userdb-util_8c" startline="44" endline="105">_dbus_is_console_user</referencedby>
        <referencedby refid="group__DBusKeyring_1ga6dad1720cf97ca6017c39330bec8d09f" compoundref="dbus-keyring_8c" startline="709" endline="838">_dbus_keyring_new_for_credentials</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga66f1c10cf909ba09ed732bc125ff8671" compoundref="dbus-message_8c" startline="3719" endline="3758">_dbus_message_loader_new</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9906c86bebb51358f0d8df6a42af30f6" compoundref="dbus-sysdeps-win_8c" startline="1695" endline="1717">_dbus_read_credentials_socket</referencedby>
        <referencedby refid="group__DBusServerInternals_1gaacfb3d29553f205b362c850cfda02fd9" compoundref="dbus-server_8c" startline="97" endline="170">_dbus_server_init_base</referencedby>
        <referencedby refid="group__DBusServerUnix_1gaec00cdf4977b9bd33621df684406a779" compoundref="dbus-server-unix_8c" startline="54" endline="214">_dbus_server_listen_platform_specific</referencedby>
        <referencedby refid="group__DBusServerUnix_1ga21ce093bda6ce6c7f94d1d894b6b4358" compoundref="dbus-server-unix_8c" startline="225" endline="298">_dbus_server_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusServerLaunchd_1ga5d09a40275e9a28d35ef3474875487a2" compoundref="dbus-server-launchd_8c" startline="64" endline="207">_dbus_server_new_for_launchd</referencedby>
        <referencedby refid="group__DBusServerSocket_1ga047d05c427e9a1fc5823fdfdcec5c5f6" compoundref="dbus-server-socket_8c" startline="388" endline="508">_dbus_server_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusSHA_1ga4278fb9df967943834c4ad6332f2c28b" compoundref="dbus-sha_8c" startline="483" endline="510">_dbus_sha_compute</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusString_1ga0a8c20d855f9ddc05718b9e2ac0e33d8" compoundref="dbus-string_8c" startline="2598" endline="2723">_dbus_string_hex_decode</referencedby>
        <referencedby refid="group__DBusString_1gaabb4873f436e015944a33cd1e3815cc9" compoundref="dbus-string_8c" startline="2548" endline="2585">_dbus_string_hex_encode</referencedby>
        <referencedby refid="group__DBusFile_1ga2adba123fde18c9d1d9eaf1347980d57" compoundref="dbus-file-unix_8c" startline="164" endline="317">_dbus_string_save_to_file</referencedby>
        <referencedby refid="group__DBusString_1ga556cc30c3ab032dbc63e217119f0d1f5" compoundref="dbus-string_8c" startline="640" endline="666">_dbus_string_steal_data</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gada3df30a229b4d29ccf30af83bd88fcc" compoundref="dbus-transport-unix_8c" startline="54" endline="108">_dbus_transport_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusTransportSocket_1gac714eaa33ff4ab5c01be1304b23339a7" compoundref="dbus-transport-socket_8c" startline="1232" endline="1291">_dbus_transport_new_for_socket</referencedby>
        <referencedby refid="group__DBusTransportSocket_1ga166dbf1d38f06321025408167d214860" compoundref="dbus-transport-socket_8c" startline="1305" endline="1373">_dbus_transport_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gafd694944860033155276df9162bdf72e" compoundref="dbus-transport-unix_8c" startline="119" endline="231">_dbus_transport_open_platform_specific</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga31ec42cef2d15ca358e737bb5f19c5cf" compoundref="dbus-sysdeps-util-unix_8c" startline="540" endline="573">_dbus_user_at_console</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga123620ec5ce2b881786588121d6a03fd" compoundref="dbus-sysdeps-util-unix_8c" startline="230" endline="295">_dbus_write_pid_to_file_and_pipe</referencedby>
        <referencedby refid="group__DBusAddress_1ga818e79423595cd2a306ec1b4dc1ab7f5" compoundref="dbus-address_8c" startline="583" endline="605">dbus_address_escape_value</referencedby>
        <referencedby refid="group__DBusAddress_1ga80d4e20206f8f1e9bbd2607e9f4bbb44" compoundref="dbus-address_8c" startline="617" endline="647">dbus_address_unescape_value</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
        <referencedby refid="group__DBusMisc_1ga2b21c9a12fea5f92763441c65ccbfcf9" compoundref="dbus-misc_8c" startline="73" endline="95">dbus_get_local_machine_id</referencedby>
        <referencedby refid="group__DBusMessage_1gab4579a88a1a7eaf648350466f585ef8b" compoundref="dbus-message_8c" startline="2080" endline="2103">dbus_message_iter_get_signature</referencedby>
        <referencedby refid="group__DBusMessage_1ga3f90a918ada328450fcfe9ac403b8807" compoundref="dbus-message_8c" startline="4542" endline="4589">dbus_message_marshal</referencedby>
        <referencedby refid="group__DBusMessage_1ga707a27881820f964e3606bc906a47978" compoundref="dbus-message_8c" startline="1398" endline="1427">dbus_message_new_error_printf</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
        <referencedby refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="420">dbus_set_error</referencedby>
        <referencedby refid="group__DBusSignature_1ga898bbc14392cbedc087ce0be68d35c98" compoundref="dbus-signature_8c" startline="112" endline="132">dbus_signature_iter_get_signature</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_init_const</definition>
        <argsstring>(DBusString *str, const char *value)</argsstring>
        <name>_dbus_string_init_const</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Initializes a constant string. </para>        </briefdescription>
        <detaileddescription>
<para>The value parameter is not copied (should be static), and the string may never be modified. It is safe but not necessary to call <ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member">_dbus_string_free()</ref> on a const string. The string has a length limit of MAXINT - 8.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>memory to use for the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>a string to be stored in str (not copied!!!) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="212" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="210" bodyend="217"/>
        <references refid="group__DBusString_1ga6792a5c1725faa9d635d95f7a3b5bfae" compoundref="dbus-string_8c" startline="230" endline="255">_dbus_string_init_const_len</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" compoundref="dbus-sysdeps-unix_8c" startline="3844" endline="3905">_dbus_append_keyring_directory_for_credentials</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga82c920a8c3b5958ba1ecf8e5f5d6373b" compoundref="dbus-sysdeps-util-unix_8c" startline="324" endline="372">_dbus_change_to_daemon_user</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga079d34a9d90759e6b3ebebab424c696e" compoundref="dbus-sysdeps-unix_8c" startline="3647" endline="3717">_dbus_get_standard_session_servicedirs</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3f073afc8ef8397471531baf513e1bb5" compoundref="dbus-sysdeps-unix_8c" startline="3453" endline="3471">_dbus_read_local_machine_uuid</referencedby>
        <referencedby refid="group__DBusServerUnix_1gaec00cdf4977b9bd33621df684406a779" compoundref="dbus-server-unix_8c" startline="54" endline="214">_dbus_server_listen_platform_specific</referencedby>
        <referencedby refid="group__DBusServerUnix_1ga21ce093bda6ce6c7f94d1d894b6b4358" compoundref="dbus-server-unix_8c" startline="225" endline="298">_dbus_server_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusServerSocket_1ga047d05c427e9a1fc5823fdfdcec5c5f6" compoundref="dbus-server-socket_8c" startline="388" endline="508">_dbus_server_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga45f661c5a089ed45233a1acabaf31964" compoundref="dbus-sysdeps-util-unix_8c" startline="304" endline="311">_dbus_verify_daemon_user</referencedby>
        <referencedby refid="group__DBusAddress_1ga818e79423595cd2a306ec1b4dc1ab7f5" compoundref="dbus-address_8c" startline="583" endline="605">dbus_address_escape_value</referencedby>
        <referencedby refid="group__DBusAddress_1ga80d4e20206f8f1e9bbd2607e9f4bbb44" compoundref="dbus-address_8c" startline="617" endline="647">dbus_address_unescape_value</referencedby>
        <referencedby refid="group__DBusErrors_1ga48515c580199514026542fe053ef1887" compoundref="dbus-errors_8c" startline="302" endline="320">dbus_error_has_name</referencedby>
        <referencedby refid="group__DBusInternalsUuidgen_1ga1af5f50499f4c9b7dcaa1b36140b8f9c" compoundref="dbus-uuidgen_8c" startline="83" endline="111">dbus_internal_do_not_use_get_uuid</referencedby>
        <referencedby refid="group__DBusMessage_1ga943150f4e87fd8507da224d22c266100" compoundref="dbus-message_8c" startline="2707" endline="2759">dbus_message_iter_open_container</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
        <referencedby refid="group__DBusSignature_1ga0f4b81be4f6193c7d8da0ee214772e02" compoundref="dbus-signature_8c" startline="233" endline="250">dbus_signature_validate</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga6792a5c1725faa9d635d95f7a3b5bfae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_init_const_len</definition>
        <argsstring>(DBusString *str, const char *value, int len)</argsstring>
        <name>_dbus_string_init_const_len</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Initializes a constant string with a length. </para>        </briefdescription>
        <detaileddescription>
<para>The value parameter is not copied (should be static), and the string may never be modified. It is safe but not necessary to call <ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member">_dbus_string_free()</ref> on a const string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>memory to use for the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>a string to be stored in str (not copied!!!) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length to use </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="233" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="230" bodyend="255"/>
        <references refid="group__DBusStringInternals_1gaff1c3814294a9db8ea968d159e8fd092" compoundref="dbus-string-private_8h" startline="71">_DBUS_STRING_MAX_MAX_LENGTH</references>
        <references refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" compoundref="dbus-string-private_8h" startline="52">DBusRealString::align_offset</references>
        <references refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" compoundref="dbus-string-private_8h" startline="47">DBusRealString::allocated</references>
        <references refid="structDBusRealString_1a79675cfbe443cc779e3c668fbcb99578" compoundref="dbus-string-private_8h" startline="49">DBusRealString::constant</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1a062f6b092cc6c4baf01f2a820e2ba5ad" compoundref="dbus-string-private_8h" startline="51">DBusRealString::invalid</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1a865d892d7cacedd598b828c15c5815c5" compoundref="dbus-string-private_8h" startline="50">DBusRealString::locked</references>
        <references refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" compoundref="dbus-string-private_8h" startline="48">DBusRealString::max_length</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga6cc9916aa1dde4d44072ee85b5691b5b" compoundref="dbus-sysdeps-win_8c" startline="1618" endline="1674">_dbus_send_credentials_socket</referencedby>
        <referencedby refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="210" endline="217">_dbus_string_init_const</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaf08364813376bd2d8f455d435d85323e" compoundref="dbus-internals_8c" startline="613" endline="619">_dbus_uuid_encode</referencedby>
        <referencedby refid="group__DBusMessage_1ga67b26fd2c8e3305f3a467a5f3e36b24a" compoundref="dbus-message_8c" startline="4663" endline="4698">dbus_message_demarshal_bytes_needed</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_free</definition>
        <argsstring>(DBusString *str)</argsstring>
        <name>_dbus_string_free</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Frees a string created by <ref refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" kindref="member">_dbus_string_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>memory where the string is stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="264" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="263" bodyend="273"/>
        <references refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" compoundref="dbus-string-private_8h" startline="52">DBusRealString::align_offset</references>
        <references refid="structDBusRealString_1a79675cfbe443cc779e3c668fbcb99578" compoundref="dbus-string-private_8h" startline="49">DBusRealString::constant</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="629" endline="668">dbus_free</references>
        <references refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" compoundref="dbus-string-private_8h" startline="78">DBUS_GENERIC_STRING_PREAMBLE</references>
        <references refid="structDBusRealString_1a062f6b092cc6c4baf01f2a820e2ba5ad" compoundref="dbus-string-private_8h" startline="51">DBusRealString::invalid</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" compoundref="dbus-sysdeps-unix_8c" startline="3844" endline="3905">_dbus_append_keyring_directory_for_credentials</referencedby>
        <referencedby refid="group__DBusAuth_1gaee76dbcdada8bcafe131f5a2de151ac3" compoundref="dbus-auth_8c" startline="2293" endline="2322">_dbus_auth_client_new</referencedby>
        <referencedby refid="group__DBusAuth_1ga302e454600ae0e1aa27193d4b0a86385" compoundref="dbus-auth_8c" startline="2247" endline="2283">_dbus_auth_server_new</referencedby>
        <referencedby refid="group__DBusAuth_1ga7fb648be9d6d451917195a0e43eeece0" compoundref="dbus-auth_8c" startline="2346" endline="2385">_dbus_auth_unref</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3551d425aba3d92e652b8809fdfe9339" compoundref="dbus-sysdeps-util-unix_8c" startline="1102" endline="1166">_dbus_command_for_pid</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaa32f87746e9264b2425736043d02fad4" compoundref="dbus-sysdeps_8c" startline="838" endline="859">_dbus_generate_random_bytes_buffer</referencedby>
        <referencedby refid="group__DBusSysdeps_1gabc4712c0db91f11854cdd933027355af" compoundref="dbus-sysdeps-unix_8c" startline="3355" endline="3432">_dbus_get_autolaunch_address</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga079d34a9d90759e6b3ebebab424c696e" compoundref="dbus-sysdeps-unix_8c" startline="3647" endline="3717">_dbus_get_standard_session_servicedirs</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga5193160c3dc144af34b250cfb5b0a61e" compoundref="dbus-sysdeps-unix_8c" startline="3739" endline="3789">_dbus_get_standard_system_servicedirs</referencedby>
        <referencedby refid="group__DBusMarshal_1ga0d5aad82f8bf5a314dcf3f70930e254b" compoundref="dbus-marshal-header_8c" startline="479" endline="498">_dbus_header_copy</referencedby>
        <referencedby refid="group__DBusMarshal_1gab90a814a27aeeace7e02c4ed130539cf" compoundref="dbus-marshal-header_8c" startline="465" endline="468">_dbus_header_free</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaa504db352a939909051a494d06c5b607" compoundref="dbus-userdb-util_8c" startline="44" endline="105">_dbus_is_console_user</referencedby>
        <referencedby refid="group__DBusKeyring_1ga6dad1720cf97ca6017c39330bec8d09f" compoundref="dbus-keyring_8c" startline="709" endline="838">_dbus_keyring_new_for_credentials</referencedby>
        <referencedby refid="group__DBusKeyring_1gadd42b029d08dc477b6847e91bdcb23ca" compoundref="dbus-keyring_8c" startline="681" endline="696">_dbus_keyring_unref</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga51299aab1f5e0b2408ab858d3377b20c" compoundref="dbus-message_8c" startline="3781" endline="3797">_dbus_message_loader_unref</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9906c86bebb51358f0d8df6a42af30f6" compoundref="dbus-sysdeps-win_8c" startline="1695" endline="1717">_dbus_read_credentials_socket</referencedby>
        <referencedby refid="group__DBusServerInternals_1ga93b5bca90e69122d5acbbeef2b4ca03e" compoundref="dbus-server_8c" startline="179" endline="204">_dbus_server_finalize_base</referencedby>
        <referencedby refid="group__DBusServerInternals_1gaacfb3d29553f205b362c850cfda02fd9" compoundref="dbus-server_8c" startline="97" endline="170">_dbus_server_init_base</referencedby>
        <referencedby refid="group__DBusServerUnix_1gaec00cdf4977b9bd33621df684406a779" compoundref="dbus-server-unix_8c" startline="54" endline="214">_dbus_server_listen_platform_specific</referencedby>
        <referencedby refid="group__DBusServerUnix_1ga21ce093bda6ce6c7f94d1d894b6b4358" compoundref="dbus-server-unix_8c" startline="225" endline="298">_dbus_server_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusServerLaunchd_1ga5d09a40275e9a28d35ef3474875487a2" compoundref="dbus-server-launchd_8c" startline="64" endline="207">_dbus_server_new_for_launchd</referencedby>
        <referencedby refid="group__DBusServerSocket_1ga047d05c427e9a1fc5823fdfdcec5c5f6" compoundref="dbus-server-socket_8c" startline="388" endline="508">_dbus_server_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusSHA_1ga4278fb9df967943834c4ad6332f2c28b" compoundref="dbus-sha_8c" startline="483" endline="510">_dbus_sha_compute</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusString_1ga0a8c20d855f9ddc05718b9e2ac0e33d8" compoundref="dbus-string_8c" startline="2598" endline="2723">_dbus_string_hex_decode</referencedby>
        <referencedby refid="group__DBusString_1gaabb4873f436e015944a33cd1e3815cc9" compoundref="dbus-string_8c" startline="2548" endline="2585">_dbus_string_hex_encode</referencedby>
        <referencedby refid="group__DBusFile_1ga2adba123fde18c9d1d9eaf1347980d57" compoundref="dbus-file-unix_8c" startline="164" endline="317">_dbus_string_save_to_file</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gada3df30a229b4d29ccf30af83bd88fcc" compoundref="dbus-transport-unix_8c" startline="54" endline="108">_dbus_transport_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusTransportSocket_1gac714eaa33ff4ab5c01be1304b23339a7" compoundref="dbus-transport-socket_8c" startline="1232" endline="1291">_dbus_transport_new_for_socket</referencedby>
        <referencedby refid="group__DBusTransportSocket_1ga166dbf1d38f06321025408167d214860" compoundref="dbus-transport-socket_8c" startline="1305" endline="1373">_dbus_transport_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gafd694944860033155276df9162bdf72e" compoundref="dbus-transport-unix_8c" startline="119" endline="231">_dbus_transport_open_platform_specific</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga31ec42cef2d15ca358e737bb5f19c5cf" compoundref="dbus-sysdeps-util-unix_8c" startline="540" endline="573">_dbus_user_at_console</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga123620ec5ce2b881786588121d6a03fd" compoundref="dbus-sysdeps-util-unix_8c" startline="230" endline="295">_dbus_write_pid_to_file_and_pipe</referencedby>
        <referencedby refid="group__DBusAddress_1ga818e79423595cd2a306ec1b4dc1ab7f5" compoundref="dbus-address_8c" startline="583" endline="605">dbus_address_escape_value</referencedby>
        <referencedby refid="group__DBusAddress_1ga80d4e20206f8f1e9bbd2607e9f4bbb44" compoundref="dbus-address_8c" startline="617" endline="647">dbus_address_unescape_value</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
        <referencedby refid="group__DBusMisc_1ga2b21c9a12fea5f92763441c65ccbfcf9" compoundref="dbus-misc_8c" startline="73" endline="95">dbus_get_local_machine_id</referencedby>
        <referencedby refid="group__DBusMessage_1ga4bed3858b3b48ec7c86d9fc56a6ce372" compoundref="dbus-message_8c" startline="1443" endline="1511">dbus_message_copy</referencedby>
        <referencedby refid="group__DBusMessage_1ga67b26fd2c8e3305f3a467a5f3e36b24a" compoundref="dbus-message_8c" startline="4663" endline="4698">dbus_message_demarshal_bytes_needed</referencedby>
        <referencedby refid="group__DBusMessage_1gab4579a88a1a7eaf648350466f585ef8b" compoundref="dbus-message_8c" startline="2080" endline="2103">dbus_message_iter_get_signature</referencedby>
        <referencedby refid="group__DBusMessage_1ga3f90a918ada328450fcfe9ac403b8807" compoundref="dbus-message_8c" startline="4542" endline="4589">dbus_message_marshal</referencedby>
        <referencedby refid="group__DBusMessage_1ga707a27881820f964e3606bc906a47978" compoundref="dbus-message_8c" startline="1398" endline="1427">dbus_message_new_error_printf</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
        <referencedby refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="420">dbus_set_error</referencedby>
        <referencedby refid="group__DBusSignature_1ga898bbc14392cbedc087ce0be68d35c98" compoundref="dbus-signature_8c" startline="112" endline="132">dbus_signature_iter_get_signature</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gac514298c7c964967ebef4bd6049d26b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t compact</definition>
        <argsstring>(DBusRealString *real, int max_waste)</argsstring>
        <name>compact</name>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>real</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_waste</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="278" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="276" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga4eb8ef94f78dc3fa3a49c738d8386f01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t reallocate_for_length</definition>
        <argsstring>(DBusRealString *real, int new_length)</argsstring>
        <name>reallocate_for_length</name>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>real</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="332" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="330" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gac49ec5782ca606029c096124b5e43ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_compact</definition>
        <argsstring>(DBusString *str, int max_waste)</argsstring>
        <name>_dbus_string_compact</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_waste</declname>
        </param>
        <briefdescription>
<para>Compacts the string to avoid wasted memory. </para>        </briefdescription>
        <detaileddescription>
<para>Wasted memory is memory that is allocated but not actually required to store the current length of the string. The compact is only done if more than the given amount of memory is being wasted (otherwise the waste is ignored and the call does nothing).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_waste</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum amount of waste to ignore </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if the compact failed due to realloc failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="390" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="388" bodyend="394"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gae7927c35fcb1eabb06e55ad00a4fe86c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t set_length</definition>
        <argsstring>(DBusRealString *real, int new_length)</argsstring>
        <name>set_length</name>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>real</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="399" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="397" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaf4856ebc0d99d957916a0a0dc4b4a73e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t open_gap</definition>
        <argsstring>(int len, DBusRealString *dest, int insert_at)</argsstring>
        <name>open_gap</name>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="420" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="417" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga7a73fb373398606e6e1d0a86c4587a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* _dbus_string_get_data_len</definition>
        <argsstring>(DBusString *str, int start, int len)</argsstring>
        <name>_dbus_string_get_data_len</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Gets a sub-portion of the raw character buffer from the string. </para>        </briefdescription>
        <detaileddescription>
<para>The &quot;len&quot; field is required simply for error checking, to be sure you don&apos;t try to use more string than exists. The nul termination of the returned buffer remains at the end of the entire string, not at start + len.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>byte offset to return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment to return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the string data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="492" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="489" bodyend="500"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <referencedby refid="group__DBusSysdeps_1gac9fd08af5e54c0e9b3db108b48a65778" compoundref="dbus-sysdeps-win_8c" startline="1970" endline="1996">_dbus_generate_random_bytes</referencedby>
        <referencedby refid="group__DBusMarshal_1gad2073f8f2f2ba3b710aa929dced34cc3" compoundref="dbus-marshal-header_8c" startline="1429" endline="1441">_dbus_header_toggle_flag</referencedby>
        <referencedby refid="group__DBusMarshal_1ga609a4b8c0b65096890766fda73a4c40f" compoundref="dbus-marshal-byteswap_8c" startline="226" endline="248">_dbus_marshal_byteswap</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1gaf52cb1d5b9fc5611808ce32eff898c28" compoundref="dbus-sysdeps-unix_8c" startline="587" endline="634">_dbus_read</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga6fe72fa1c0484ac5594b08145ea19530" compoundref="dbus-sysdeps-win_8c" startline="185" endline="242">_dbus_read_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga14aa692ac7e9aab777b9f565c4b8933b" compoundref="dbus-sysdeps-unix_8c" startline="272" endline="392">_dbus_read_socket_with_unix_fds</referencedby>
        <referencedby refid="group__DBusString_1ga41141ca36c361f92b6029530ff83fa66" compoundref="dbus-sysdeps_8c" startline="393" endline="421">_dbus_string_append_int</referencedby>
        <referencedby refid="group__DBusString_1gaa63064881001085159c78204f70acde8" compoundref="dbus-sysdeps_8c" startline="431" endline="459">_dbus_string_append_uint</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaa0964d662ad17c58eb044c1b153017a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_insert_bytes</definition>
        <argsstring>(DBusString *str, int i, int n_bytes, unsigned char byte)</argsstring>
        <name>_dbus_string_insert_bytes</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bytes</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>Inserts a number of bytes of a given value at the given position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="587" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="583" bodyend="602"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gab0770800dce6df97e5d246105a44e7b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_insert_byte</definition>
        <argsstring>(DBusString *str, int i, unsigned char byte)</argsstring>
        <name>_dbus_string_insert_byte</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>Inserts a single byte at the given position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="616" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="613" bodyend="627"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusMarshal_1ga54323d48921de8c5bd04ae01548312bb" compoundref="dbus-marshal-basic_8c" startline="848" endline="905">_dbus_marshal_write_basic</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga556cc30c3ab032dbc63e217119f0d1f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_steal_data</definition>
        <argsstring>(DBusString *str, char **data_return)</argsstring>
        <name>_dbus_string_steal_data</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>data_return</declname>
        </param>
        <briefdescription>
<para>Like _dbus_string_get_data(), but removes the gotten data from the original string. </para>        </briefdescription>
        <detaileddescription>
<para>The caller must free the data returned. This function may fail due to lack of memory, and return <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_return</parametername>
</parameternamelist>
<parameterdescription>
<para>location to return the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="642" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="640" bodyend="666"/>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="176" endline="179">_dbus_string_init</references>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" compoundref="dbus-string-private_8h" startline="48">DBusRealString::max_length</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusAddress_1ga818e79423595cd2a306ec1b4dc1ab7f5" compoundref="dbus-address_8c" startline="583" endline="605">dbus_address_escape_value</referencedby>
        <referencedby refid="group__DBusAddress_1ga80d4e20206f8f1e9bbd2607e9f4bbb44" compoundref="dbus-address_8c" startline="617" endline="647">dbus_address_unescape_value</referencedby>
        <referencedby refid="group__DBusMisc_1ga2b21c9a12fea5f92763441c65ccbfcf9" compoundref="dbus-misc_8c" startline="73" endline="95">dbus_get_local_machine_id</referencedby>
        <referencedby refid="group__DBusMessage_1gab4579a88a1a7eaf648350466f585ef8b" compoundref="dbus-message_8c" startline="2080" endline="2103">dbus_message_iter_get_signature</referencedby>
        <referencedby refid="group__DBusMessage_1ga3f90a918ada328450fcfe9ac403b8807" compoundref="dbus-message_8c" startline="4542" endline="4589">dbus_message_marshal</referencedby>
        <referencedby refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="420">dbus_set_error</referencedby>
        <referencedby refid="group__DBusSignature_1ga898bbc14392cbedc087ce0be68d35c98" compoundref="dbus-signature_8c" startline="112" endline="132">dbus_signature_iter_get_signature</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga7e509d4f959d19d96f83250e62287b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_copy_data</definition>
        <argsstring>(const DBusString *str, char **data_return)</argsstring>
        <name>_dbus_string_copy_data</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>data_return</declname>
        </param>
        <briefdescription>
<para>Copies the data from the string into a char*. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_return</parametername>
</parameternamelist>
<parameterdescription>
<para>place to return the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="731" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="729" bodyend="742"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="452" endline="490">dbus_malloc</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusTransport_1gaa5ece78ea671fe9d9ed17fc6920c9d09" compoundref="dbus-transport_8c" startline="99" endline="204">_dbus_transport_init_base</referencedby>
        <referencedby refid="group__DBusServer_1ga3b2920b3c65836113781d9dd00d1e139" compoundref="dbus-server_8c" startline="855" endline="867">dbus_server_get_id</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaf97b18e419678dbf967d9b9ad1112ca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_copy_to_buffer</definition>
        <argsstring>(const DBusString *str, char *buffer, int avail_len)</argsstring>
        <name>_dbus_string_copy_to_buffer</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>avail_len</declname>
        </param>
        <briefdescription>
<para>Copies the contents of a <ref refid="structDBusString" kindref="compound">DBusString</ref> into a different buffer. </para>        </briefdescription>
        <detaileddescription>
<para>It is a bug if avail_len is too short to hold the string contents. nul termination is not copied, just the supplied bytes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a C buffer to copy data to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>avail_len</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum length of C buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="757" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="754" bodyend="764"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <referencedby refid="group__DBusSysdeps_1gaa32f87746e9264b2425736043d02fad4" compoundref="dbus-sysdeps_8c" startline="838" endline="859">_dbus_generate_random_bytes_buffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gac42891d26084a4da0f63038d93b63828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_copy_to_buffer_with_nul</definition>
        <argsstring>(const DBusString *str, char *buffer, int avail_len)</argsstring>
        <name>_dbus_string_copy_to_buffer_with_nul</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>avail_len</declname>
        </param>
        <briefdescription>
<para>Copies the contents of a <ref refid="structDBusString" kindref="compound">DBusString</ref> into a different buffer. </para>        </briefdescription>
        <detaileddescription>
<para>It is a bug if avail_len is too short to hold the string contents plus a nul byte.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a C buffer to copy data to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>avail_len</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum length of C buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="779" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="776" bodyend="786"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_lengthen</definition>
        <argsstring>(DBusString *str, int additional_length)</argsstring>
        <name>_dbus_string_lengthen</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>additional_length</declname>
        </param>
        <briefdescription>
<para>Makes a string longer by the given number of bytes. </para>        </briefdescription>
        <detaileddescription>
<para>Checks whether adding additional_length to the current length would overflow an integer, and checks for exceeding a string&apos;s max length. The new bytes are not initialized, other than nul-terminating the end of the string. The uninitialized bytes may contain nul bytes or other junk.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>additional_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length to add to the string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="866" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="864" bodyend="875"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" compoundref="dbus-string-private_8h" startline="48">DBusRealString::max_length</references>
        <referencedby refid="group__DBusSysdeps_1gac9fd08af5e54c0e9b3db108b48a65778" compoundref="dbus-sysdeps-win_8c" startline="1970" endline="1996">_dbus_generate_random_bytes</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1gaf52cb1d5b9fc5611808ce32eff898c28" compoundref="dbus-sysdeps-unix_8c" startline="587" endline="634">_dbus_read</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga6fe72fa1c0484ac5594b08145ea19530" compoundref="dbus-sysdeps-win_8c" startline="185" endline="242">_dbus_read_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga14aa692ac7e9aab777b9f565c4b8933b" compoundref="dbus-sysdeps-unix_8c" startline="272" endline="392">_dbus_read_socket_with_unix_fds</referencedby>
        <referencedby refid="group__DBusString_1ga4764e75c464356408fc1a12df93177c1" compoundref="dbus-string_8c" startline="1003" endline="1011">_dbus_string_alloc_space</referencedby>
        <referencedby refid="group__DBusString_1ga41141ca36c361f92b6029530ff83fa66" compoundref="dbus-sysdeps_8c" startline="393" endline="421">_dbus_string_append_int</referencedby>
        <referencedby refid="group__DBusString_1ga8d794f292831d1a7edeb971b13a2c641" compoundref="dbus-string_8c" startline="1244" endline="1274">_dbus_string_append_printf_valist</referencedby>
        <referencedby refid="group__DBusString_1gaa63064881001085159c78204f70acde8" compoundref="dbus-sysdeps_8c" startline="431" endline="459">_dbus_string_append_uint</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga7af1cbfa905f26d972ab644d890548b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_shorten</definition>
        <argsstring>(DBusString *str, int length_to_remove)</argsstring>
        <name>_dbus_string_shorten</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length_to_remove</declname>
        </param>
        <briefdescription>
<para>Makes a string shorter by the given number of bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length_to_remove</parametername>
</parameternamelist>
<parameterdescription>
<para>length to remove from the string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="886" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="884" bodyend="893"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <referencedby refid="group__DBusSysdeps_1gae3a3fdc0c6001e367584bb016aca495d" compoundref="dbus-sysdeps-unix_8c" startline="2598" endline="2625">_dbus_concat_dir_and_file</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1ga6425e8cf4a38c71a48309b436322d4db" compoundref="dbus-sysdeps-unix_8c" startline="3483" endline="3531">_dbus_lookup_launchd_socket</referencedby>
        <referencedby refid="group__DBusString_1ga4764e75c464356408fc1a12df93177c1" compoundref="dbus-string_8c" startline="1003" endline="1011">_dbus_string_alloc_space</referencedby>
        <referencedby refid="group__DBusString_1ga41141ca36c361f92b6029530ff83fa66" compoundref="dbus-sysdeps_8c" startline="393" endline="421">_dbus_string_append_int</referencedby>
        <referencedby refid="group__DBusString_1gaa63064881001085159c78204f70acde8" compoundref="dbus-sysdeps_8c" startline="431" endline="459">_dbus_string_append_uint</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_set_length</definition>
        <argsstring>(DBusString *str, int length)</argsstring>
        <name>_dbus_string_set_length</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Sets the length of a string. </para>        </briefdescription>
        <detaileddescription>
<para>Can be used to truncate or lengthen the string. If the string is lengthened, the function may fail and return <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>. Newly-added bytes are not initialized, as with <ref refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" kindref="member">_dbus_string_lengthen()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>new length of the string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="908" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="906" bodyend="913"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <referencedby refid="group__DBusAddressInternals_1ga1ecc2f460303cd70c34e7667e8b12b37" compoundref="dbus-address_8c" startline="104" endline="141">_dbus_address_append_escaped</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" compoundref="dbus-sysdeps-unix_8c" startline="3844" endline="3905">_dbus_append_keyring_directory_for_credentials</referencedby>
        <referencedby refid="group__DBusAuth_1gabbe8cf9e5958357c49a190ca259aa9b3" compoundref="dbus-auth_8c" startline="2576" endline="2582">_dbus_auth_delete_unused_bytes</referencedby>
        <referencedby refid="group__DBusSysdeps_1gab9a2ddb130da035d6186f2d96bf37cb4" compoundref="dbus-sysdeps-util-unix_8c" startline="696" endline="738">_dbus_directory_get_next_file</referencedby>
        <referencedby refid="group__DBusFile_1gad22d468e789139c87f7f4bb97cadf448" compoundref="dbus-file-unix_8c" startline="55" endline="151">_dbus_file_get_contents</referencedby>
        <referencedby refid="group__DBusSysdeps_1gac9fd08af5e54c0e9b3db108b48a65778" compoundref="dbus-sysdeps-unix_8c" startline="2691" endline="2726">_dbus_generate_random_bytes</referencedby>
        <referencedby refid="group__DBusMarshal_1ga0c3a3f95d9a53b91a0cd0b260196685b" compoundref="dbus-marshal-header_8c" startline="954" endline="1172">_dbus_header_load</referencedby>
        <referencedby refid="group__DBusMarshal_1gacb9244bf214bcb53d851d2ce640b3931" compoundref="dbus-marshal-header_8c" startline="428" endline="437">_dbus_header_reinit</referencedby>
        <referencedby refid="group__DBusMessageInternals_1ga66f1c10cf909ba09ed732bc125ff8671" compoundref="dbus-message_8c" startline="3719" endline="3758">_dbus_message_loader_new</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1gaf52cb1d5b9fc5611808ce32eff898c28" compoundref="dbus-sysdeps-unix_8c" startline="587" endline="634">_dbus_read</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga6fe72fa1c0484ac5594b08145ea19530" compoundref="dbus-sysdeps-win_8c" startline="185" endline="242">_dbus_read_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga14aa692ac7e9aab777b9f565c4b8933b" compoundref="dbus-sysdeps-unix_8c" startline="272" endline="392">_dbus_read_socket_with_unix_fds</referencedby>
        <referencedby refid="group__DBusString_1gac3b78e2cb63fb37fbff8d7e647ddfa5a" compoundref="dbus-string_8c" startline="2514" endline="2535">_dbus_string_append_byte_as_hex</referencedby>
        <referencedby refid="group__DBusString_1gaa92c6ab2c5e24cbefef0a3f3fc76f98b" compoundref="dbus-string_8c" startline="2276" endline="2288">_dbus_string_chop_white</referencedby>
        <referencedby refid="group__DBusString_1ga8b7fc22e6738173e1b2cef4b91b9c3c1" compoundref="dbus-string_8c" startline="2196" endline="2231">_dbus_string_pop_line</referencedby>
        <referencedby refid="group__DBusString_1ga5d293b49b6afbbd74069d0823acce6b5" compoundref="dbus-string_8c" startline="1697" endline="1724">_dbus_string_split_on_byte</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga953a142bf81280b9019c9e27145057ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t align_insert_point_then_open_gap</definition>
        <argsstring>(DBusString *str, int *insert_at_p, int alignment, int gap_size)</argsstring>
        <name>align_insert_point_then_open_gap</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>insert_at_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gap_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="920" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="916" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaffaa1d921a2d5843828b81ea601287e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t align_length_then_lengthen</definition>
        <argsstring>(DBusString *str, int alignment, int then_lengthen_by)</argsstring>
        <name>align_length_then_lengthen</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>int</type>
          <declname>then_lengthen_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="968" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="965" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaeadfb67c4e796131610499c91d0d7813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_align_length</definition>
        <argsstring>(DBusString *str, int alignment)</argsstring>
        <name>_dbus_string_align_length</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Align the length of a string to a specific alignment (typically 4 or 8) by appending nul bytes to the string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>the alignment </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="989" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="987" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga4764e75c464356408fc1a12df93177c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_alloc_space</definition>
        <argsstring>(DBusString *str, int extra_bytes)</argsstring>
        <name>_dbus_string_alloc_space</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>extra_bytes</declname>
        </param>
        <briefdescription>
<para>Preallocate extra_bytes such that a future lengthening of the string by extra_bytes is guaranteed to succeed without an out of memory error. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes to alloc </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1005" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1003" bodyend="1011"/>
        <references refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" compoundref="dbus-string_8c" startline="864" endline="875">_dbus_string_lengthen</references>
        <references refid="group__DBusString_1ga7af1cbfa905f26d972ab644d890548b8" compoundref="dbus-string_8c" startline="884" endline="893">_dbus_string_shorten</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusMarshal_1ga0103b0214766b0ff1ca05bcc7f1e631b" compoundref="dbus-marshal-recursive_8c" startline="2296" endline="2327">_dbus_type_writer_write_basic</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga3714738ce86fc63f452ecc4dc5fa6d65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t append</definition>
        <argsstring>(DBusRealString *real, const char *buffer, int buffer_len)</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buffer_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1017" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1014" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_append</definition>
        <argsstring>(DBusString *str, const char *buffer)</argsstring>
        <name>_dbus_string_append</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Appends a nul-terminated C-style string to a <ref refid="structDBusString" kindref="compound">DBusString</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusString" kindref="compound">DBusString</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the nul-terminated characters to append </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1041" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1039" bodyend="1052"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" compoundref="dbus-string-private_8h" startline="48">DBusRealString::max_length</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" compoundref="dbus-sysdeps-unix_8c" startline="3844" endline="3905">_dbus_append_keyring_directory_for_credentials</referencedby>
        <referencedby refid="group__DBusSysdeps_1gacc062b5f20f4a355ea78afccb0abd5f9" compoundref="dbus-sysdeps-unix_8c" startline="3812" endline="3815">_dbus_append_session_config_file</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga6a9478a21745b128750df87ac557c7d4" compoundref="dbus-sysdeps-unix_8c" startline="3800" endline="3803">_dbus_append_system_config_file</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga095c54de3974c6d04c29ef86c6e06e35" compoundref="dbus-sysdeps-win_8c" startline="1843" endline="1855">_dbus_append_user_from_current_process</referencedby>
        <referencedby refid="group__DBusSysdeps_1gab9a2ddb130da035d6186f2d96bf37cb4" compoundref="dbus-sysdeps-util-unix_8c" startline="696" endline="738">_dbus_directory_get_next_file</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga079d34a9d90759e6b3ebebab424c696e" compoundref="dbus-sysdeps-unix_8c" startline="3647" endline="3717">_dbus_get_standard_session_servicedirs</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga5193160c3dc144af34b250cfb5b0a61e" compoundref="dbus-sysdeps-unix_8c" startline="3739" endline="3789">_dbus_get_standard_system_servicedirs</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gabdd1dc47f44e3d6702c86c68da9a0173" compoundref="dbus-userdb_8c" startline="447" endline="476">_dbus_homedir_from_uid</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga91c63dcb68d38347578edf39eda1712a" compoundref="dbus-userdb_8c" startline="408" endline="437">_dbus_homedir_from_username</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaa504db352a939909051a494d06c5b607" compoundref="dbus-userdb-util_8c" startline="44" endline="105">_dbus_is_console_user</referencedby>
        <referencedby refid="group__DBusKeyring_1ga6dad1720cf97ca6017c39330bec8d09f" compoundref="dbus-keyring_8c" startline="709" endline="838">_dbus_keyring_new_for_credentials</referencedby>
        <referencedby refid="group__DBusSysdeps_1gafdae31b3b61299dbaaccfcb1205a6f30" compoundref="dbus-sysdeps-unix_8c" startline="1296" endline="1483">_dbus_listen_tcp_socket</referencedby>
        <referencedby refid="group__DBusServerUnix_1gaec00cdf4977b9bd33621df684406a779" compoundref="dbus-server-unix_8c" startline="54" endline="214">_dbus_server_listen_platform_specific</referencedby>
        <referencedby refid="group__DBusServerUnix_1ga21ce093bda6ce6c7f94d1d894b6b4358" compoundref="dbus-server-unix_8c" startline="225" endline="298">_dbus_server_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusServerLaunchd_1ga5d09a40275e9a28d35ef3474875487a2" compoundref="dbus-server-launchd_8c" startline="64" endline="207">_dbus_server_new_for_launchd</referencedby>
        <referencedby refid="group__DBusServerSocket_1ga047d05c427e9a1fc5823fdfdcec5c5f6" compoundref="dbus-server-socket_8c" startline="388" endline="508">_dbus_server_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1gafa79c1113fa75419dcc5ee4290e06608" compoundref="dbus-sysdeps-util-unix_8c" startline="1026" endline="1065">_dbus_string_get_dirname</referencedby>
        <referencedby refid="group__DBusFile_1ga2adba123fde18c9d1d9eaf1347980d57" compoundref="dbus-file-unix_8c" startline="164" endline="317">_dbus_string_save_to_file</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gada3df30a229b4d29ccf30af83bd88fcc" compoundref="dbus-transport-unix_8c" startline="54" endline="108">_dbus_transport_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusTransportSocket_1ga166dbf1d38f06321025408167d214860" compoundref="dbus-transport-socket_8c" startline="1305" endline="1373">_dbus_transport_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga31ec42cef2d15ca358e737bb5f19c5cf" compoundref="dbus-sysdeps-util-unix_8c" startline="540" endline="573">_dbus_user_at_console</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga123620ec5ce2b881786588121d6a03fd" compoundref="dbus-sysdeps-util-unix_8c" startline="230" endline="295">_dbus_write_pid_to_file_and_pipe</referencedby>
        <referencedby refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="420">dbus_set_error</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gac33cd9f66e1dc665f92f0478b3170e23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_insert_2_aligned</definition>
        <argsstring>(DBusString *str, int insert_at, const unsigned char octets[4])</argsstring>
        <name>_dbus_string_insert_2_aligned</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>octets</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Inserts 2 bytes aligned on a 2 byte boundary with any alignment padding initialized to 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusString" kindref="compound">DBusString</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octets</parametername>
</parameternamelist>
<parameterdescription>
<para>2 bytes to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1147" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1144" bodyend="1156"/>
        <references refid="group__DBusString_1ga4661e2b10dd3da080564b1191acb7619" compoundref="dbus-string_8c" startline="1055">ASSIGN_2_OCTETS</references>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gadd296cf1e6af18cb5bec438e9d353b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_insert_4_aligned</definition>
        <argsstring>(DBusString *str, int insert_at, const unsigned char octets[4])</argsstring>
        <name>_dbus_string_insert_4_aligned</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>octets</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Inserts 4 bytes aligned on a 4 byte boundary with any alignment padding initialized to 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusString" kindref="compound">DBusString</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octets</parametername>
</parameternamelist>
<parameterdescription>
<para>4 bytes to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1171" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1168" bodyend="1180"/>
        <references refid="group__DBusString_1gae777c8fb39aef558604506d645af6420" compoundref="dbus-string_8c" startline="1059">ASSIGN_4_OCTETS</references>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga108d7d64fb88fffca31e33181cefa232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_insert_8_aligned</definition>
        <argsstring>(DBusString *str, int insert_at, const unsigned char octets[8])</argsstring>
        <name>_dbus_string_insert_8_aligned</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>octets</declname>
          <array>[8]</array>
        </param>
        <briefdescription>
<para>Inserts 8 bytes aligned on an 8 byte boundary with any alignment padding initialized to 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusString" kindref="compound">DBusString</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octets</parametername>
</parameternamelist>
<parameterdescription>
<para>8 bytes to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1195" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1192" bodyend="1206"/>
        <references refid="group__DBusString_1gad13077c6ef8f8b764611ef5ad23b4b8b" compoundref="dbus-string_8c" startline="1068">ASSIGN_8_OCTETS</references>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga267217e412c74c74dc3a3e412da5c600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_insert_alignment</definition>
        <argsstring>(DBusString *str, int *insert_at, int alignment)</argsstring>
        <name>_dbus_string_insert_alignment</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>insert_at</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Inserts padding at *insert_at such to align it to the given boundary. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes the padding to nul bytes. Sets *insert_at to the aligned position.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusString" kindref="compound">DBusString</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>location to be aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>alignment boundary (1, 2, 4, or 8) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1223" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1220" bodyend="1232"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga8d794f292831d1a7edeb971b13a2c641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_append_printf_valist</definition>
        <argsstring>(DBusString *str, const char *format, va_list args)</argsstring>
        <name>_dbus_string_append_printf_valist</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Appends a printf-style formatted string to the <ref refid="structDBusString" kindref="compound">DBusString</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>variable argument list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1247" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1244" bodyend="1274"/>
        <references refid="group__DBusSysdeps_1gaffaf8b5bb832c20a8ccb10f012920776" compoundref="dbus-sysdeps-unix_8c" startline="3027" endline="3088">_dbus_printf_string_upper_bound</references>
        <references refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" compoundref="dbus-string_8c" startline="864" endline="875">_dbus_string_lengthen</references>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusString_1gab0078cf7e0e5bd784ec6d6e0cc3923a2" compoundref="dbus-string_8c" startline="1285" endline="1297">_dbus_string_append_printf</referencedby>
        <referencedby refid="group__DBusMessage_1ga707a27881820f964e3606bc906a47978" compoundref="dbus-message_8c" startline="1398" endline="1427">dbus_message_new_error_printf</referencedby>
        <referencedby refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="420">dbus_set_error</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gab0078cf7e0e5bd784ec6d6e0cc3923a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_append_printf</definition>
        <argsstring>(DBusString *str, const char *format,...)</argsstring>
        <name>_dbus_string_append_printf</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Appends a printf-style formatted string to the <ref refid="structDBusString" kindref="compound">DBusString</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1288" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1285" bodyend="1297"/>
        <references refid="group__DBusString_1ga8d794f292831d1a7edeb971b13a2c641" compoundref="dbus-string_8c" startline="1244" endline="1274">_dbus_string_append_printf_valist</references>
        <referencedby refid="group__DBusSysdeps_1ga3551d425aba3d92e652b8809fdfe9339" compoundref="dbus-sysdeps-util-unix_8c" startline="1102" endline="1166">_dbus_command_for_pid</referencedby>
        <referencedby refid="group__DBusCredentials_1ga50047ecf44c85ecb0878a370592c1576" compoundref="dbus-credentials_8c" startline="514" endline="546">_dbus_credentials_to_string_append</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4476" endline="4758">dbus_connection_dispatch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga724656b7091b910965bd1af42d0b7bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_append_len</definition>
        <argsstring>(DBusString *str, const char *buffer, int len)</argsstring>
        <name>_dbus_string_append_len</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Appends block of bytes with the given length to a <ref refid="structDBusString" kindref="compound">DBusString</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusString" kindref="compound">DBusString</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the bytes to append </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to append </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1311" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1308" bodyend="1317"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSHA_1gaf685311db11cc2e6b38fc62d171311e4" compoundref="dbus-sha_8c" startline="456" endline="472">_dbus_sha_final</referencedby>
        <referencedby refid="group__DBusMessage_1ga54242692a860bc712bda120ccee3535f" compoundref="dbus-message_8c" startline="4604" endline="4647">dbus_message_demarshal</referencedby>
        <referencedby refid="group__DBusMessage_1gab4579a88a1a7eaf648350466f585ef8b" compoundref="dbus-message_8c" startline="2080" endline="2103">dbus_message_iter_get_signature</referencedby>
        <referencedby refid="group__DBusSignature_1ga898bbc14392cbedc087ce0be68d35c98" compoundref="dbus-signature_8c" startline="112" endline="132">dbus_signature_iter_get_signature</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaa6ecf36e70263659f921a4ef0335db12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_append_byte</definition>
        <argsstring>(DBusString *str, unsigned char byte)</argsstring>
        <name>_dbus_string_append_byte</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>Appends a single byte to the string, returning <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to append </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1330" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1328" bodyend="1339"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusAddressInternals_1ga1ecc2f460303cd70c34e7667e8b12b37" compoundref="dbus-address_8c" startline="104" endline="141">_dbus_address_append_escaped</referencedby>
        <referencedby refid="group__DBusSysdeps_1gae3a3fdc0c6001e367584bb016aca495d" compoundref="dbus-sysdeps-unix_8c" startline="2598" endline="2625">_dbus_concat_dir_and_file</referencedby>
        <referencedby refid="group__DBusString_1gac3b78e2cb63fb37fbff8d7e647ddfa5a" compoundref="dbus-string_8c" startline="2514" endline="2535">_dbus_string_append_byte_as_hex</referencedby>
        <referencedby refid="group__DBusString_1ga0a8c20d855f9ddc05718b9e2ac0e33d8" compoundref="dbus-string_8c" startline="2598" endline="2723">_dbus_string_hex_decode</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga94bc67f1117a2e5dfdfde3ce574dc37c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void delete</definition>
        <argsstring>(DBusRealString *real, int start, int len)</argsstring>
        <name>delete</name>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>real</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1418" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1415" bodyend="1425"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga7e0e164ad5bb094e5ccad9edc7ae4235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_delete</definition>
        <argsstring>(DBusString *str, int start, int len)</argsstring>
        <name>_dbus_string_delete</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Deletes a segment of a <ref refid="structDBusString" kindref="compound">DBusString</ref> with length len starting at start. </para>        </briefdescription>
        <detaileddescription>
<para>(Hint: to clear an entire string, setting length to 0 with <ref refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" kindref="member">_dbus_string_set_length()</ref> is easier.)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusString" kindref="compound">DBusString</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start deleting </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to delete </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1440" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1437" bodyend="1448"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <referencedby refid="group__DBusAuth_1gaed9f7f1d3289a0ae2fea2204729ac01f" compoundref="dbus-auth_8c" startline="2500" endline="2510">_dbus_auth_bytes_sent</referencedby>
        <referencedby refid="group__DBusMarshal_1gacabc7d2698ec08845d1af23f3409a7a9" compoundref="dbus-marshal-header_8c" startline="516" endline="638">_dbus_header_create</referencedby>
        <referencedby refid="group__DBusString_1gaa92c6ab2c5e24cbefef0a3f3fc76f98b" compoundref="dbus-string_8c" startline="2276" endline="2288">_dbus_string_chop_white</referencedby>
        <referencedby refid="group__DBusMarshal_1ga004da084963a3a74589b28611b9d8398" compoundref="dbus-marshal-recursive_8c" startline="2662" endline="2704">_dbus_type_writer_write_reader_partial</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga133ae0ed1ea75bb8ee777ba063c20bf4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t copy</definition>
        <argsstring>(DBusRealString *source, int start, int len, DBusRealString *dest, int insert_at)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structDBusRealString" kindref="compound">DBusRealString</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1456" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1451" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_move</definition>
        <argsstring>(DBusString *source, int start, DBusString *dest, int insert_at)</argsstring>
        <name>_dbus_string_move</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <briefdescription>
<para>Moves the end of one string into another string. </para>        </briefdescription>
        <detaileddescription>
<para>Both strings must be initialized, valid strings.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to chop off the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where to move the chopped-off part of source string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1507" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1503" bodyend="1514"/>
        <references refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" compoundref="dbus-string_8c" startline="1555" endline="1608">_dbus_string_move_len</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <referencedby refid="group__DBusString_1ga0a8c20d855f9ddc05718b9e2ac0e33d8" compoundref="dbus-string_8c" startline="2598" endline="2723">_dbus_string_hex_decode</referencedby>
        <referencedby refid="group__DBusString_1gaabb4873f436e015944a33cd1e3815cc9" compoundref="dbus-string_8c" startline="2548" endline="2585">_dbus_string_hex_encode</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga3c10f0d1bcaa3b450025b9c6a8b901d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_copy</definition>
        <argsstring>(const DBusString *source, int start, DBusString *dest, int insert_at)</argsstring>
        <name>_dbus_string_copy</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" kindref="member">_dbus_string_move()</ref>, but does not delete the section of the source string that&apos;s copied to the dest string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start copying the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where to place the copied part of source string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1531" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1527" bodyend="1538"/>
        <references refid="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" compoundref="dbus-string_8c" startline="1479">DBUS_STRING_COPY_PREAMBLE</references>
        <referencedby refid="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" compoundref="dbus-sysdeps-unix_8c" startline="3844" endline="3905">_dbus_append_keyring_directory_for_credentials</referencedby>
        <referencedby refid="group__DBusAuth_1ga7eb40f71c0ede79f954bcb2c001c8502" compoundref="dbus-auth_8c" startline="2683" endline="2704">_dbus_auth_decode_data</referencedby>
        <referencedby refid="group__DBusAuth_1ga0d59bcf62c098cdfb95f610cdfd12690" compoundref="dbus-auth_8c" startline="2620" endline="2641">_dbus_auth_encode_data</referencedby>
        <referencedby refid="group__DBusAuth_1ga302e454600ae0e1aa27193d4b0a86385" compoundref="dbus-auth_8c" startline="2247" endline="2283">_dbus_auth_server_new</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3551d425aba3d92e652b8809fdfe9339" compoundref="dbus-sysdeps-util-unix_8c" startline="1102" endline="1166">_dbus_command_for_pid</referencedby>
        <referencedby refid="group__DBusSysdeps_1gae3a3fdc0c6001e367584bb016aca495d" compoundref="dbus-sysdeps-unix_8c" startline="2598" endline="2625">_dbus_concat_dir_and_file</referencedby>
        <referencedby refid="group__DBusMarshal_1ga0d5aad82f8bf5a314dcf3f70930e254b" compoundref="dbus-marshal-header_8c" startline="479" endline="498">_dbus_header_copy</referencedby>
        <referencedby refid="group__DBusKeyring_1ga6dad1720cf97ca6017c39330bec8d09f" compoundref="dbus-keyring_8c" startline="709" endline="838">_dbus_keyring_new_for_credentials</referencedby>
        <referencedby refid="group__DBusFile_1ga2adba123fde18c9d1d9eaf1347980d57" compoundref="dbus-file-unix_8c" startline="164" endline="317">_dbus_string_save_to_file</referencedby>
        <referencedby refid="group__DBusMessage_1ga4bed3858b3b48ec7c86d9fc56a6ce372" compoundref="dbus-message_8c" startline="1443" endline="1511">dbus_message_copy</referencedby>
        <referencedby refid="group__DBusMessage_1ga3f90a918ada328450fcfe9ac403b8807" compoundref="dbus-message_8c" startline="4542" endline="4589">dbus_message_marshal</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_move_len</definition>
        <argsstring>(DBusString *source, int start, int len, DBusString *dest, int insert_at)</argsstring>
        <name>_dbus_string_move_len</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" kindref="member">_dbus_string_move()</ref>, but can move a segment from the middle of the source string. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000049"><xreftitle>Todo</xreftitle><xrefdescription><para>this doesn&apos;t do anything with max_length field. we should probably just kill the max_length field though.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte of source string to move </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment to move </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where to move the bytes from the source string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1561" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1555" bodyend="1608"/>
        <references refid="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" compoundref="dbus-string_8c" startline="1479">DBUS_STRING_COPY_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" compoundref="dbus-string_8c" startline="1503" endline="1514">_dbus_string_move</referencedby>
        <referencedby refid="group__DBusString_1ga8b7fc22e6738173e1b2cef4b91b9c3c1" compoundref="dbus-string_8c" startline="2196" endline="2231">_dbus_string_pop_line</referencedby>
        <referencedby refid="group__DBusString_1ga5d293b49b6afbbd74069d0823acce6b5" compoundref="dbus-string_8c" startline="1697" endline="1724">_dbus_string_split_on_byte</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaf5f13bc7ac7a623516930d26ae2589bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_copy_len</definition>
        <argsstring>(const DBusString *source, int start, int len, DBusString *dest, int insert_at)</argsstring>
        <name>_dbus_string_copy_len</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="group__DBusString_1ga3c10f0d1bcaa3b450025b9c6a8b901d7" kindref="member">_dbus_string_copy()</ref>, but can copy a segment from the middle of the source string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start copying the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where to place the copied segment of source string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1627" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1622" bodyend="1636"/>
        <references refid="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" compoundref="dbus-string_8c" startline="1479">DBUS_STRING_COPY_PREAMBLE</references>
        <referencedby refid="group__DBusMarshal_1ga0c3a3f95d9a53b91a0cd0b260196685b" compoundref="dbus-marshal-header_8c" startline="954" endline="1172">_dbus_header_load</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusSysdeps_1gafa79c1113fa75419dcc5ee4290e06608" compoundref="dbus-sysdeps-util-unix_8c" startline="1026" endline="1065">_dbus_string_get_dirname</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gafe7921a92467cdefaa0a7829d6cf260b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_replace_len</definition>
        <argsstring>(const DBusString *source, int start, int len, DBusString *dest, int replace_at, int replace_len)</argsstring>
        <name>_dbus_string_replace_len</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>replace_at</declname>
        </param>
        <param>
          <type>int</type>
          <declname>replace_len</declname>
        </param>
        <briefdescription>
<para>Replaces a segment of dest string with a segment of source string. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000050"><xreftitle>Todo</xreftitle><xrefdescription><para>optimize the case where the two lengths are the same, and avoid memmoving the data in the trailing part of the string twice.</para></xrefdescription></xrefsect></para><para><xrefsect id="todo_1_todo000051"><xreftitle>Todo</xreftitle><xrefdescription><para>avoid inserting the source into dest, then deleting the replaced chunk of dest (which creates a potentially large intermediate string). Instead, extend the replaced chunk of dest with padding to the same size as the source chunk, then copy in the source bytes.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start copying the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replace_at</parametername>
</parameternamelist>
<parameterdescription>
<para>start of segment of dest string to replace </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replace_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment of dest string to replace </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1666" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1660" bodyend="1682"/>
        <references refid="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" compoundref="dbus-string_8c" startline="1479">DBUS_STRING_COPY_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusAuth_1gad6d64040b2cf1c91f808a1f31f7ff2f0" compoundref="dbus-auth_8c" startline="2776" endline="2781">_dbus_auth_set_context</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga5d293b49b6afbbd74069d0823acce6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_split_on_byte</definition>
        <argsstring>(DBusString *source, unsigned char byte, DBusString *tail)</argsstring>
        <name>_dbus_string_split_on_byte</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>byte</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
<para>Looks for the first occurance of a byte, deletes that byte, and moves everything after the byte to the beginning of a separate string. </para>        </briefdescription>
        <detaileddescription>
<para>Both strings must be initialized, valid strings.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte to remove and split the string at </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tail</parametername>
</parameternamelist>
<parameterdescription>
<para>the split off string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory or if byte could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1700" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1697" bodyend="1724"/>
        <references refid="group__DBusString_1ga5fe47873b2838339107c3e1f03d1a703" compoundref="dbus-string_8c" startline="1891" endline="1899">_dbus_string_find</references>
        <references refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" compoundref="dbus-string_8c" startline="1555" endline="1608">_dbus_string_move_len</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="906" endline="913">_dbus_string_set_length</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga5fe47873b2838339107c3e1f03d1a703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_find</definition>
        <argsstring>(const DBusString *str, int start, const char *substr, int *found)</argsstring>
        <name>_dbus_string_find</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>substr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>found</declname>
        </param>
        <briefdescription>
<para>Finds the given substring in the string, returning <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> and filling in the byte index where the substring was found, if it was found. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if the substring wasn&apos;t found. Sets *start to the length of the string if the substring is not found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start looking </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>substr</parametername>
</parameternamelist>
<parameterdescription>
<para>the substring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>found</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for where it was found, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1895" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1891" bodyend="1899"/>
        <references refid="group__DBusString_1gaf2281731c3119f946726680242a5ae02" compoundref="dbus-string_8c" startline="1984" endline="2039">_dbus_string_find_to</references>
        <referencedby refid="group__DBusKeyring_1ga5bbeeef1ba831a89d7f0f211e886e7c2" compoundref="dbus-keyring_8c" startline="853" endline="910">_dbus_keyring_validate_context</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusString_1ga5d293b49b6afbbd74069d0823acce6b5" compoundref="dbus-string_8c" startline="1697" endline="1724">_dbus_string_split_on_byte</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga3c98d1913e3ba4deb8eda60b2e262fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_find_eol</definition>
        <argsstring>(const DBusString *str, int start, int *found, int *found_len)</argsstring>
        <name>_dbus_string_find_eol</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>found</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>found_len</declname>
        </param>
        <briefdescription>
<para>Finds end of line (&quot;\r\n&quot; or &quot;\n&quot;) in the string, returning <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> and filling in the byte index where the eol string was found, if it was found. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if eol wasn&apos;t found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start looking </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>found</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for where eol was found or string length otherwise </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>found_len</parametername>
</parameternamelist>
<parameterdescription>
<para>return length of found eol string or zero otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1918" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1914" bodyend="1965"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusString_1ga8b7fc22e6738173e1b2cef4b91b9c3c1" compoundref="dbus-string_8c" startline="2196" endline="2231">_dbus_string_pop_line</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaf2281731c3119f946726680242a5ae02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_find_to</definition>
        <argsstring>(const DBusString *str, int start, int end, const char *substr, int *found)</argsstring>
        <name>_dbus_string_find_to</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>substr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>found</declname>
        </param>
        <briefdescription>
<para>Finds the given substring in the string, up to a certain position, returning <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> and filling in the byte index where the substring was found, if it was found. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if the substring wasn&apos;t found. Sets *start to the length of the string if the substring is not found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start looking </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>where to stop looking </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>substr</parametername>
</parameternamelist>
<parameterdescription>
<para>the substring </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>found</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for where it was found, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="1989" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="1984" bodyend="2039"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusString_1ga5fe47873b2838339107c3e1f03d1a703" compoundref="dbus-string_8c" startline="1891" endline="1899">_dbus_string_find</referencedby>
        <referencedby refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga677ddb4246c7e7f67ed3145dc3c1c96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_find_blank</definition>
        <argsstring>(const DBusString *str, int start, int *found)</argsstring>
        <name>_dbus_string_find_blank</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>found</declname>
        </param>
        <briefdescription>
<para>Finds a blank (space or tab) in the string. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if found, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> otherwise. If a blank is not found sets *found to the length of the string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>byte index to start looking </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>found</parametername>
</parameternamelist>
<parameterdescription>
<para>place to store the location of the first blank </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if a blank was found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2055" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2052" bodyend="2079"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusKeyring_1ga5bbeeef1ba831a89d7f0f211e886e7c2" compoundref="dbus-keyring_8c" startline="853" endline="910">_dbus_keyring_validate_context</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga5698b163289be0066cf10c0f1caf877a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_skip_blank</definition>
        <argsstring>(const DBusString *str, int start, int *end)</argsstring>
        <name>_dbus_string_skip_blank</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Skips blanks from start, storing the first non-blank in *end (blank is space or tab). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the first non-blank byte index </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2093" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2090" bodyend="2112"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusStringInternals_1ga8f488964e430c0ae6a1a4204e0098dfe" compoundref="dbus-string-private_8h" startline="114">DBUS_IS_ASCII_BLANK</references>
        <references refid="group__DBusStringInternals_1ga9c88845804be152df28b81d7cad5673a" compoundref="dbus-string-private_8h" startline="120">DBUS_IS_ASCII_WHITE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga8600259d71a4adc14ab4558a9d2a0f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_skip_white</definition>
        <argsstring>(const DBusString *str, int start, int *end)</argsstring>
        <name>_dbus_string_skip_white</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Skips whitespace from start, storing the first non-whitespace in *end. </para>        </briefdescription>
        <detaileddescription>
<para>(whitespace is space, tab, newline, CR).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the first non-whitespace byte index </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2127" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2124" bodyend="2146"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusStringInternals_1ga9c88845804be152df28b81d7cad5673a" compoundref="dbus-string-private_8h" startline="120">DBUS_IS_ASCII_WHITE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <referencedby refid="group__DBusString_1gaa92c6ab2c5e24cbefef0a3f3fc76f98b" compoundref="dbus-string_8c" startline="2276" endline="2288">_dbus_string_chop_white</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga578bb88acec5520825f2ba792cad7938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_skip_white_reverse</definition>
        <argsstring>(const DBusString *str, int end, int *start)</argsstring>
        <name>_dbus_string_skip_white_reverse</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Skips whitespace from end, storing the start index of the trailing whitespace in *start. </para>        </briefdescription>
        <detaileddescription>
<para>(whitespace is space, tab, newline, CR).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start scanning backward </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to store the start of whitespace chars </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2160" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2157" bodyend="2178"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusStringInternals_1ga9c88845804be152df28b81d7cad5673a" compoundref="dbus-string-private_8h" startline="120">DBUS_IS_ASCII_WHITE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <referencedby refid="group__DBusString_1gaa92c6ab2c5e24cbefef0a3f3fc76f98b" compoundref="dbus-string_8c" startline="2276" endline="2288">_dbus_string_chop_white</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga8b7fc22e6738173e1b2cef4b91b9c3c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_pop_line</definition>
        <argsstring>(DBusString *source, DBusString *dest)</argsstring>
        <name>_dbus_string_pop_line</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Assigns a newline-terminated or \r\n-terminated line from the front of the string to the given dest string. </para>        </briefdescription>
        <detaileddescription>
<para>The dest string&apos;s previous contents are deleted. If the source string contains no newline, moves the entire source string to the dest string.</para><para><xrefsect id="todo_1_todo000052"><xreftitle>Todo</xreftitle><xrefdescription><para>owen correctly notes that this is a stupid function (it was written purely for test code, e.g. dbus-message-builder.c). Probably should be enforced as test code only with ifdef DBUS_BUILD_TESTS</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination string (contents are replaced) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory, or source has length 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2198" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2196" bodyend="2231"/>
        <references refid="group__DBusString_1ga3c98d1913e3ba4deb8eda60b2e262fdb" compoundref="dbus-string_8c" startline="1914" endline="1965">_dbus_string_find_eol</references>
        <references refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" compoundref="dbus-string_8c" startline="1555" endline="1608">_dbus_string_move_len</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="906" endline="913">_dbus_string_set_length</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaa92c6ab2c5e24cbefef0a3f3fc76f98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_chop_white</definition>
        <argsstring>(DBusString *str)</argsstring>
        <name>_dbus_string_chop_white</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Deletes leading and trailing whitespace. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2277" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2276" bodyend="2288"/>
        <references refid="group__DBusString_1ga7e0e164ad5bb094e5ccad9edc7ae4235" compoundref="dbus-string_8c" startline="1437" endline="1448">_dbus_string_delete</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="906" endline="913">_dbus_string_set_length</references>
        <references refid="group__DBusString_1ga8600259d71a4adc14ab4558a9d2a0f7d" compoundref="dbus-string_8c" startline="2124" endline="2146">_dbus_string_skip_white</references>
        <references refid="group__DBusString_1ga578bb88acec5520825f2ba792cad7938" compoundref="dbus-string_8c" startline="2157" endline="2178">_dbus_string_skip_white_reverse</references>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="265" endline="376">_dbus_split_paths_and_append</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gad79c34af55b58f0e8b81ecf11b8694bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_equal</definition>
        <argsstring>(const DBusString *a, const DBusString *b)</argsstring>
        <name>_dbus_string_equal</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Tests two <ref refid="structDBusString" kindref="compound">DBusString</ref> for equality. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000053"><xreftitle>Todo</xreftitle><xrefdescription><para>memcmp is probably faster</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>first string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>second string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if equal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2302" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2300" bodyend="2327"/>
        <references refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" compoundref="dbus-string-private_8h" startline="78">DBUS_GENERIC_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusErrors_1ga48515c580199514026542fe053ef1887" compoundref="dbus-errors_8c" startline="302" endline="320">dbus_error_has_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gacf39727ae9eb411b0c4cb3b891588fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_equal_len</definition>
        <argsstring>(const DBusString *a, const DBusString *b, int len)</argsstring>
        <name>_dbus_string_equal_len</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Tests two <ref refid="structDBusString" kindref="compound">DBusString</ref> for equality up to the given length. </para>        </briefdescription>
        <detaileddescription>
<para>The strings may be shorter than the given length.</para><para><xrefsect id="todo_1_todo000054"><xreftitle>Todo</xreftitle><xrefdescription><para>write a unit test</para></xrefdescription></xrefsect></para><para><xrefsect id="todo_1_todo000055"><xreftitle>Todo</xreftitle><xrefdescription><para>memcmp is probably faster</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>first string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>second string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum length to look at </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if equal for the given number of bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2346" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2343" bodyend="2372"/>
        <references refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" compoundref="dbus-string-private_8h" startline="78">DBUS_GENERIC_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga2095c2a797ae245521a7588b32279110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_equal_substring</definition>
        <argsstring>(const DBusString *a, int a_start, int a_len, const DBusString *b, int b_start)</argsstring>
        <name>_dbus_string_equal_substring</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_len</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b_start</declname>
        </param>
        <briefdescription>
<para>Tests two sub-parts of two <ref refid="structDBusString" kindref="compound">DBusString</ref> for equality. </para>        </briefdescription>
        <detaileddescription>
<para>The specified range of the first string must exist; the specified start position of the second string must exist.</para><para><xrefsect id="todo_1_todo000056"><xreftitle>Todo</xreftitle><xrefdescription><para>write a unit test</para></xrefdescription></xrefsect></para><para><xrefsect id="todo_1_todo000057"><xreftitle>Todo</xreftitle><xrefdescription><para>memcmp is probably faster</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>first string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start substring in first string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of substring in first string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>second string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b_start</parametername>
</parameternamelist>
<parameterdescription>
<para>where to start substring in second string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the two substrings are equal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2396" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2391" bodyend="2429"/>
        <references refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" compoundref="dbus-string-private_8h" startline="78">DBUS_GENERIC_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga84f39f1bf398697920637d2982248c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_equal_c_str</definition>
        <argsstring>(const DBusString *a, const char *c_str)</argsstring>
        <name>_dbus_string_equal_c_str</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>c_str</declname>
        </param>
        <briefdescription>
<para>Checks whether a string is equal to a C string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_str</parametername>
</parameternamelist>
<parameterdescription>
<para>the C string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if equal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2441" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2439" bodyend="2465"/>
        <references refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" compoundref="dbus-string-private_8h" startline="78">DBUS_GENERIC_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusAddress_1gae6f014689b49099e835b1f97d032034e" compoundref="dbus-address_8c" startline="244" endline="264">dbus_address_entry_get_value</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gac3b78e2cb63fb37fbff8d7e647ddfa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_append_byte_as_hex</definition>
        <argsstring>(DBusString *str, int byte)</argsstring>
        <name>_dbus_string_append_byte_as_hex</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>Appends a two-character hex digit to a string, where the hex digit has the value of the given byte. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>the byte </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2516" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2514" bodyend="2535"/>
        <references refid="group__DBusString_1gaa6ecf36e70263659f921a4ef0335db12" compoundref="dbus-string_8c" startline="1328" endline="1339">_dbus_string_append_byte</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="906" endline="913">_dbus_string_set_length</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusAddressInternals_1ga1ecc2f460303cd70c34e7667e8b12b37" compoundref="dbus-address_8c" startline="104" endline="141">_dbus_address_append_escaped</referencedby>
        <referencedby refid="group__DBusString_1gaabb4873f436e015944a33cd1e3815cc9" compoundref="dbus-string_8c" startline="2548" endline="2585">_dbus_string_hex_encode</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaabb4873f436e015944a33cd1e3815cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_hex_encode</definition>
        <argsstring>(const DBusString *source, int start, DBusString *dest, int insert_at)</argsstring>
        <name>_dbus_string_hex_encode</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <briefdescription>
<para>Encodes a string in hex, the way MD5 and SHA-1 are usually encoded. </para>        </briefdescription>
        <detaileddescription>
<para>(Each byte is two hex digits.)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to encode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>byte index to start encoding </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>string where encoded data should be placed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where to place encoded data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if encoding was successful, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory etc. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2552" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2548" bodyend="2585"/>
        <references refid="group__DBusString_1gac3b78e2cb63fb37fbff8d7e647ddfa5a" compoundref="dbus-string_8c" startline="2514" endline="2535">_dbus_string_append_byte_as_hex</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="263" endline="273">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="176" endline="179">_dbus_string_init</references>
        <references refid="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" compoundref="dbus-string_8c" startline="1503" endline="1514">_dbus_string_move</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusKeyring_1ga6adfb998247ab4d0c1d5652f59c354e4" compoundref="dbus-keyring_8c" startline="1007" endline="1022">_dbus_keyring_get_hex_key</referencedby>
        <referencedby refid="group__DBusSHA_1ga4278fb9df967943834c4ad6332f2c28b" compoundref="dbus-sha_8c" startline="483" endline="510">_dbus_sha_compute</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaf08364813376bd2d8f455d435d85323e" compoundref="dbus-internals_8c" startline="613" endline="619">_dbus_uuid_encode</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga0a8c20d855f9ddc05718b9e2ac0e33d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_hex_decode</definition>
        <argsstring>(const DBusString *source, int start, int *end_return, DBusString *dest, int insert_at)</argsstring>
        <name>_dbus_string_hex_decode</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>end_return</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>insert_at</declname>
        </param>
        <briefdescription>
<para>Decodes a string from hex encoding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to decode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>byte index to start decode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_return</parametername>
</parameternamelist>
<parameterdescription>
<para>return location of the end of the hex data, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>string where decoded data should be placed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insert_at</parametername>
</parameternamelist>
<parameterdescription>
<para>where to place decoded data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if decoding was successful, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2603" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2598" bodyend="2723"/>
        <references refid="group__DBusString_1gaa6ecf36e70263659f921a4ef0335db12" compoundref="dbus-string_8c" startline="1328" endline="1339">_dbus_string_append_byte</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="263" endline="273">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="176" endline="179">_dbus_string_init</references>
        <references refid="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" compoundref="dbus-string_8c" startline="1503" endline="1514">_dbus_string_move</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1gaa4324cd667e21beb31a5481cb0c12b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_validate_ascii</definition>
        <argsstring>(const DBusString *str, int start, int len)</argsstring>
        <name>_dbus_string_validate_ascii</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Checks that the given range of the string is valid ASCII with no nul bytes. </para>        </briefdescription>
        <detaileddescription>
<para>If the given range is not entirely contained in the string, returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>.</para><para><xrefsect id="todo_1_todo000058"><xreftitle>Todo</xreftitle><xrefdescription><para>this is inconsistent with most of <ref refid="structDBusString" kindref="compound">DBusString</ref> in that it allows a start,len range that extends past the string end.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte index to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the byte range exists and is all valid ASCII </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2742" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2739" bodyend="2764"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga709ce349c6ee05263850444fb4e0177d" compoundref="dbus-sysdeps_8c" startline="870" endline="896">_dbus_generate_random_ascii</referencedby>
        <referencedby refid="group__DBusKeyring_1ga5bbeeef1ba831a89d7f0f211e886e7c2" compoundref="dbus-keyring_8c" startline="853" endline="910">_dbus_keyring_validate_context</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga698f4b0299e6c6a707fd7e9c14915f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_tolower_ascii</definition>
        <argsstring>(const DBusString *str, int start, int len)</argsstring>
        <name>_dbus_string_tolower_ascii</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Converts the given range of the string to lower case. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte index to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2777" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2774" bodyend="2795"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga9c959f7d18ff21c5ae51846c6ba065f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_toupper_ascii</definition>
        <argsstring>(const DBusString *str, int start, int len)</argsstring>
        <name>_dbus_string_toupper_ascii</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Converts the given range of the string to upper case. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte index to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2808" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2805" bodyend="2826"/>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga65f0f04b7c9371406fc87343f691e8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_validate_utf8</definition>
        <argsstring>(const DBusString *str, int start, int len)</argsstring>
        <name>_dbus_string_validate_utf8</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Checks that the given range of the string is valid UTF-8. </para>        </briefdescription>
        <detaileddescription>
<para>If the given range is not entirely contained in the string, returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>. If the string contains any nul bytes in the given range, returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>. If the start and start+len are not on character boundaries, returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>.</para><para><xrefsect id="todo_1_todo000059"><xreftitle>Todo</xreftitle><xrefdescription><para>this is inconsistent with most of <ref refid="structDBusString" kindref="compound">DBusString</ref> in that it allows a start,len range that extends past the string end.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte index to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the byte range exists and is all valid UTF-8 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2847" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2844" bodyend="2926"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <references refid="group__DBusString_1ga25f0a93fc023fa0eec07ac1e32011e89" compoundref="dbus-string_8c" startline="1821">UNICODE_VALID</references>
        <references refid="group__DBusString_1ga30614080229a4fb63460ffdc8ab484fb" compoundref="dbus-string_8c" startline="1735">UTF8_COMPUTE</references>
        <references refid="group__DBusString_1gab5b4b316a69f78611a14e6b1fd091992" compoundref="dbus-string_8c" startline="1792">UTF8_GET</references>
        <references refid="group__DBusString_1ga9691ff5386e218870299de1d9e77ceea" compoundref="dbus-string_8c" startline="1776">UTF8_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga199d0fc00ee3cd0300a1b3870d7986a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_validate_nul</definition>
        <argsstring>(const DBusString *str, int start, int len)</argsstring>
        <name>_dbus_string_validate_nul</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Checks that the given range of the string is all nul bytes. </para>        </briefdescription>
        <detaileddescription>
<para>If the given range is not entirely contained in the string, returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>.</para><para><xrefsect id="todo_1_todo000060"><xreftitle>Todo</xreftitle><xrefdescription><para>this is inconsistent with most of <ref refid="structDBusString" kindref="compound">DBusString</ref> in that it allows a start,len range that extends past the string end.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte index to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the byte range exists and is all nul bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2945" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2942" bodyend="2966"/>
        <references refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" compoundref="dbus-string-private_8h" startline="107">DBUS_CONST_STRING_PREAMBLE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" compoundref="dbus-string-private_8h" startline="46">DBusRealString::len</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusMarshal_1ga0c3a3f95d9a53b91a0cd0b260196685b" compoundref="dbus-marshal-header_8c" startline="954" endline="1172">_dbus_header_load</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusString_1ga9385fd0de31b3f5f4f8baa96bad3fac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_string_zero</definition>
        <argsstring>(DBusString *str)</argsstring>
        <name>_dbus_string_zero</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Clears all allocated bytes in the string to zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" line="2975" bodyfile="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c" bodystart="2974" bodyend="2979"/>
        <references refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" compoundref="dbus-string-private_8h" startline="52">DBusRealString::align_offset</references>
        <references refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" compoundref="dbus-string-private_8h" startline="47">DBusRealString::allocated</references>
        <references refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" compoundref="dbus-string-private_8h" startline="86">DBUS_STRING_PREAMBLE</references>
        <references refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" compoundref="dbus-string-private_8h" startline="45">DBusRealString::str</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>C;<sp/>c-file-style:<sp/>&quot;gnu&quot;;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>dbus-string.c<sp/>String<sp/>utility<sp/>class<sp/>(internal<sp/>to<sp/>D-Bus<sp/>implementation)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2002,<sp/>2003,<sp/>2004,<sp/>2005<sp/>Red<sp/>Hat,<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2006<sp/>Ralf<sp/>Habacker<sp/>&lt;ralf.habacker@freenet.de&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Academic<sp/>Free<sp/>License<sp/>version<sp/>2.1</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-internals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>we<sp/>allow<sp/>a<sp/>system<sp/>header<sp/>here,<sp/>for<sp/>speed/convenience<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>vsnprintf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DBUS_CAN_USE_DBUS_STRING_PRIVATE<sp/>1</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-string-private.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-marshal-basic.h&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>probably<sp/>should<sp/>be<sp/>removed<sp/>by<sp/>moving<sp/>the<sp/>usage<sp/>of<sp/>DBUS_TYPE</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>into<sp/>the<sp/>marshaling-related<sp/>files</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>DBUS_VA_COPY<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-sysdeps.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">fixup_alignment<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aligned;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*real_block;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_align_offset;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>have<sp/>to<sp/>have<sp/>extra<sp/>space<sp/>in<sp/>real-&gt;allocated<sp/>for<sp/>the<sp/>align<sp/>offset<sp/>and<sp/>nul<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>&lt;=<sp/>real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref><sp/>-<sp/>_DBUS_STRING_ALLOCATION_PADDING);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>old_align_offset<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>real_block<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>-<sp/>old_align_offset;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>aligned<sp/>=<sp/>_DBUS_ALIGN_ADDRESS<sp/>(real_block,<sp/>8);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref><sp/>=<sp/>aligned<sp/>-<sp/>real_block;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>=<sp/>aligned;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_align_offset<sp/>!=<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here<sp/>comes<sp/>the<sp/>suck<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove<sp/>(real_block<sp/>+<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_block<sp/>+<sp/>old_align_offset,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref><sp/>&lt;<sp/>8);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(_DBUS_ALIGN_ADDRESS<sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>,<sp/>8)<sp/>==<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">undo_alignment<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove<sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="132" refid="group__DBusString_1ga569b784beea1b4fa98f05d27e6dd0e72" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga569b784beea1b4fa98f05d27e6dd0e72" kindref="member" tooltip="Initializes a string that can be up to the given allocation size before it has to realloc...">_dbus_string_init_preallocated</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocate_size)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(str<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref>)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>real<sp/>=<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>str;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>It&apos;s<sp/>very<sp/>important<sp/>not<sp/>to<sp/>touch<sp/>anything</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>*<sp/>other<sp/>than<sp/>real-&gt;str<sp/>if<sp/>we&apos;re<sp/>going<sp/>to<sp/>fail,</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>*<sp/>since<sp/>we<sp/>also<sp/>use<sp/>this<sp/>function<sp/>to<sp/>reset</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/>*<sp/>an<sp/>existing<sp/>string,<sp/>e.g.<sp/>in<sp/>_dbus_string_steal_data()</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>=<sp/><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member" tooltip="Allocates the given number of bytes, as with standard malloc().">dbus_malloc</ref><sp/>(_DBUS_STRING_ALLOCATION_PADDING<sp/>+<sp/>allocate_size);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref><sp/>=<sp/>_DBUS_STRING_ALLOCATION_PADDING<sp/>+<sp/>allocate_size;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref><sp/>=<sp/><ref refid="group__DBusStringInternals_1gaff1c3814294a9db8ea968d159e8fd092" kindref="member" tooltip="This is the maximum max length (and thus also the maximum length) of a DBusString.">_DBUS_STRING_MAX_MAX_LENGTH</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a79675cfbe443cc779e3c668fbcb99578" kindref="member" tooltip="String data is not owned by DBusString.">constant</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a865d892d7cacedd598b828c15c5815c5" kindref="member" tooltip="DBusString has been locked and can&amp;#39;t be changed.">locked</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a062f6b092cc6c4baf01f2a820e2ba5ad" kindref="member" tooltip="DBusString is invalid (e.g.">invalid</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>fixup_alignment<sp/>(real);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="176" refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" kindref="member" tooltip="Initializes a string.">_dbus_string_init</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusString_1ga569b784beea1b4fa98f05d27e6dd0e72" kindref="member" tooltip="Initializes a string that can be up to the given allocation size before it has to realloc...">_dbus_string_init_preallocated</ref><sp/>(str,<sp/>0);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>The<sp/>max<sp/>length<sp/>thing<sp/>is<sp/>sort<sp/>of<sp/>a<sp/>historical<sp/>artifact</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>from<sp/>a<sp/>feature<sp/>that<sp/>turned<sp/>out<sp/>to<sp/>be<sp/>dumb;<sp/>perhaps</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>we<sp/>should<sp/>purge<sp/>it<sp/>entirely.<sp/>The<sp/>problem<sp/>with</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>the<sp/>feature<sp/>is<sp/>that<sp/>it<sp/>looks<sp/>like<sp/>memory<sp/>allocation</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>failure,<sp/>but<sp/>is<sp/>not<sp/>a<sp/>transient<sp/>or<sp/>resolvable<sp/>failure.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">set_max_length<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_length)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>real<sp/>=<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>str;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref><sp/>=<sp/>max_length;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" kindref="member" tooltip="Initializes a constant string.">_dbus_string_init_const</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(value<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga6792a5c1725faa9d635d95f7a3b5bfae" kindref="member" tooltip="Initializes a constant string with a length.">_dbus_string_init_const_len</ref><sp/>(str,<sp/>value,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strlen<sp/>(value));</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="group__DBusString_1ga6792a5c1725faa9d635d95f7a3b5bfae" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga6792a5c1725faa9d635d95f7a3b5bfae" kindref="member" tooltip="Initializes a constant string with a length.">_dbus_string_init_const_len</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(str<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>==<sp/>0<sp/>||<sp/>value<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/><ref refid="group__DBusStringInternals_1gaff1c3814294a9db8ea968d159e8fd092" kindref="member" tooltip="This is the maximum max length (and thus also the maximum length) of a DBusString.">_DBUS_STRING_MAX_MAX_LENGTH</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>real<sp/>=<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>str;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>value;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref><sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>_DBUS_STRING_ALLOCATION_PADDING;<sp/></highlight><highlight class="comment">/*<sp/>a<sp/>lie,<sp/>just<sp/>to<sp/>avoid<sp/>special-case<sp/>assertions...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref><sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a79675cfbe443cc779e3c668fbcb99578" kindref="member" tooltip="String data is not owned by DBusString.">constant</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a865d892d7cacedd598b828c15c5815c5" kindref="member" tooltip="DBusString has been locked and can&amp;#39;t be changed.">locked</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a062f6b092cc6c4baf01f2a820e2ba5ad" kindref="member" tooltip="DBusString is invalid (e.g.">invalid</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>don&apos;t<sp/>require<sp/>const<sp/>strings<sp/>to<sp/>be<sp/>8-byte<sp/>aligned<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/>*<sp/>memory<sp/>is<sp/>coming<sp/>from<sp/>elsewhere.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real<sp/>=<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>str;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member" tooltip="Checks a bunch of assertions about a string object.">DBUS_GENERIC_STRING_PREAMBLE</ref><sp/>(real);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real-&gt;<ref refid="structDBusRealString_1a79675cfbe443cc779e3c668fbcb99578" kindref="member" tooltip="String data is not owned by DBusString.">constant</ref>)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member" tooltip="Frees a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_free</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a062f6b092cc6c4baf01f2a820e2ba5ad" kindref="member" tooltip="DBusString is invalid (e.g.">invalid</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="276"><highlight class="normal">compact<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_waste)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_str;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_allocated;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>waste;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>waste<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref><sp/>-<sp/>(real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>_DBUS_STRING_ALLOCATION_PADDING);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waste<sp/>&lt;=<sp/>max_waste)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>new_allocated<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>_DBUS_STRING_ALLOCATION_PADDING;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>new_str<sp/>=<sp/><ref refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" kindref="member" tooltip="Resizes a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_realloc</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>,<sp/>new_allocated);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(new_str<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>=<sp/>new_str<sp/>+<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref><sp/>=<sp/>new_allocated;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>fixup_alignment<sp/>(real);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Not<sp/>using<sp/>this<sp/>feature<sp/>at<sp/>the<sp/>moment,</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>so<sp/>marked<sp/>DBUS_BUILD_TESTS-only</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="314"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">_dbus_string_lock<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1gad9f957c4027c34a5c330822aa98b9307" kindref="member" tooltip="Checks assertions about a string object that may be locked but can&amp;#39;t be const.">DBUS_LOCKED_STRING_PREAMBLE</ref><sp/>(str);<sp/></highlight><highlight class="comment">/*<sp/>can<sp/>lock<sp/>multiple<sp/>times<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1a865d892d7cacedd598b828c15c5815c5" kindref="member" tooltip="DBusString has been locked and can&amp;#39;t be changed.">locked</ref><sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>realloc<sp/>to<sp/>avoid<sp/>excess<sp/>memory<sp/>usage,<sp/>since</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/>*<sp/>we<sp/>know<sp/>we<sp/>won&apos;t<sp/>change<sp/>the<sp/>string<sp/>further</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_WASTE<sp/>48</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>compact<sp/>(real,<sp/>MAX_WASTE);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="330"><highlight class="normal">reallocate_for_length<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_length)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_allocated;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_str;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>at<sp/>least<sp/>double<sp/>our<sp/>old<sp/>allocation<sp/>to<sp/>avoid<sp/>O(n),<sp/>avoiding</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/>*<sp/>overflow</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref><sp/>&gt;<sp/>(<ref refid="group__DBusStringInternals_1gaff1c3814294a9db8ea968d159e8fd092" kindref="member" tooltip="This is the maximum max length (and thus also the maximum length) of a DBusString.">_DBUS_STRING_MAX_MAX_LENGTH</ref><sp/>+<sp/>_DBUS_STRING_ALLOCATION_PADDING)<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>new_allocated<sp/>=<sp/><ref refid="group__DBusStringInternals_1gaff1c3814294a9db8ea968d159e8fd092" kindref="member" tooltip="This is the maximum max length (and thus also the maximum length) of a DBusString.">_DBUS_STRING_MAX_MAX_LENGTH</ref><sp/>+<sp/>_DBUS_STRING_ALLOCATION_PADDING;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>new_allocated<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref><sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>you<sp/>change<sp/>the<sp/>code<sp/>just<sp/>above<sp/>here,<sp/>run<sp/>the<sp/>tests<sp/>without</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>following<sp/>assert-only<sp/>hack<sp/>before<sp/>you<sp/>commit</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>keyed<sp/>off<sp/>asserts<sp/>in<sp/>addition<sp/>to<sp/>tests<sp/>so<sp/>when<sp/>you</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/>*<sp/>disable<sp/>asserts<sp/>to<sp/>profile,<sp/>you<sp/>don&apos;t<sp/>get<sp/>this<sp/>destroyer</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/>*<sp/>of<sp/>profiles.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_DISABLE_ASSERT</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>new_allocated<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>a<sp/>realloc<sp/>every<sp/>time<sp/>so<sp/>that<sp/>we<sp/>go</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>through<sp/>all<sp/>malloc<sp/>failure<sp/>codepaths</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!DBUS_DISABLE_ASSERT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>But<sp/>be<sp/>sure<sp/>we<sp/>always<sp/>alloc<sp/>at<sp/>least<sp/>space<sp/>for<sp/>the<sp/>new<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>new_allocated<sp/>=<sp/>MAX<sp/>(new_allocated,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_length<sp/>+<sp/>_DBUS_STRING_ALLOCATION_PADDING);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(new_allocated<sp/>&gt;=<sp/>real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref>);<sp/></highlight><highlight class="comment">/*<sp/>code<sp/>relies<sp/>on<sp/>this<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>new_str<sp/>=<sp/><ref refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" kindref="member" tooltip="Resizes a block of memory previously allocated by dbus_malloc() or dbus_malloc0().">dbus_realloc</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>,<sp/>new_allocated);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(new_str<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>))</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>=<sp/>new_str<sp/>+<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref><sp/>=<sp/>new_allocated;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>fixup_alignment<sp/>(real);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="388" refid="group__DBusString_1gac49ec5782ca606029c096124b5e43ffc" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gac49ec5782ca606029c096124b5e43ffc" kindref="member" tooltip="Compacts the string to avoid wasted memory.">_dbus_string_compact</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_waste)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compact<sp/>(real,<sp/>max_waste);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="397"><highlight class="normal">set_length<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_length)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note,<sp/>we<sp/>are<sp/>setting<sp/>the<sp/>length<sp/>not<sp/>including<sp/>nul<sp/>termination<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>exceeding<sp/>max<sp/>length<sp/>is<sp/>the<sp/>same<sp/>as<sp/>failure<sp/>to<sp/>allocate<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(new_length<sp/>&gt;<sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref>))</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_length<sp/>&gt;<sp/>(real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref><sp/>-<sp/>_DBUS_STRING_ALLOCATION_PADDING)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_DBUS_UNLIKELY<sp/>(!reallocate_for_length<sp/>(real,<sp/>new_length)))</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>=<sp/>new_length;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[new_length]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="417"><highlight class="normal">open_gap<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*dest,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>dest-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref><sp/>-<sp/>dest-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;<sp/></highlight><highlight class="comment">/*<sp/>detected<sp/>overflow<sp/>of<sp/>dest-&gt;len<sp/>+<sp/>len<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!set_length<sp/>(dest,<sp/>dest-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>len))</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>memmove<sp/>(dest-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>insert_at<sp/>+<sp/>len,<sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>insert_at,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>len<sp/>-<sp/>insert_at);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_dbus_string_get_data</highlight></codeline>
<codeline lineno="438"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="449"><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="450"><highlight class="normal">_dbus_string_get_data<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_dbus_string_get_data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>only<sp/>do<sp/>the<sp/>function<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>the<sp/>macro<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_dbus_string_get_const_data</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="466"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="467"><highlight class="normal">_dbus_string_get_const_data<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*str)</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_dbus_string_get_const_data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="489" refid="group__DBusString_1ga7a73fb373398606e6e1d0a86c4587a3c" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga7a73fb373398606e6e1d0a86c4587a3c" kindref="member" tooltip="Gets a sub-portion of the raw character buffer from the string.">_dbus_string_get_data_len</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/>real-&gt;len<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>only<sp/>do<sp/>the<sp/>function<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>the<sp/>macro<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_dbus_string_get_const_data_len</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="512"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="513"><highlight class="normal">_dbus_string_get_const_data_len<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/>real-&gt;len<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_dbus_string_get_const_data_len<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>only<sp/>do<sp/>the<sp/>function<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>the<sp/>macro<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_dbus_string_set_byte</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="536"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">_dbus_string_set_byte<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>byte)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(i<sp/>&lt;<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(i<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]<sp/>=<sp/>byte;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_dbus_string_set_byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>only<sp/>have<sp/>the<sp/>function<sp/>if<sp/>we<sp/>didn&apos;t<sp/>create<sp/>a<sp/>macro<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_dbus_string_get_byte</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="560"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">_dbus_string_get_byte<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start)</highlight></codeline>
<codeline lineno="563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[start];</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_dbus_string_get_byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="583" refid="group__DBusString_1gaa0964d662ad17c58eb044c1b153017a6" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gaa0964d662ad17c58eb044c1b153017a6" kindref="member" tooltip="Inserts a number of bytes of a given value at the given position.">_dbus_string_insert_bytes</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_bytes,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>byte)</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(i<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(i<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(n_bytes<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_bytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!open_gap<sp/>(n_bytes,<sp/>real,<sp/>i))</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>memset<sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>i,<sp/>byte,<sp/>n_bytes);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="613" refid="group__DBusString_1gab0770800dce6df97e5d246105a44e7b4" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gab0770800dce6df97e5d246105a44e7b4" kindref="member" tooltip="Inserts a single byte at the given position.">_dbus_string_insert_byte</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>byte)</highlight></codeline>
<codeline lineno="616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(i<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(i<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!open_gap<sp/>(1,<sp/>real,<sp/>i))</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]<sp/>=<sp/>byte;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="640" refid="group__DBusString_1ga556cc30c3ab032dbc63e217119f0d1f5" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga556cc30c3ab032dbc63e217119f0d1f5" kindref="member" tooltip="Like _dbus_string_get_data(), but removes the gotten data from the original string.">_dbus_string_steal_data</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**data_return)</highlight></codeline>
<codeline lineno="642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_max_length;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(data_return<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>undo_alignment<sp/>(real);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>*data_return<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>old_max_length<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref>;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>the<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>if<sp/>(!<ref refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" kindref="member" tooltip="Initializes a string.">_dbus_string_init</ref><sp/>(str))</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hrm,<sp/>put<sp/>it<sp/>back<sp/>then<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>*data_return;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data_return<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fixup_alignment<sp/>(real);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref><sp/>=<sp/>old_max_length;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="669"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="685"><highlight class="normal">_dbus_string_steal_data_len<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**data_return,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>dest;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(data_return<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/>real-&gt;len<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" kindref="member" tooltip="Initializes a string.">_dbus_string_init</ref><sp/>(&amp;dest))</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>set_max_length<sp/>(&amp;dest,<sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" kindref="member" tooltip="Like _dbus_string_move(), but can move a segment from the middle of the source string.">_dbus_string_move_len</ref><sp/>(str,<sp/>start,<sp/>len,<sp/>&amp;dest,<sp/>0))</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;dest);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><ref refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" kindref="member" tooltip="Prints a warning message to stderr.">_dbus_warn</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Broken<sp/>code<sp/>in<sp/>_dbus_string_steal_data_len(),<sp/>see<sp/>@todo,<sp/>FIXME\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga556cc30c3ab032dbc63e217119f0d1f5" kindref="member" tooltip="Like _dbus_string_get_data(), but removes the gotten data from the original string.">_dbus_string_steal_data</ref><sp/>(&amp;dest,<sp/>data_return))</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;dest);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;dest);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="729" refid="group__DBusString_1ga7e509d4f959d19d96f83250e62287b06" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga7e509d4f959d19d96f83250e62287b06" kindref="member" tooltip="Copies the data from the string into a char*.">_dbus_string_copy_data</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**data_return)</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(data_return<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>*data_return<sp/>=<sp/><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member" tooltip="Allocates the given number of bytes, as with standard malloc().">dbus_malloc</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*data_return<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>memcpy<sp/>(*data_return,<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>,<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="group__DBusString_1gaf97b18e419678dbf967d9b9ad1112ca6" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gaf97b18e419678dbf967d9b9ad1112ca6" kindref="member" tooltip="Copies the contents of a DBusString into a different buffer.">_dbus_string_copy_to_buffer</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*buffer,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avail_len)</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(avail_len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(avail_len<sp/>&gt;=<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>memcpy<sp/>(buffer,<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>,<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>);</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776" refid="group__DBusString_1gac42891d26084a4da0f63038d93b63828" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gac42891d26084a4da0f63038d93b63828" kindref="member" tooltip="Copies the contents of a DBusString into a different buffer.">_dbus_string_copy_to_buffer_with_nul</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*buffer,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avail_len)</highlight></codeline>
<codeline lineno="779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(avail_len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(avail_len<sp/>&gt;<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>memcpy<sp/>(buffer,<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>,<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>+1);</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="799"><highlight class="normal">_dbus_string_copy_data_len<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**data_return,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>dest;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(data_return<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/>real-&gt;len<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" kindref="member" tooltip="Initializes a string.">_dbus_string_init</ref><sp/>(&amp;dest))</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>set_max_length<sp/>(&amp;dest,<sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref>);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gaf5f13bc7ac7a623516930d26ae2589bf" kindref="member" tooltip="Like _dbus_string_copy(), but can copy a segment from the middle of the source string.">_dbus_string_copy_len</ref><sp/>(str,<sp/>start,<sp/>len,<sp/>&amp;dest,<sp/>0))</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;dest);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga556cc30c3ab032dbc63e217119f0d1f5" kindref="member" tooltip="Like _dbus_string_get_data(), but removes the gotten data from the original string.">_dbus_string_steal_data</ref><sp/>(&amp;dest,<sp/>data_return))</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;dest);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;dest);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Only<sp/>have<sp/>the<sp/>function<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>the<sp/>macro<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_dbus_string_get_length</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="842"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">_dbus_string_get_length<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*str)</highlight></codeline>
<codeline lineno="844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>;</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!_dbus_string_get_length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="864" refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" kindref="member" tooltip="Makes a string longer by the given number of bytes.">_dbus_string_lengthen</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additional_length)</highlight></codeline>
<codeline lineno="866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);<sp/><sp/></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(additional_length<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(additional_length<sp/>&gt;<sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref><sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>))</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;<sp/></highlight><highlight class="comment">/*<sp/>would<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_length<sp/>(real,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>additional_length);</highlight></codeline>
<codeline lineno="875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884" refid="group__DBusString_1ga7af1cbfa905f26d972ab644d890548b8" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga7af1cbfa905f26d972ab644d890548b8" kindref="member" tooltip="Makes a string shorter by the given number of bytes.">_dbus_string_shorten</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length_to_remove)</highlight></codeline>
<codeline lineno="886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(length_to_remove<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(length_to_remove<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>set_length<sp/>(real,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>length_to_remove);</highlight></codeline>
<codeline lineno="893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="906" refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" kindref="member" tooltip="Sets the length of a string.">_dbus_string_set_length</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length)</highlight></codeline>
<codeline lineno="908"><highlight class="normal">{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(length<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_length<sp/>(real,<sp/>length);</highlight></codeline>
<codeline lineno="913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="916"><highlight class="normal">align_insert_point_then_open_gap<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*insert_at_p,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment,</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gap_size)</highlight></codeline>
<codeline lineno="920"><highlight class="normal">{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>new_len;<sp/></highlight><highlight class="comment">/*<sp/>ulong<sp/>to<sp/>avoid<sp/>_DBUS_ALIGN_VALUE<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>gap_pos;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insert_at;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(alignment<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(alignment<sp/>&lt;=<sp/>8);<sp/></highlight><highlight class="comment">/*<sp/>it<sp/>has<sp/>to<sp/>be<sp/>a<sp/>bug<sp/>if<sp/>&gt;<sp/>8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>insert_at<sp/>=<sp/>*insert_at_p;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(insert_at<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>gap_pos<sp/>=<sp/>_DBUS_ALIGN_VALUE<sp/>(insert_at,<sp/>alignment);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>new_len<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>(gap_pos<sp/>-<sp/>insert_at)<sp/>+<sp/>gap_size;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(new_len<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref>))</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>delta<sp/>=<sp/>new_len<sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(delta<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>only<sp/>happens<sp/>if<sp/>gap_size<sp/>==<sp/>0<sp/>and<sp/>insert_at<sp/>is<sp/>aligned<sp/>already<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>*insert_at_p)<sp/>==<sp/>gap_pos);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(!open_gap<sp/>(new_len<sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>,</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real,<sp/>insert_at)))</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>nul<sp/>the<sp/>padding<sp/>if<sp/>we<sp/>had<sp/>to<sp/>add<sp/>any<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gap_size<sp/>&lt;<sp/>delta)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset<sp/>(&amp;real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[insert_at],<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gap_pos<sp/>-<sp/>insert_at);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>*insert_at_p<sp/>=<sp/>gap_pos;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="965"><highlight class="normal">align_length_then_lengthen<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then_lengthen_by)</highlight></codeline>
<codeline lineno="968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insert_at;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>insert_at<sp/>=<sp/>_dbus_string_get_length<sp/>(str);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>align_insert_point_then_open_gap<sp/>(str,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;insert_at,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment,<sp/>then_lengthen_by);</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="987" refid="group__DBusString_1gaeadfb67c4e796131610499c91d0d7813" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gaeadfb67c4e796131610499c91d0d7813" kindref="member" tooltip="Align the length of a string to a specific alignment (typically 4 or 8) by appending nul bytes to the...">_dbus_string_align_length</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment)</highlight></codeline>
<codeline lineno="989"><highlight class="normal">{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>align_length_then_lengthen<sp/>(str,<sp/>alignment,<sp/>0);</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1003" refid="group__DBusString_1ga4764e75c464356408fc1a12df93177c1" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga4764e75c464356408fc1a12df93177c1" kindref="member" tooltip="Preallocate extra_bytes such that a future lengthening of the string by extra_bytes is guaranteed to ...">_dbus_string_alloc_space</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_bytes)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" kindref="member" tooltip="Makes a string longer by the given number of bytes.">_dbus_string_lengthen</ref><sp/>(str,<sp/>extra_bytes))</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga7af1cbfa905f26d972ab644d890548b8" kindref="member" tooltip="Makes a string shorter by the given number of bytes.">_dbus_string_shorten</ref><sp/>(str,<sp/>extra_bytes);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">append<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*buffer,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_len)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer_len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" kindref="member" tooltip="Makes a string longer by the given number of bytes.">_dbus_string_lengthen</ref><sp/>((<ref refid="structDBusString" kindref="compound">DBusString</ref>*)real,<sp/>buffer_len))</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>memcpy<sp/>(real-&gt;str<sp/>+<sp/>(real-&gt;len<sp/>-<sp/>buffer_len),</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_len);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1039" refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" kindref="member" tooltip="Appends a nul-terminated C-style string to a DBusString.">_dbus_string_append</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>buffer_len;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(buffer<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>buffer_len<sp/>=<sp/>strlen<sp/>(buffer);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer_len<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref>)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>append<sp/>(real,<sp/>buffer,<sp/>buffer_len);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055" refid="group__DBusString_1ga4661e2b10dd3da080564b1191acb7619" refkind="member"><highlight class="preprocessor">#define<sp/>ASSIGN_2_OCTETS(p,<sp/>octets)<sp/>\</highlight></codeline>
<codeline lineno="1056"><highlight class="preprocessor"><sp/><sp/>*((dbus_uint16_t*)(p))<sp/>=<sp/>*((dbus_uint16_t*)(octets));</highlight></codeline>
<codeline lineno="1057"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1059" refid="group__DBusString_1gae777c8fb39aef558604506d645af6420" refkind="member"><highlight class="preprocessor">#define<sp/>ASSIGN_4_OCTETS(p,<sp/>octets)<sp/>\</highlight></codeline>
<codeline lineno="1060"><highlight class="preprocessor"><sp/><sp/>*((dbus_uint32_t*)(p))<sp/>=<sp/>*((dbus_uint32_t*)(octets));</highlight></codeline>
<codeline lineno="1061"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_HAVE_INT64</highlight></codeline>
<codeline lineno="1063"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1064"><highlight class="preprocessor">#define<sp/>ASSIGN_8_OCTETS(p,<sp/>octets)<sp/>\</highlight></codeline>
<codeline lineno="1065"><highlight class="preprocessor"><sp/><sp/>*((dbus_uint64_t*)(p))<sp/>=<sp/>*((dbus_uint64_t*)(octets));</highlight></codeline>
<codeline lineno="1066"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1067"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1068" refid="group__DBusString_1gad13077c6ef8f8b764611ef5ad23b4b8b" refkind="member"><highlight class="preprocessor">#define<sp/>ASSIGN_8_OCTETS(p,<sp/>octets)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1069"><highlight class="preprocessor">do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1070"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>char<sp/>*b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1071"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1072"><highlight class="preprocessor"><sp/><sp/>b<sp/>=<sp/>p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1073"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1074"><highlight class="preprocessor"><sp/><sp/>*b++<sp/>=<sp/>octets[0];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1075"><highlight class="preprocessor"><sp/><sp/>*b++<sp/>=<sp/>octets[1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1076"><highlight class="preprocessor"><sp/><sp/>*b++<sp/>=<sp/>octets[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1077"><highlight class="preprocessor"><sp/><sp/>*b++<sp/>=<sp/>octets[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1078"><highlight class="preprocessor"><sp/><sp/>*b++<sp/>=<sp/>octets[4];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1079"><highlight class="preprocessor"><sp/><sp/>*b++<sp/>=<sp/>octets[5];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1080"><highlight class="preprocessor"><sp/><sp/>*b++<sp/>=<sp/>octets[6];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1081"><highlight class="preprocessor"><sp/><sp/>*b++<sp/>=<sp/>octets[7];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1082"><highlight class="preprocessor"><sp/><sp/>_dbus_assert<sp/>(b<sp/>==<sp/>p<sp/>+<sp/>8);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1083"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="1084"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_HAVE_INT64<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="1087"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1096"><highlight class="normal">_dbus_string_append_4_aligned<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>octets[4])</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!align_length_then_lengthen<sp/>(str,<sp/>4,<sp/>4))</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1gae777c8fb39aef558604506d645af6420" kindref="member" tooltip="assign 4 bytes from one string to another">ASSIGN_4_OCTETS</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>(real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>4),<sp/>octets);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="1111"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1120"><highlight class="normal">_dbus_string_append_8_aligned<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>octets[8])</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!align_length_then_lengthen<sp/>(str,<sp/>8,<sp/>8))</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1gad13077c6ef8f8b764611ef5ad23b4b8b" kindref="member" tooltip="assign 8 bytes from one string to another">ASSIGN_8_OCTETS</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>(real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>8),<sp/>octets);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1144" refid="group__DBusString_1gac33cd9f66e1dc665f92f0478b3170e23" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gac33cd9f66e1dc665f92f0478b3170e23" kindref="member" tooltip="Inserts 2 bytes aligned on a 2 byte boundary with any alignment padding initialized to 0...">_dbus_string_insert_2_aligned</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at,</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>octets[4])</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!align_insert_point_then_open_gap<sp/>(str,<sp/>&amp;insert_at,<sp/>2,<sp/>2))</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga4661e2b10dd3da080564b1191acb7619" kindref="member" tooltip="assign 2 bytes from one string to another">ASSIGN_2_OCTETS</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>insert_at,<sp/>octets);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1168" refid="group__DBusString_1gadd296cf1e6af18cb5bec438e9d353b4e" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gadd296cf1e6af18cb5bec438e9d353b4e" kindref="member" tooltip="Inserts 4 bytes aligned on a 4 byte boundary with any alignment padding initialized to 0...">_dbus_string_insert_4_aligned</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>octets[4])</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!align_insert_point_then_open_gap<sp/>(str,<sp/>&amp;insert_at,<sp/>4,<sp/>4))</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1gae777c8fb39aef558604506d645af6420" kindref="member" tooltip="assign 4 bytes from one string to another">ASSIGN_4_OCTETS</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>insert_at,<sp/>octets);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1192" refid="group__DBusString_1ga108d7d64fb88fffca31e33181cefa232" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga108d7d64fb88fffca31e33181cefa232" kindref="member" tooltip="Inserts 8 bytes aligned on an 8 byte boundary with any alignment padding initialized to 0...">_dbus_string_insert_8_aligned</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>octets[8])</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!align_insert_point_then_open_gap<sp/>(str,<sp/>&amp;insert_at,<sp/>8,<sp/>8))</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(_DBUS_ALIGN_VALUE<sp/>(insert_at,<sp/>8)<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>insert_at);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1gad13077c6ef8f8b764611ef5ad23b4b8b" kindref="member" tooltip="assign 8 bytes from one string to another">ASSIGN_8_OCTETS</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>insert_at,<sp/>octets);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1220" refid="group__DBusString_1ga267217e412c74c74dc3a3e412da5c600" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga267217e412c74c74dc3a3e412da5c600" kindref="member" tooltip="Inserts padding at *insert_at such to align it to the given boundary.">_dbus_string_insert_alignment</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*insert_at,</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment)</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!align_insert_point_then_open_gap<sp/>(str,<sp/>insert_at,<sp/>alignment,<sp/>0))</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(_DBUS_ALIGN_VALUE<sp/>(*insert_at,<sp/>alignment)<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>*insert_at);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1244" refid="group__DBusString_1ga8d794f292831d1a7edeb971b13a2c641" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga8d794f292831d1a7edeb971b13a2c641" kindref="member" tooltip="Appends a printf-style formatted string to the DBusString.">_dbus_string_append_printf_valist</ref><sp/><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*format,</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args)</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>va_list<sp/>args_copy;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>DBUS_VA_COPY<sp/>(args_copy,<sp/>args);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Measure<sp/>the<sp/>message<sp/>length<sp/>without<sp/>terminating<sp/>nul<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/><ref refid="group__DBusSysdeps_1gaffaf8b5bb832c20a8ccb10f012920776" kindref="member" tooltip="Measure the length of the given format string and arguments, not including the terminating nul...">_dbus_printf_string_upper_bound</ref><sp/>(format,<sp/>args);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" kindref="member" tooltip="Makes a string longer by the given number of bytes.">_dbus_string_lengthen</ref><sp/>(str,<sp/>len))</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>leak<sp/>the<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_end<sp/>(args_copy);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>vsprintf<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>(real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>len)),</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,<sp/>args_copy);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>va_end<sp/>(args_copy);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1285" refid="group__DBusString_1gab0078cf7e0e5bd784ec6d6e0cc3923a2" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gab0078cf7e0e5bd784ec6d6e0cc3923a2" kindref="member" tooltip="Appends a printf-style formatted string to the DBusString.">_dbus_string_append_printf</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*format,</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...)</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>va_start<sp/>(args,<sp/>format);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusString_1ga8d794f292831d1a7edeb971b13a2c641" kindref="member" tooltip="Appends a printf-style formatted string to the DBusString.">_dbus_string_append_printf_valist</ref><sp/>(str,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>va_end<sp/>(args);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1308" refid="group__DBusString_1ga724656b7091b910965bd1af42d0b7bab" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga724656b7091b910965bd1af42d0b7bab" kindref="member" tooltip="Appends block of bytes with the given length to a DBusString.">_dbus_string_append_len</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(buffer<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>append<sp/>(real,<sp/>buffer,<sp/>len);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1328" refid="group__DBusString_1gaa6ecf36e70263659f921a4ef0335db12" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gaa6ecf36e70263659f921a4ef0335db12" kindref="member" tooltip="Appends a single byte to the string, returning FALSE if not enough memory.">_dbus_string_append_byte</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>byte)</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!set_length<sp/>(real,<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>-1]<sp/>=<sp/>byte;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="1342"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1350"><highlight class="normal">_dbus_string_append_unichar<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_unichar_t<sp/>ch)</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>code<sp/>is<sp/>from<sp/>GLib<sp/>but<sp/>is<sp/>pretty<sp/>standard<sp/>I<sp/>think<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/>0x80)</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/>0x800)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0xc0;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/>0x10000)</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0xe0;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/>0x200000)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0xf0;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/>0x4000000)</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0xf8;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0xfc;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>(real-&gt;<ref refid="structDBusRealString_1aeb48dcb099660ffc277883166fa72159" kindref="member" tooltip="Max length of this string, without nul byte.">max_length</ref><sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>))</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;<sp/></highlight><highlight class="comment">/*<sp/>real-&gt;len<sp/>+<sp/>len<sp/>would<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!set_length<sp/>(real,<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>+<sp/>len))</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>(real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>len);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>len<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>(ch<sp/>&amp;<sp/>0x3f)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>out[0]<sp/>=<sp/>ch<sp/>|<sp/>first;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real,</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>memmove<sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start,<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start<sp/>+<sp/>len,<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>(start<sp/>+<sp/>len));</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437" refid="group__DBusString_1ga7e0e164ad5bb094e5ccad9edc7ae4235" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga7e0e164ad5bb094e5ccad9edc7ae4235" kindref="member" tooltip="Deletes a segment of a DBusString with length len starting at start.">_dbus_string_delete</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*str,</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/>real-&gt;len<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(real,<sp/>start,<sp/>len);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1451"><highlight class="normal">copy<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*source,</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len,</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*dest,</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at)</highlight></codeline>
<codeline lineno="1456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!open_gap<sp/>(len,<sp/>dest,<sp/>insert_at))</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>memmove<sp/>(dest-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>insert_at,</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start,</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479" refid="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" refkind="member"><highlight class="preprocessor">#define<sp/>DBUS_STRING_COPY_PREAMBLE(source,<sp/>start,<sp/>dest,<sp/>insert_at)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1480"><highlight class="preprocessor"><sp/><sp/>DBusRealString<sp/>*real_source<sp/>=<sp/>(DBusRealString*)<sp/>source;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1481"><highlight class="preprocessor"><sp/><sp/>DBusRealString<sp/>*real_dest<sp/>=<sp/>(DBusRealString*)<sp/>dest;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1482"><highlight class="preprocessor"><sp/><sp/>_dbus_assert<sp/>((source)<sp/>!=<sp/>(dest));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1483"><highlight class="preprocessor"><sp/><sp/>DBUS_GENERIC_STRING_PREAMBLE<sp/>(real_source);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1484"><highlight class="preprocessor"><sp/><sp/>DBUS_GENERIC_STRING_PREAMBLE<sp/>(real_dest);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1485"><highlight class="preprocessor"><sp/><sp/>_dbus_assert<sp/>(!real_dest-&gt;constant);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1486"><highlight class="preprocessor"><sp/><sp/>_dbus_assert<sp/>(!real_dest-&gt;locked);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1487"><highlight class="preprocessor"><sp/><sp/>_dbus_assert<sp/>((start)<sp/>&gt;=<sp/>0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1488"><highlight class="preprocessor"><sp/><sp/>_dbus_assert<sp/>((start)<sp/>&lt;=<sp/>real_source-&gt;len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1489"><highlight class="preprocessor"><sp/><sp/>_dbus_assert<sp/>((insert_at)<sp/>&gt;=<sp/>0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1490"><highlight class="preprocessor"><sp/><sp/>_dbus_assert<sp/>((insert_at)<sp/>&lt;=<sp/>real_dest-&gt;len)</highlight></codeline>
<codeline lineno="1491"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1503" refid="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" kindref="member" tooltip="Moves the end of one string into another string.">_dbus_string_move</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*source,</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest,</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real_source<sp/>=<sp/>(<ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>source;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real_source-&gt;len);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" kindref="member" tooltip="Like _dbus_string_move(), but can move a segment from the middle of the source string.">_dbus_string_move_len</ref><sp/>(source,<sp/>start,</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_source-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>start,</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest,<sp/>insert_at);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1527" refid="group__DBusString_1ga3c10f0d1bcaa3b450025b9c6a8b901d7" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga3c10f0d1bcaa3b450025b9c6a8b901d7" kindref="member" tooltip="Like _dbus_string_move(), but does not delete the section of the source string that&amp;#39;s copied to the d...">_dbus_string_copy</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*source,</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest,</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at)</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" kindref="member" tooltip="Checks assertions for two strings we&amp;#39;re copying a segment between, and declares real_source/real_dest...">DBUS_STRING_COPY_PREAMBLE</ref><sp/>(source,<sp/>start,<sp/>dest,<sp/>insert_at);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy<sp/>(real_source,<sp/>start,</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_source-&gt;len<sp/>-<sp/>start,</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_dest,</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1555" refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" kindref="member" tooltip="Like _dbus_string_move(), but can move a segment from the middle of the source string.">_dbus_string_move_len</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*source,</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len,</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest,</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at)</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" kindref="member" tooltip="Checks assertions for two strings we&amp;#39;re copying a segment between, and declares real_source/real_dest...">DBUS_STRING_COPY_PREAMBLE</ref><sp/>(source,<sp/>start,<sp/>dest,<sp/>insert_at);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>((start<sp/>+<sp/>len)<sp/>&lt;=<sp/>real_source-&gt;len);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>==<sp/>real_source-&gt;len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_dest-&gt;len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Short-circuit<sp/>moving<sp/>an<sp/>entire<sp/>existing<sp/>string<sp/>to<sp/>an<sp/>empty<sp/>string</highlight></codeline>
<codeline lineno="1576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>by<sp/>just<sp/>swapping<sp/>the<sp/>buffers.</highlight></codeline>
<codeline lineno="1577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>assume<sp/>-&gt;constant<sp/>doesn&apos;t<sp/>matter<sp/>as<sp/>you<sp/>can&apos;t<sp/>have</highlight></codeline>
<codeline lineno="1579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>constant<sp/>string<sp/>involved<sp/>in<sp/>a<sp/>move.</highlight></codeline>
<codeline lineno="1580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSIGN_DATA(a,<sp/>b)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a)-&gt;str<sp/>=<sp/>(b)-&gt;str;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a)-&gt;len<sp/>=<sp/>(b)-&gt;len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a)-&gt;allocated<sp/>=<sp/>(b)-&gt;allocated;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a)-&gt;align_offset<sp/>=<sp/>(b)-&gt;align_offset;<sp/><sp/>\</highlight></codeline>
<codeline lineno="1586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="1587"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSIGN_DATA<sp/>(&amp;tmp,<sp/>real_source);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSIGN_DATA<sp/>(real_source,<sp/>real_dest);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSIGN_DATA<sp/>(real_dest,<sp/>&amp;tmp);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!copy<sp/>(real_source,<sp/>start,<sp/>len,</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_dest,</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at))</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(real_source,<sp/>start,</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1622" refid="group__DBusString_1gaf5f13bc7ac7a623516930d26ae2589bf" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gaf5f13bc7ac7a623516930d26ae2589bf" kindref="member" tooltip="Like _dbus_string_copy(), but can copy a segment from the middle of the source string.">_dbus_string_copy_len</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*source,</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len,</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest,</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at)</highlight></codeline>
<codeline lineno="1627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" kindref="member" tooltip="Checks assertions for two strings we&amp;#39;re copying a segment between, and declares real_source/real_dest...">DBUS_STRING_COPY_PREAMBLE</ref><sp/>(source,<sp/>start,<sp/>dest,<sp/>insert_at);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real_source-&gt;len);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/>real_source-&gt;len<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy<sp/>(real_source,<sp/>start,<sp/>len,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_dest,</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1660" refid="group__DBusString_1gafe7921a92467cdefaa0a7829d6cf260b" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gafe7921a92467cdefaa0a7829d6cf260b" kindref="member" tooltip="Replaces a segment of dest string with a segment of source string.">_dbus_string_replace_len</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*source,</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len,</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest,</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace_at,</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace_len)</highlight></codeline>
<codeline lineno="1666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1gaacbbd102b66aa34dd13f792e7f08c205" kindref="member" tooltip="Checks assertions for two strings we&amp;#39;re copying a segment between, and declares real_source/real_dest...">DBUS_STRING_COPY_PREAMBLE</ref><sp/>(source,<sp/>start,<sp/>dest,<sp/>replace_at);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real_source-&gt;len);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/>real_source-&gt;len<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(replace_at<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(replace_at<sp/>&lt;=<sp/>real_dest-&gt;len);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(replace_len<sp/>&lt;=<sp/>real_dest-&gt;len<sp/>-<sp/>replace_at);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!copy<sp/>(real_source,<sp/>start,<sp/>len,</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_dest,<sp/>replace_at))</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(real_dest,<sp/>replace_at<sp/>+<sp/>len,<sp/>replace_len);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1697" refid="group__DBusString_1ga5d293b49b6afbbd74069d0823acce6b5" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga5d293b49b6afbbd74069d0823acce6b5" kindref="member" tooltip="Looks for the first occurance of a byte, deletes that byte, and moves everything after the byte to th...">_dbus_string_split_on_byte</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*source,</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte,</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tail)</highlight></codeline>
<codeline lineno="1700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte_position;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>byte_string[2]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head_length;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail_length;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>byte_string[0]<sp/>=<sp/>(char)<sp/>byte;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga5fe47873b2838339107c3e1f03d1a703" kindref="member" tooltip="Finds the given substring in the string, returning TRUE and filling in the byte index where the subst...">_dbus_string_find</ref><sp/>(source,<sp/>0,<sp/>byte_string,<sp/>&amp;byte_position))</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>head_length<sp/>=<sp/>byte_position;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>tail_length<sp/>=<sp/>_dbus_string_get_length<sp/>(source)<sp/>-<sp/>head_length<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" kindref="member" tooltip="Like _dbus_string_move(), but can move a segment from the middle of the source string.">_dbus_string_move_len</ref><sp/>(source,<sp/>byte_position<sp/>+<sp/>1,<sp/>tail_length,</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail,<sp/>0))</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>the<sp/>trailing<sp/>delimiter<sp/>byte<sp/>from<sp/>the<sp/>head<sp/>now.</highlight></codeline>
<codeline lineno="1719"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" kindref="member" tooltip="Sets the length of a string.">_dbus_string_set_length</ref><sp/>(source,<sp/>head_length))</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unicode<sp/>macros<sp/>and<sp/>utf8_validate()<sp/>from<sp/>GLib<sp/>Owen<sp/>Taylor,<sp/>Havoc</highlight></codeline>
<codeline lineno="1727"><highlight class="comment"><sp/>*<sp/>Pennington,<sp/>and<sp/>Tom<sp/>Tromey<sp/>are<sp/>the<sp/>authors<sp/>and<sp/>authorized<sp/>relicense.</highlight></codeline>
<codeline lineno="1728"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735" refid="group__DBusString_1ga30614080229a4fb63460ffdc8ab484fb" refkind="member"><highlight class="preprocessor">#define<sp/>UTF8_COMPUTE(Char,<sp/>Mask,<sp/>Len)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1736"><highlight class="preprocessor"><sp/><sp/>if<sp/>(Char<sp/>&lt;<sp/>128)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1737"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1738"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Len<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>=<sp/>0x7f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1741"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>((Char<sp/>&amp;<sp/>0xe0)<sp/>==<sp/>0xc0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1743"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Len<sp/>=<sp/>2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1744"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>=<sp/>0x1f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1745"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1746"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>((Char<sp/>&amp;<sp/>0xf0)<sp/>==<sp/>0xe0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1747"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Len<sp/>=<sp/>3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>=<sp/>0x0f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1751"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>((Char<sp/>&amp;<sp/>0xf8)<sp/>==<sp/>0xf0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1753"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Len<sp/>=<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>=<sp/>0x07;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1756"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>((Char<sp/>&amp;<sp/>0xfc)<sp/>==<sp/>0xf8)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Len<sp/>=<sp/>5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>=<sp/>0x03;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1761"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>((Char<sp/>&amp;<sp/>0xfe)<sp/>==<sp/>0xfc)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1762"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1763"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Len<sp/>=<sp/>6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>=<sp/>0x01;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1765"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1766"><highlight class="preprocessor"><sp/><sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1767"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Len<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1771"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1776" refid="group__DBusString_1ga9691ff5386e218870299de1d9e77ceea" refkind="member"><highlight class="preprocessor">#define<sp/>UTF8_LENGTH(Char)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1777"><highlight class="preprocessor"><sp/><sp/>((Char)<sp/>&lt;<sp/>0x80<sp/>?<sp/>1<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1778"><highlight class="preprocessor"><sp/><sp/><sp/>((Char)<sp/>&lt;<sp/>0x800<sp/>?<sp/>2<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((Char)<sp/>&lt;<sp/>0x10000<sp/>?<sp/>3<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((Char)<sp/>&lt;<sp/>0x200000<sp/>?<sp/>4<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((Char)<sp/>&lt;<sp/>0x4000000<sp/>?<sp/>5<sp/>:<sp/>6)))))</highlight></codeline>
<codeline lineno="1782"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1792" refid="group__DBusString_1gab5b4b316a69f78611a14e6b1fd091992" refkind="member"><highlight class="preprocessor">#define<sp/>UTF8_GET(Result,<sp/>Chars,<sp/>Count,<sp/>Mask,<sp/>Len)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1793"><highlight class="preprocessor"><sp/><sp/>(Result)<sp/>=<sp/>(Chars)[0]<sp/>&amp;<sp/>(Mask);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1794"><highlight class="preprocessor"><sp/><sp/>for<sp/>((Count)<sp/>=<sp/>1;<sp/>(Count)<sp/>&lt;<sp/>(Len);<sp/>++(Count))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1795"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1796"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(((Chars)[(Count)]<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1797"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Result)<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(Result)<sp/>&lt;&lt;=<sp/>6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(Result)<sp/>|=<sp/>((Chars)[(Count)]<sp/>&amp;<sp/>0x3f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1821" refid="group__DBusString_1ga25f0a93fc023fa0eec07ac1e32011e89" refkind="member"><highlight class="preprocessor">#define<sp/>UNICODE_VALID(Char)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1822"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((Char)<sp/>&lt;<sp/>0x110000<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1823"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(((Char)<sp/>&amp;<sp/>0xFFFFF800)<sp/>!=<sp/>0xD800)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1824"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((Char)<sp/>&lt;<sp/>0xFDD0<sp/>||<sp/>(Char)<sp/>&gt;<sp/>0xFDEF)<sp/>&amp;&amp;<sp/><sp/>\</highlight></codeline>
<codeline lineno="1825"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((Char)<sp/>&amp;<sp/>0xFFFE)<sp/>!=<sp/>0xFFFE)</highlight></codeline>
<codeline lineno="1826"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="1828"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1838"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal">_dbus_string_get_unichar<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbus_unichar_t<sp/><sp/><sp/>*ch_return,</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*end_return)</highlight></codeline>
<codeline lineno="1843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>mask,<sp/>len;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>dbus_unichar_t<sp/>result;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch_return)</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>*ch_return<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_return)</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>*end_return<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>*p;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga30614080229a4fb63460ffdc8ab484fb" kindref="member" tooltip="computes length and mask of a unicode character">UTF8_COMPUTE</ref><sp/>(c,<sp/>mask,<sp/>len);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1gab5b4b316a69f78611a14e6b1fd091992" kindref="member" tooltip="Gets a UTF-8 value.">UTF8_GET</ref><sp/>(result,<sp/>p,<sp/>i,<sp/>mask,<sp/>len);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>(dbus_unichar_t)-1)</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch_return)</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>*ch_return<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_return)</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>*end_return<sp/>=<sp/>start<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1891" refid="group__DBusString_1ga5fe47873b2838339107c3e1f03d1a703" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga5fe47873b2838339107c3e1f03d1a703" kindref="member" tooltip="Finds the given substring in the string, returning TRUE and filling in the byte index where the subst...">_dbus_string_find</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*substr,</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found)</highlight></codeline>
<codeline lineno="1895"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusString_1gaf2281731c3119f946726680242a5ae02" kindref="member" tooltip="Finds the given substring in the string, up to a certain position, returning TRUE and filling in the ...">_dbus_string_find_to</ref><sp/>(str,<sp/>start,</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)str)-&gt;len,</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substr,<sp/>found);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1914" refid="group__DBusString_1ga3c98d1913e3ba4deb8eda60b2e262fdb" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga3c98d1913e3ba4deb8eda60b2e262fdb" kindref="member" tooltip="Finds end of line (&amp;quot;\r\n&amp;quot; or &amp;quot;\n&amp;quot;) in the string, returning TRUE and filling in the byte index where ...">_dbus_string_find_eol</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found,</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found_len)</highlight></codeline>
<codeline lineno="1918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>real-&gt;len)</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i+1)<sp/>&lt;<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>&amp;&amp;<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i+1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">/*<sp/>&quot;\r\n&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_len)</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found_len<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>only<sp/>&quot;\r&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_len)</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found_len<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">/*<sp/>only<sp/>&quot;\n&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_len)</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found_len<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>*found<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_len)</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>*found_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="1984" refid="group__DBusString_1gaf2281731c3119f946726680242a5ae02" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gaf2281731c3119f946726680242a5ae02" kindref="member" tooltip="Finds the given substring in the string, up to a certain position, returning TRUE and filling in the ...">_dbus_string_find_to</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end,</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*substr,</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found)</highlight></codeline>
<codeline lineno="1989"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(substr<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(substr<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(end<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>end);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>always<sp/>&quot;find&quot;<sp/>an<sp/>empty<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*substr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>end)</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]<sp/>==<sp/>substr[0])</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>end)</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(substr[j<sp/>-<sp/>i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[j]<sp/>!=<sp/>substr[j<sp/>-<sp/>i])</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(substr[j<sp/>-<sp/>i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>*found<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="2039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2052" refid="group__DBusString_1ga677ddb4246c7e7f67ed3145dc3c1c96b" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga677ddb4246c7e7f67ed3145dc3c1c96b" kindref="member" tooltip="Finds a blank (space or tab) in the string.">_dbus_string_find_blank</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found)</highlight></codeline>
<codeline lineno="2055"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>real-&gt;len)</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*found<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>*found<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090" refid="group__DBusString_1ga5698b163289be0066cf10c0f1caf877a" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga5698b163289be0066cf10c0f1caf877a" kindref="member" tooltip="Skips blanks from start, storing the first non-blank in *end (blank is space or tab).">_dbus_string_skip_blank</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*end)</highlight></codeline>
<codeline lineno="2093"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>real-&gt;len)</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusStringInternals_1ga8f488964e430c0ae6a1a4204e0098dfe" kindref="member" tooltip="Checks for ASCII blank byte.">DBUS_IS_ASCII_BLANK</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]))</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(i<sp/>==<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>||<sp/>!<ref refid="group__DBusStringInternals_1ga9c88845804be152df28b81d7cad5673a" kindref="member" tooltip="Checks for ASCII whitespace byte.">DBUS_IS_ASCII_WHITE</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]));</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end)</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>*end<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124" refid="group__DBusString_1ga8600259d71a4adc14ab4558a9d2a0f7d" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga8600259d71a4adc14ab4558a9d2a0f7d" kindref="member" tooltip="Skips whitespace from start, storing the first non-whitespace in *end.">_dbus_string_skip_white</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*end)</highlight></codeline>
<codeline lineno="2127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>real-&gt;len)</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusStringInternals_1ga9c88845804be152df28b81d7cad5673a" kindref="member" tooltip="Checks for ASCII whitespace byte.">DBUS_IS_ASCII_WHITE</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i]))</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(i<sp/>==<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>||<sp/>!(<ref refid="group__DBusStringInternals_1ga9c88845804be152df28b81d7cad5673a" kindref="member" tooltip="Checks for ASCII whitespace byte.">DBUS_IS_ASCII_WHITE</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i])));</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end)</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>*end<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157" refid="group__DBusString_1ga578bb88acec5520825f2ba792cad7938" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga578bb88acec5520825f2ba792cad7938" kindref="member" tooltip="Skips whitespace from end, storing the start index of the trailing whitespace in *start.">_dbus_string_skip_white_reverse</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end,</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*start)</highlight></codeline>
<codeline lineno="2160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(end<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(end<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusStringInternals_1ga9c88845804be152df28b81d7cad5673a" kindref="member" tooltip="Checks for ASCII whitespace byte.">DBUS_IS_ASCII_WHITE</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i-1]))</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(i<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>(i<sp/>==<sp/>0<sp/>||<sp/>!(<ref refid="group__DBusStringInternals_1ga9c88845804be152df28b81d7cad5673a" kindref="member" tooltip="Checks for ASCII whitespace byte.">DBUS_IS_ASCII_WHITE</ref><sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>[i-1]))));</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start)</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>*start<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2196" refid="group__DBusString_1ga8b7fc22e6738173e1b2cef4b91b9c3c1" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga8b7fc22e6738173e1b2cef4b91b9c3c1" kindref="member" tooltip="Assigns a newline-terminated or \r\n-terminated line from the front of the string to the given dest s...">_dbus_string_pop_line</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*source,</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*dest)</highlight></codeline>
<codeline lineno="2198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eol,<sp/>eol_len;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" kindref="member" tooltip="Sets the length of a string.">_dbus_string_set_length</ref><sp/>(dest,<sp/>0);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/>eol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>eol_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga3c98d1913e3ba4deb8eda60b2e262fdb" kindref="member" tooltip="Finds end of line (&amp;quot;\r\n&amp;quot; or &amp;quot;\n&amp;quot;) in the string, returning TRUE and filling in the byte index where ...">_dbus_string_find_eol</ref><sp/>(source,<sp/>0,<sp/>&amp;eol,<sp/>&amp;eol_len))</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(eol<sp/>==<sp/>_dbus_string_get_length<sp/>(source));</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eol<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there&apos;s<sp/>no<sp/>newline<sp/>and<sp/>source<sp/>has<sp/>zero<sp/>length,<sp/>we&apos;re<sp/>done<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>otherwise,<sp/>the<sp/>last<sp/>line<sp/>of<sp/>the<sp/>file<sp/>has<sp/>no<sp/>eol<sp/>characters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>remember<sp/>eol<sp/>can<sp/>be<sp/>0<sp/>if<sp/>it&apos;s<sp/>an<sp/>empty<sp/>line,<sp/>but<sp/>eol_len<sp/>should<sp/>not<sp/>be<sp/>zero<sp/>also</highlight></codeline>
<codeline lineno="2217"><highlight class="comment"><sp/><sp/><sp/>*<sp/>since<sp/>find_eol<sp/>returned<sp/>TRUE</highlight></codeline>
<codeline lineno="2218"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gab8e2dcb2dc71bf225da0827c6086a727" kindref="member" tooltip="Like _dbus_string_move(), but can move a segment from the middle of the source string.">_dbus_string_move_len</ref><sp/>(source,<sp/>0,<sp/>eol<sp/>+<sp/>eol_len,<sp/>dest,<sp/>0))</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>line<sp/>ending<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" kindref="member" tooltip="Sets the length of a string.">_dbus_string_set_length</ref><sp/>(dest,<sp/>eol))</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert_not_reached<sp/>(</highlight><highlight class="stringliteral">&quot;out<sp/>of<sp/>memory<sp/>when<sp/>shortening<sp/>a<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="2234"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2240"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal">_dbus_string_delete_first_word<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str)</highlight></codeline>
<codeline lineno="2242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusString_1ga677ddb4246c7e7f67ed3145dc3c1c96b" kindref="member" tooltip="Finds a blank (space or tab) in the string.">_dbus_string_find_blank</ref><sp/>(str,<sp/>0,<sp/>&amp;i))</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga5698b163289be0066cf10c0f1caf877a" kindref="member" tooltip="Skips blanks from start, storing the first non-blank in *end (blank is space or tab).">_dbus_string_skip_blank</ref><sp/>(str,<sp/>i,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga7e0e164ad5bb094e5ccad9edc7ae4235" kindref="member" tooltip="Deletes a segment of a DBusString with length len starting at start.">_dbus_string_delete</ref><sp/>(str,<sp/>0,<sp/>i);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2251"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="2253"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2258"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal">_dbus_string_delete_leading_blanks<sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str)</highlight></codeline>
<codeline lineno="2260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga5698b163289be0066cf10c0f1caf877a" kindref="member" tooltip="Skips blanks from start, storing the first non-blank in *end (blank is space or tab).">_dbus_string_skip_blank</ref><sp/>(str,<sp/>0,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga7e0e164ad5bb094e5ccad9edc7ae4235" kindref="member" tooltip="Deletes a segment of a DBusString with length len starting at start.">_dbus_string_delete</ref><sp/>(str,<sp/>0,<sp/>i);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2269"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2275"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276" refid="group__DBusString_1gaa92c6ab2c5e24cbefef0a3f3fc76f98b" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gaa92c6ab2c5e24cbefef0a3f3fc76f98b" kindref="member" tooltip="Deletes leading and trailing whitespace.">_dbus_string_chop_white</ref>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str)</highlight></codeline>
<codeline lineno="2277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga8600259d71a4adc14ab4558a9d2a0f7d" kindref="member" tooltip="Skips whitespace from start, storing the first non-whitespace in *end.">_dbus_string_skip_white</ref><sp/>(str,<sp/>0,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga7e0e164ad5bb094e5ccad9edc7ae4235" kindref="member" tooltip="Deletes a segment of a DBusString with length len starting at start.">_dbus_string_delete</ref><sp/>(str,<sp/>0,<sp/>i);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga578bb88acec5520825f2ba792cad7938" kindref="member" tooltip="Skips whitespace from end, storing the start index of the trailing whitespace in *start.">_dbus_string_skip_white_reverse</ref><sp/>(str,<sp/>_dbus_string_get_length<sp/>(str),<sp/>&amp;i);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" kindref="member" tooltip="Sets the length of a string.">_dbus_string_set_length</ref><sp/>(str,<sp/>i);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2300" refid="group__DBusString_1gad79c34af55b58f0e8b81ecf11b8694bb" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gad79c34af55b58f0e8b81ecf11b8694bb" kindref="member" tooltip="Tests two DBusString for equality.">_dbus_string_equal</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*a,</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*b)</highlight></codeline>
<codeline lineno="2302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ap;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bp;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a_end;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real_a<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>a;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real_b<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>b;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member" tooltip="Checks a bunch of assertions about a string object.">DBUS_GENERIC_STRING_PREAMBLE</ref><sp/>(real_a);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member" tooltip="Checks a bunch of assertions about a string object.">DBUS_GENERIC_STRING_PREAMBLE</ref><sp/>(real_b);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real_a-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>!=<sp/>real_b-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>)</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/>ap<sp/>=<sp/>real_a-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>bp<sp/>=<sp/>real_b-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/>a_end<sp/>=<sp/>real_a-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>real_a-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ap<sp/>!=<sp/>a_end)</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ap<sp/>!=<sp/>*bp)</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++ap;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bp;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2343" refid="group__DBusString_1gacf39727ae9eb411b0c4cb3b891588fb0" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gacf39727ae9eb411b0c4cb3b891588fb0" kindref="member" tooltip="Tests two DBusString for equality up to the given length.">_dbus_string_equal_len</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*a,</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*b,</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="2346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ap;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bp;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a_end;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real_a<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>a;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real_b<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>b;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member" tooltip="Checks a bunch of assertions about a string object.">DBUS_GENERIC_STRING_PREAMBLE</ref><sp/>(real_a);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member" tooltip="Checks a bunch of assertions about a string object.">DBUS_GENERIC_STRING_PREAMBLE</ref><sp/>(real_b);</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real_a-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>!=<sp/>real_b-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(real_a-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>&lt;<sp/>len<sp/>||<sp/>real_b-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>&lt;<sp/>len))</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>ap<sp/>=<sp/>real_a-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>bp<sp/>=<sp/>real_b-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>a_end<sp/>=<sp/>real_a-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>MIN<sp/>(real_a-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ap<sp/>!=<sp/>a_end)</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ap<sp/>!=<sp/>*bp)</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++ap;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bp;</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2391" refid="group__DBusString_1ga2095c2a797ae245521a7588b32279110" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga2095c2a797ae245521a7588b32279110" kindref="member" tooltip="Tests two sub-parts of two DBusString for equality.">_dbus_string_equal_substring</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*a,</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_start,</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_len,</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/>*b,</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b_start)</highlight></codeline>
<codeline lineno="2396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ap;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bp;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a_end;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real_a<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>a;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real_b<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>b;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member" tooltip="Checks a bunch of assertions about a string object.">DBUS_GENERIC_STRING_PREAMBLE</ref><sp/>(real_a);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member" tooltip="Checks a bunch of assertions about a string object.">DBUS_GENERIC_STRING_PREAMBLE</ref><sp/>(real_b);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(a_start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(a_len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(a_start<sp/>&lt;=<sp/>real_a-&gt;len);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(a_len<sp/>&lt;=<sp/>real_a-&gt;len<sp/>-<sp/>a_start);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(b_start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(b_start<sp/>&lt;=<sp/>real_b-&gt;len);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a_len<sp/>&gt;<sp/>real_b-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>b_start)</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>ap<sp/>=<sp/>real_a-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>a_start;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/>bp<sp/>=<sp/>real_b-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>b_start;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>a_end<sp/>=<sp/>ap<sp/>+<sp/>a_len;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ap<sp/>!=<sp/>a_end)</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ap<sp/>!=<sp/>*bp)</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++ap;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bp;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(bp<sp/>&lt;=<sp/>(real_b-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>real_b-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>));</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2439" refid="group__DBusString_1ga84f39f1bf398697920637d2982248c72" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga84f39f1bf398697920637d2982248c72" kindref="member" tooltip="Checks whether a string is equal to a C string.">_dbus_string_equal_c_str</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*a,</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*c_str)</highlight></codeline>
<codeline lineno="2441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ap;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bp;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a_end;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real_a<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>a;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member" tooltip="Checks a bunch of assertions about a string object.">DBUS_GENERIC_STRING_PREAMBLE</ref><sp/>(real_a);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(c_str<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>ap<sp/>=<sp/>real_a-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/>bp<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>c_str;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>a_end<sp/>=<sp/>real_a-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>real_a-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ap<sp/>!=<sp/>a_end<sp/>&amp;&amp;<sp/>*bp)</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ap<sp/>!=<sp/>*bp)</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++ap;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bp;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ap<sp/>!=<sp/>a_end<sp/>||<sp/>*bp)</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_BUILD_TESTS</highlight></codeline>
<codeline lineno="2468"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2476"><highlight class="normal">_dbus_string_starts_with_c_str<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*a,</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*c_str)</highlight></codeline>
<codeline lineno="2478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ap;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bp;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a_end;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref><sp/>*real_a<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusRealString" kindref="compound" tooltip="Internals of DBusString.">DBusRealString</ref>*)<sp/>a;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga862cb88a139179981e1fcd5643165b56" kindref="member" tooltip="Checks a bunch of assertions about a string object.">DBUS_GENERIC_STRING_PREAMBLE</ref><sp/>(real_a);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(c_str<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member" tooltip="A null pointer, defined appropriately for C or C++.">NULL</ref>);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/>ap<sp/>=<sp/>real_a-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref>;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/>bp<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>c_str;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/>a_end<sp/>=<sp/>real_a-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>real_a-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref>;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ap<sp/>!=<sp/>a_end<sp/>&amp;&amp;<sp/>*bp)</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ap<sp/>!=<sp/>*bp)</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++ap;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bp;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*bp<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_BUILD_TESTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2514" refid="group__DBusString_1gac3b78e2cb63fb37fbff8d7e647ddfa5a" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gac3b78e2cb63fb37fbff8d7e647ddfa5a" kindref="member" tooltip="Appends a two-character hex digit to a string, where the hex digit has the value of the given byte...">_dbus_string_append_byte_as_hex</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte)</highlight></codeline>
<codeline lineno="2516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hexdigits[16]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gaa6ecf36e70263659f921a4ef0335db12" kindref="member" tooltip="Appends a single byte to the string, returning FALSE if not enough memory.">_dbus_string_append_byte</ref><sp/>(str,</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexdigits[(byte<sp/>&gt;&gt;<sp/>4)]))</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gaa6ecf36e70263659f921a4ef0335db12" kindref="member" tooltip="Appends a single byte to the string, returning FALSE if not enough memory.">_dbus_string_append_byte</ref><sp/>(str,</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexdigits[(byte<sp/>&amp;<sp/>0x0f)]))</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" kindref="member" tooltip="Sets the length of a string.">_dbus_string_set_length</ref><sp/>(str,</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_string_get_length<sp/>(str)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2548" refid="group__DBusString_1gaabb4873f436e015944a33cd1e3815cc9" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gaabb4873f436e015944a33cd1e3815cc9" kindref="member" tooltip="Encodes a string in hex, the way MD5 and SHA-1 are usually encoded.">_dbus_string_hex_encode</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*source,</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest,</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at)</highlight></codeline>
<codeline lineno="2552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>result;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>_dbus_string_get_length<sp/>(source));</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" kindref="member" tooltip="Initializes a string.">_dbus_string_init</ref><sp/>(&amp;result))</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>_dbus_string_get_const_data<sp/>(source);</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>p<sp/>+<sp/>_dbus_string_get_length<sp/>(source);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>p<sp/>+=<sp/>start;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gac3b78e2cb63fb37fbff8d7e647ddfa5a" kindref="member" tooltip="Appends a two-character hex digit to a string, where the hex digit has the value of the given byte...">_dbus_string_append_byte_as_hex</ref><sp/>(&amp;result,<sp/>*p))</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" kindref="member" tooltip="Moves the end of one string into another string.">_dbus_string_move</ref><sp/>(&amp;result,<sp/>0,<sp/>dest,<sp/>insert_at))</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/>out:</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;result);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2598" refid="group__DBusString_1ga0a8c20d855f9ddc05718b9e2ac0e33d8" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga0a8c20d855f9ddc05718b9e2ac0e33d8" kindref="member" tooltip="Decodes a string from hex encoding.">_dbus_string_hex_decode</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*source,</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*end_return,</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest,</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_at)</highlight></codeline>
<codeline lineno="2603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>result;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>retval;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref><sp/>high_bits;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>_dbus_string_get_length<sp/>(source));</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" kindref="member" tooltip="Initializes a string.">_dbus_string_init</ref><sp/>(&amp;result))</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/>high_bits<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>_dbus_string_get_const_data<sp/>(source);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>p<sp/>+<sp/>_dbus_string_get_length<sp/>(source);</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/>p<sp/>+=<sp/>start;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*p)</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>15;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(high_bits)</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gaa6ecf36e70263659f921a4ef0335db12" kindref="member" tooltip="Appends a single byte to the string, returning FALSE if not enough memory.">_dbus_string_append_byte</ref><sp/>(&amp;result,</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>&lt;&lt;<sp/>4))</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>_dbus_string_get_length<sp/>(&amp;result);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>_dbus_string_get_byte<sp/>(&amp;result,<sp/>len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>|=<sp/>val;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_string_set_byte<sp/>(&amp;result,<sp/>len<sp/>-<sp/>1,<sp/>b);</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>high_bits<sp/>=<sp/>!high_bits;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/>done:</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__DBusString_1gad379fce8d4ef4f7e28f81f50b46ee4c9" kindref="member" tooltip="Moves the end of one string into another string.">_dbus_string_move</ref><sp/>(&amp;result,<sp/>0,<sp/>dest,<sp/>insert_at))</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_return)</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/>*end_return<sp/>=<sp/>p<sp/>-<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>_dbus_string_get_const_data<sp/>(source);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/>retval<sp/>=<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/>out:</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><ref refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" kindref="member" tooltip="Frees a string created by _dbus_string_init().">_dbus_string_free</ref><sp/>(&amp;result);<sp/><sp/></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2739" refid="group__DBusString_1gaa4324cd667e21beb31a5481cb0c12b6d" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1gaa4324cd667e21beb31a5481cb0c12b6d" kindref="member" tooltip="Checks that the given range of the string is valid ASCII with no nul bytes.">_dbus_string_validate_ascii</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="2742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>start)</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>s<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(!_DBUS_ISASCII<sp/>(*s)))</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774" refid="group__DBusString_1ga698f4b0299e6c6a707fd7e9c14915f00" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga698f4b0299e6c6a707fd7e9c14915f00" kindref="member" tooltip="Converts the given range of the string to lower case.">_dbus_string_tolower_ascii</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="2777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/>real-&gt;len<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>s<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*s<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805" refid="group__DBusString_1ga9c959f7d18ff21c5ae51846c6ba065f1" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga9c959f7d18ff21c5ae51846c6ba065f1" kindref="member" tooltip="Converts the given range of the string to upper case.">_dbus_string_toupper_ascii</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="2808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&lt;=<sp/>real-&gt;len<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>s<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*s<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2844" refid="group__DBusString_1ga65f0f04b7c9371406fc87343f691e8da" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga65f0f04b7c9371406fc87343f691e8da" kindref="member" tooltip="Checks that the given range of the string is valid UTF-8.">_dbus_string_validate_utf8</ref><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="2847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>are<sp/>doing<sp/>_DBUS_UNLIKELY()<sp/>here<sp/>which<sp/>might<sp/>be</highlight></codeline>
<codeline lineno="2856"><highlight class="comment"><sp/><sp/><sp/>*<sp/>dubious<sp/>in<sp/>a<sp/>generic<sp/>library<sp/>like<sp/>GLib,<sp/>but<sp/>in<sp/>D-Bus</highlight></codeline>
<codeline lineno="2857"><highlight class="comment"><sp/><sp/><sp/>*<sp/>we<sp/>know<sp/>we&apos;re<sp/>validating<sp/>messages<sp/>and<sp/>that<sp/>it<sp/>would</highlight></codeline>
<codeline lineno="2858"><highlight class="comment"><sp/><sp/><sp/>*<sp/>only<sp/>be<sp/>evil/broken<sp/>apps<sp/>that<sp/>would<sp/>have<sp/>invalid</highlight></codeline>
<codeline lineno="2859"><highlight class="comment"><sp/><sp/><sp/>*<sp/>UTF-8.<sp/>Also,<sp/>this<sp/>function<sp/>seems<sp/>to<sp/>be<sp/>a<sp/>performance</highlight></codeline>
<codeline lineno="2860"><highlight class="comment"><sp/><sp/><sp/>*<sp/>bottleneck<sp/>in<sp/>profiles.</highlight></codeline>
<codeline lineno="2861"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(len<sp/>&gt;<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>start))</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>p<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&lt;<sp/>end)</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>mask,<sp/>char_len;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dbus_unichar_t<sp/>result;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nul<sp/>bytes<sp/>considered<sp/>invalid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Special-case<sp/>ASCII;<sp/>this<sp/>makes<sp/>us<sp/>go<sp/>a<sp/>lot<sp/>faster<sp/>in</highlight></codeline>
<codeline lineno="2879"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>D-Bus<sp/>profiles<sp/>where<sp/>we<sp/>are<sp/>typically<sp/>validating</highlight></codeline>
<codeline lineno="2880"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>function<sp/>names<sp/>and<sp/>such.<sp/>We<sp/>have<sp/>to<sp/>know<sp/>that</highlight></codeline>
<codeline lineno="2881"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>all<sp/>following<sp/>checks<sp/>will<sp/>pass<sp/>for<sp/>ASCII<sp/>though,</highlight></codeline>
<codeline lineno="2882"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>comments<sp/>follow<sp/>...</highlight></codeline>
<codeline lineno="2883"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>&lt;<sp/>128)</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1ga30614080229a4fb63460ffdc8ab484fb" kindref="member" tooltip="computes length and mask of a unicode character">UTF8_COMPUTE</ref><sp/>(*p,<sp/>mask,<sp/>char_len);</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(char_len<sp/>==<sp/>0))<sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII:<sp/>char_len<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>that<sp/>the<sp/>expected<sp/>number<sp/>of<sp/>bytes<sp/>exists<sp/>in<sp/>the<sp/>remaining<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>((end<sp/>-<sp/>p)<sp/>&lt;<sp/>char_len))<sp/></highlight><highlight class="comment">/*<sp/>ASCII:<sp/>p<sp/>&lt;<sp/>end<sp/>and<sp/>char_len<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusString_1gab5b4b316a69f78611a14e6b1fd091992" kindref="member" tooltip="Gets a UTF-8 value.">UTF8_GET</ref><sp/>(result,<sp/>p,<sp/>i,<sp/>mask,<sp/>char_len);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>overlong<sp/>UTF-8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(<ref refid="group__DBusString_1ga9691ff5386e218870299de1d9e77ceea" kindref="member" tooltip="computes length of a unicode character in UTF-8">UTF8_LENGTH</ref><sp/>(result)<sp/>!=<sp/>char_len))<sp/></highlight><highlight class="comment">/*<sp/>ASCII:<sp/>UTF8_LENGTH<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="2905"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>UNICODE_VALID<sp/>check<sp/>below<sp/>will<sp/>catch<sp/>this<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(result<sp/>==<sp/>(dbus_unichar_t)-1))<sp/></highlight><highlight class="comment">/*<sp/>ASCII:<sp/>result<sp/>=<sp/>ascii<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2909"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(!<ref refid="group__DBusString_1ga25f0a93fc023fa0eec07ac1e32011e89" kindref="member" tooltip="Check whether a Unicode (5.2) char is in a valid range.">UNICODE_VALID</ref><sp/>(result)))<sp/></highlight><highlight class="comment">/*<sp/>ASCII:<sp/>always<sp/>valid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UNICODE_VALID<sp/>should<sp/>have<sp/>caught<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_assert<sp/>(result<sp/>!=<sp/>(dbus_unichar_t)-1);</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>char_len;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>that<sp/>we<sp/>covered<sp/>the<sp/>entire<sp/>length<sp/>if<sp/>a<sp/>length<sp/>was</highlight></codeline>
<codeline lineno="2920"><highlight class="comment"><sp/><sp/><sp/>*<sp/>passed<sp/>in</highlight></codeline>
<codeline lineno="2921"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(p<sp/>!=<sp/>end))</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member" tooltip="A boolean, valid values are TRUE and FALSE.">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="2942" refid="group__DBusString_1ga199d0fc00ee3cd0300a1b3870d7986a3" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga199d0fc00ee3cd0300a1b3870d7986a3" kindref="member" tooltip="Checks that the given range of the string is all nul bytes.">_dbus_string_validate_nul</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len)</highlight></codeline>
<codeline lineno="2945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga5cf5f12f6d8f839e9a7c3ad790a83316" kindref="member" tooltip="Checks assertions about a string that may be const or locked.">DBUS_CONST_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/>_dbus_assert<sp/>(start<sp/>&lt;=<sp/>real-&gt;len);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>real-&gt;<ref refid="structDBusRealString_1aed6f543f7b748c4f5cf92b9aedd5f68d" kindref="member" tooltip="Length without nul.">len</ref><sp/>-<sp/>start)</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>+<sp/>start;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>s<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_DBUS_UNLIKELY<sp/>(*s<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member" tooltip="Expands to &amp;quot;0&amp;quot;.">FALSE</ref>;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member" tooltip="Expands to &amp;quot;1&amp;quot;.">TRUE</ref>;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974" refid="group__DBusString_1ga9385fd0de31b3f5f4f8baa96bad3fac6" refkind="member"><highlight class="normal"><ref refid="group__DBusString_1ga9385fd0de31b3f5f4f8baa96bad3fac6" kindref="member" tooltip="Clears all allocated bytes in the string to zero.">_dbus_string_zero</ref><sp/>(<ref refid="structDBusString" kindref="compound">DBusString</ref><sp/>*str)</highlight></codeline>
<codeline lineno="2975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><ref refid="group__DBusStringInternals_1ga376570af2af3ebb7e59d45b49b9582b3" kindref="member" tooltip="Checks assertions about a string object that needs to be modifiable - may not be locked or const...">DBUS_STRING_PREAMBLE</ref><sp/>(str);</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/>memset<sp/>(real-&gt;<ref refid="structDBusRealString_1ad60d27edba516b0a179ce1ead1e74725" kindref="member" tooltip="String data, plus nul termination.">str</ref><sp/>-<sp/>real-&gt;<ref refid="structDBusRealString_1a21fb373a65e36646787392a3dfe62443" kindref="member" tooltip="str - align_offset is the actual malloc block">align_offset</ref>,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>real-&gt;<ref refid="structDBusRealString_1ae12ec58c271e47f3f89fae1410b7c5e5" kindref="member" tooltip="Allocated size of data.">allocated</ref>);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2982"><highlight class="comment">/*<sp/>tests<sp/>are<sp/>in<sp/>dbus-string-util.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/rpmuser/debian/debian_dbus/dbus-1.4.18/dbus/dbus-string.c"/>
  </compounddef>
</doxygen>
